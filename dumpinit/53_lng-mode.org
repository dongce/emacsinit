

* babel
#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((restclient . t)
     (latex . t)))
  (append-to-list
   'org-src-lang-modes
   '(("dot" . graphviz-dot)
     ("translate" . text)
     ("ocaml" . tuareg)
     ("elisp" . emacs-lisp)
     ("ditaa" . artist)
     ("asymptote" . asy)
     ("sqlite" . sql)
     ("calc" . fundamental)
     ("C" . c)
     ("cpp" . c++)
     ("C++" . c++)
     ("screen" . shell-script)
     ("shell" . sh)
     ("bash" . sh)
     ("plantuml" . puml)))
#+end_src

#+RESULTS:
: ((http . ob-http) (dot . graphviz-dot) (redis . redis) (php . php) (arduino . arduino) (dot . graphviz-dot) (C . c) (C++ . c++) (asymptote . asy) (bash . sh) (beamer . latex) (calc . fundamental) (cpp . c++) (ditaa . artist) (elisp . emacs-lisp) (ocaml . tuareg) (screen . shell-script) (shell . sh) (sqlite . sql) (dot . graphviz-dot) (translate . text) (ocaml . tuareg) (elisp . emacs-lisp) (ditaa . artist) (asymptote . asy) (sqlite . sql) (calc . fundamental) (C . c) (cpp . c++) (C++ . c++) (screen . shell-script) (shell . sh) (bash . sh) (plantuml . puml))

* lsp
** process-output
   #+begin_src emacs-lisp
     (setq read-process-output-max (* 1024 1024))
   #+end_src
** spacemacs layer
   #+begin_src emacs-lisp
   (defvar c-c++-backend 'lsp-ccls) 
   #+end_src
** ccls
   #+begin_src emacs-lisp
   ;; (setq ccls-args '("--log-file=/tmp/ccls.log"))  
   (setq ccls-executable "/opt/ccls/bin/ccls")
   #+end_src

   #+RESULTS:
   : /opt/ccls/bin/ccls
* magit
  #+begin_src emacs-lisp
    (setf magit-repository-directories
          '(
            ;; LINK
            ("/mnt/t/gitdir/DLP_LINK11/" . 0 )
            ("/mnt/t/gitdir/DLP_ISDL/" . 0 )
            ("/mnt/t/KSS3/HCI_LINK11/" . 0 )
            ("/mnt/t/KSS3/HCI_ISDL/" . 0 )
            ;; configuration
            ("~/" . 0 )
            ("/opt/site-lisp/init/" . 0 )
            ;; org progject
            ("/mnt/develop/orgdir/" . 0 )
            ("/mnt/e/kdxbuild/" . 0 )
            ;; LTS
            ("/mnt/t/iff/src/kdxbuild-pdf2pda/" . 0 )
            ("/mnt/t/iff/src/data_man/" . 0 )
            ("/mnt/t/gitdir/ltslph1iffmode5" . 0 )
            ("/mnt/t/LTS/LPH-I/IFFMODE5" . 1)))
  #+end_src

  #+RESULTS:
  : ((/mnt/t/gitdir/DLP_LINK11/ . 0) (/mnt/t/gitdir/DLP_ISDL/ . 0) (/mnt/t/gitdir/ltslph1iffmode5 . 0) (/mnt/t/KSS3/HCI_LINK11/ . 0) (/mnt/t/KSS3/HCI_ISDL/ . 0) (~/ . 0) (/opt/site-lisp/init/ . 0) (/mnt/develop/orgdir/ . 0) (/mnt/e/kdxbuild/ . 0) (/mnt/t/LTS/LPH-I/IFFMODE5 . 1))


  
* latex
** ob-latex-as-png
   #+begin_src emacs-lisp
     (leaf ob-latex-as-png
       :require t
       :leaf-defer nil
       (add-to-list  'ob-latex-as-png-header "\\usepackage{amsmath}"))
   #+end_src

   #+RESULTS:
   : ob-latex-as-png

   
** company-math, cdlatex

  #+begin_src emacs-lisp
    (leaf company-math
      :custom (company-math-allow-latex-symbols-in-faces . t )
      :config
      (spacemacs|add-company-backends :backends (company-math-symbols-latex company-latex-commands) :modes org-mode)
      )

    (leaf cdlatex
      :ensure t
      :hook
      ((org-mode . turn-on-org-cdlatex)
       (LaTeX-mode . turn-on-cdlatex)))

  #+end_src

  

** oblivoir
   #+begin_src emacs-lisp
     (add-to-list 'org-latex-classes
                  '("oblivoir" "\\documentclass[11pt]{oblivoir}"
                    ("\\section{%s}"         . "\\section*{%s}")
                    ("\\subsection{%s}"      . "\\subsection*{%s}")
                    ("\\subsubsection{%s}"   . "\\subsubsection*{%s}")
                    ("\\paragraph{%s}"       . "\\paragraph*{%s}")
                    ("\\subparagraph{%s}"    . "\\subparagraph*{%s}")
                    ("\\subsubparagraph{%s}" . "\\subsubparagraph*{%s}")))
   #+end_src

   #+RESULTS:
   | oblivoir | \documentclass[11pt]{oblivoir}       | (\section{%s} . \section*{%s}) | (\subsection{%s} . \subsection*{%s}) | (\subsubsection{%s} . \subsubsection*{%s}) | (\paragraph{%s} . \paragraph*{%s})   | (\subparagraph{%s} . \subparagraph*{%s})   | (\subsubparagraph{%s} . \subsubparagraph*{%s}) |
   | article  | \documentclass[11pt]{article}        | (\section{%s} . \section*{%s}) | (\subsection{%s} . \subsection*{%s}) | (\subsubsection{%s} . \subsubsection*{%s}) | (\paragraph{%s} . \paragraph*{%s})   | (\subparagraph{%s} . \subparagraph*{%s})   | (\subsubparagraph{%s} . \subsubparagraph*{%s}) |
   | beamer   | \documentclass[presentation]{beamer} | (\section{%s} . \section*{%s}) | (\subsection{%s} . \subsection*{%s}) | (\subsubsection{%s} . \subsubsection*{%s}) |                                      |                                            |                                                |
   | article  | \documentclass[11pt]{article}        | (\section{%s} . \section*{%s}) | (\subsection{%s} . \subsection*{%s}) | (\subsubsection{%s} . \subsubsection*{%s}) | (\paragraph{%s} . \paragraph*{%s})   | (\subparagraph{%s} . \subparagraph*{%s})   |                                                |
   | report   | \documentclass[11pt]{report}         | (\part{%s} . \part*{%s})       | (\chapter{%s} . \chapter*{%s})       | (\section{%s} . \section*{%s})             | (\subsection{%s} . \subsection*{%s}) | (\subsubsection{%s} . \subsubsection*{%s}) |                                                |
   | book     | \documentclass[11pt]{book}           | (\part{%s} . \part*{%s})       | (\chapter{%s} . \chapter*{%s})       | (\section{%s} . \section*{%s})             | (\subsection{%s} . \subsection*{%s}) | (\subsubsection{%s} . \subsubsection*{%s}) |                                                |

** block
   #+begin_src emacs-lisp
     (leaf org-special-block-extras
       :ensure t
       :hook (org-mode-hook . org-special-block-extras-mode)
       :config
       (org-special-block-extras-short-names)

       (defblock split (sep "\\(!\\|‚Üê\\)") (lang "dcl" width '(0.7 0.3))
         "split block for tex"
         (let ((lines  (-map (lambda (x) (s-split sep x )) (s-lines (s-trim-right raw-contents)))))
           (pcase backend
             (`latex
              (s-join
               "\n"
               `(
                 "\\begin{tcolorbox}[colback=red!5!white,colframe=red!75!black,sidebyside,"
                 ,(apply #'format "                   lefthand width=%.01f\\linewidth, righthand width=%.01f\\linewidth]" width)

                 ,(concat  "\\begin{minted}{" lang "}")
                 ,@(-map #'car lines)
                 "\\end{minted}"
                 ,(concat  "\\begin{minted}{" lang "}")
                 ,@(-map #'cadr lines)
                 "\\end{minted}"
                 "\\end{tcolorbox}"
                 )))))))


   #+end_src

   #+RESULTS:
   : org-special-block-extras

   

** otherfile
   #+begin_src emacs-lisp
     (append-to-list 'cc-other-file-alist '(("\\.org\\'" (".tex" ))
                                            ("\\.tex\\'" (".org" ))))
   #+end_src

   #+RESULTS:
   | \.org\'   | (.tex)                            |
   | \.cc\'    | (.hh .h)                          |
   | \.hh\'    | (.cc .C .CC .cxx .cpp .c++)       |
   | \.c\'     | (.h)                              |
   | \.m\'     | (.h)                              |
   | \.h\'     | (.c .cc .C .CC .cxx .cpp .c++ .m) |
   | \.C\'     | (.H .hh .h)                       |
   | \.H\'     | (.C .CC)                          |
   | \.CC\'    | (.HH .H .hh .h)                   |
   | \.HH\'    | (.CC)                             |
   | \.c\+\+\' | (.h++ .hh .h)                     |
   | \.h\+\+\' | (.c++)                            |
   | \.cpp\'   | (.hpp .hh .h)                     |
   | \.hpp\'   | (.cpp)                            |
   | \.cxx\'   | (.hxx .hh .h)                     |
   | \.hxx\'   | (.cxx)                            |
   | \.org\'   | (.tex)                            |
   | \.tex\'   | (.org)                            |
