# -*- coding: utf-8; -*-


* top level 
** header
   #+BEGIN_SRC emacs-lisp
; -*- coding: utf-8; -*-
   #+END_SRC

** excommand
   #+BEGIN_SRC emacs-lisp

     ;; http://d.hatena.ne.jp/tarao/20130304/evil_config



     (defun evil-replace-word-selection()
       (interactive)
       (if (use-region-p)
           (let (
                 (selection (buffer-substring-no-properties (region-beginning) (region-end))))
             (if (= (length selection) 0)
                 (message "empty string")
               (evil-ex (concat "'<,'>s/" selection "/"))
               ))
         (evil-ex (concat "%s/" (thing-at-point 'word) "/"))))

     (evil-ex-define-cmd "[sc]ratch" #'tmpscratch)
   #+END_SRC
** leader

*** myown
    #+BEGIN_SRC emacs-lisp
      (spacemacs/set-leader-keys 
        "<backtab>" #'back-to-indentation
        "<backspace>" #'twin
        "%" 'evil-virep-replace-regexp
        "ak" 'kproc
        "a[" 'w32shell-cmd-here
        "yi" 'yankpad-insert
        "ye" 'yankpad-edit
        "ym" 'yankpad-map
        "yc" 'yankpad-set-category
        "oj" 'open-junk-file
        "obi" 'ido-switch-buffer-other-frame
        "oba" 'ivy-push-view
        "obA" 'ivy-pop-view
        "obb" 'ivy-switch-buffer-other-window
        "obB" 'ivy-switch-buffer
        "ob[" 'evil-prev-buffer
        "obk" 'kill-this-buffer
        "ob]" 'evil-next-buffer
        "obn" 'narrow-to-region
        "obN" 'narrow-to-defun
        "obw" 'widen
        "obs" 'save-buffer
        "obS" 'save-some-buffers
        "obm" 'boomark-set
        "obj" 'boomark-jump
        "obM" 'bookmark-bmenu-list
        "obl" 'xah-open-last-closed
        "obf" 'prelude-copy-file-name-to-clipboard
        "obh" 'mark-whole-buffer
        "obr" 'revert-buffer
        "obc" 'xah-close-current-buffer
        "of"   'selectrum-repeat
        "iu"   nil
        ;; "<home>" 'ibuffer
        "<home>" 'bufler
        "<end>" 'tmpscratch
        "<prior>" 'beginning-of-defun
        "<next>" 'end-of-defun
        "<delete>" 'switch-window

        "oO"  'switch-window
        "o1" 'switch-window-then-maximize
        "o2" 'switch-window-then-split-below
        "o3" 'switch-window-then-split-right
        "o0" 'switch-window-then-delete

        "o4d" 'switch-window-then-dired
        "o4f" 'switch-window-then-find-file
        "o4m" 'switch-window-then-compose-mail
        "o4r" 'switch-window-then-find-file-read-only
        "o4b" 'switch-window-then-display-buffer
        "o40" 'switch-window-then-kill-buffer

        ;; "d" 'dired
        "," 'smex
        "." 'embrace-commander
        "/" 'evil-replace-word-selection
        "\\" 'xah-copy-file-path
        "-" 'xah-copy-file-name
        "osL" 'loccur
        "oo" 'occur
        "osn" 'smartscan-symbol-go-forward
        "osp" 'smartscan-symbol-go-backward
        "osc" 'xah-lookup-cppreference
        "os." 'gtags-find-tag
        "os," 'gtags-pop-stack
        "os_" 'isearch-forward-symbol
        "os-" 'isearch-forward-at-point
        "osm" 'grep-word
        "ost" 'xah-find-text
        "osT" 'xah-find-text-regex

        "ou"  'hydra-undo-tree/body
        "op" 'pandoc-main-hydra/body

        "S" smerge-basic-map

        ";" 'evilnc-comment-or-uncomment-lines

        "oCw" #'wcopy ;;deprecated;;'evilnc-copy-and-comment-lines
        "oCx" #'crux-open-with
        "oCO" #'crux-smart-open-line-above
        "oCo" #'crux-smart-open-line
        "oCs" #'crux-cleanup-buffer-or-region
        "oCr" #'crux-recentf-ido-find-file
        "oCv" #'crux-view-url
        "oCe" #'crux-eval-and-replace
        "oCt" #'crux-transpose-windows
        "oCD" #'crux-delete-file-and-buffer
        "oCl" #'crux-duplicate-current-line-or-region
        "oCL" #'crux-duplicate-and-comment-current-line-or-region
        "oCR" #'crux-rename-file-and-buffer
        "oCn" #'crux-visit-term-buffer
        "oC1" #'crux-kill-other-buffers
        "oCi" #'crux-indent-defun
        "oCI" #'crux-indent-rigidly-and-copy-to-clipboard
        "oC." #'crux-find-user-init-file
        "oCs" #'crux-find-shell-init-file
        "oCj" #'crux-top-join-lines
        "oCk" #'crux-kill-whole-line
        "oCK" #'crux-kill-line-backwards
        "oCa" #'crux-ispell-word-then-abbrev




        "o]" 'exit-recursive-edit
        "ov" 'evil-scroll-down
        "oV" 'evil-scroll-up

        "G" 'keyboard-quit
        "ee" 'eval-last-sexp
        "E"  mu4e-main-mode-map
        "Eu" 'mu4e-update-mail-and-index


        "W" 'read-only-mode
        "oww" 'read-only-mode
        "ow1" 'delete-other-windows
        "ow2" 'split-window-below
        "ow3" 'split-window-right
        "ow0" 'delete-window
        "owd" 'delete-blank-lines
        "ows" 'resize-window
        "owj"      'winner-undo
        "owk"      'winner-redo

        "as" 'twin
        "aw" 'winexe
        ;;deprecattion;;"+" #'evil-numbers/inc-at-pt
        ;;deprecattion;;"-" #'evil-numbers/dec-at-pt
        ;;deprecattion;;"M" #'pop-to-mark-command ;;'evil-scroll-down
        ;;deprecattion;;"m" #'er/expand-region ;;#'extend-selection
        ;;deprecattion;;"S-m" #'mark-line ;;#'extend-selection
        ;;deprecattion;;"<" #'loccur
        ;;deprecattion;;"0" #'delete-window
        ;;deprecattion;;"1" #'delete-other-windows
        ;;deprecattion;;"2" #'split-window-below
        ;;deprecattion;;"3" #'split-window-right
        ;;deprecattion;;"(" #'kmacro-start-macro
        ;;deprecattion;;")" #'kmacro-end-macro
        ;;deprecattion;;"xx"  #'kmacro-end-and-call-macro
        ;;deprecattion;;"xi"  #'string-inflection-all-cycle
        ;;deprecattion;;"D" #'toggle-current-window-dedication
        ;;deprecattion;;"kb" 'kill-buffer
        ;;deprecattion;;"op"  (cdar (cddr  (cadr  projectile-mode-map)))
        ;;deprecattion;;"opw"  'purpose-load-window-layout
        ;;deprecattion;;"opW"  'purpose-save-window-layout
        ;;deprecattion;;"opE"  'project-explorer-open
        ;;deprecattion;;"opC"  'project-explorer-close
        ;;deprecattion;;"op/"  'projectile-grep
        ;;deprecattion;;"<SPC>" #'smex

        "ohz" 'zeal-at-point
       ;;changeto-selectrum;;"ohh"      'helm-mini
       ;;changeto-selectrum;;"oha"      'helm-apropos
       ;;changeto-selectrum;;"ohB"      'helm-buffers-list
       ;;changeto-selectrum;;"ohb"      'helm-descbindings
       ;;changeto-selectrum;;"ohy"      'helm-show-kill-ring
       ;;changeto-selectrum;;"ohx"      'helm-M-x
       ;;changeto-selectrum;;"oho"     'helm-occur
       ;;changeto-selectrum;;"ohs"     'helm-swoop
       ;;changeto-selectrum;;"ohy"     'helm-yas-complete
       ;;changeto-selectrum;;"ohY"     'helm-yas-create-snippet-on-region
       ;;changeto-selectrum;;"ohr" 'helm-all-mark-rings
       ;;changeto-selectrum;;"ohm" 'helm-smex
       ;;changeto-selectrum;;"ohM" 'helm-smex-major-mode-commands
        "od"  'counsel-goto-recent-directory

        "om" 'switch-window-then-orgmail
        "oM" 'orgmail
        "oS" 'tmpscratch
        "oI" 'ibuffer
        "ox" 'winexe
        "or" 'org-capture
        "oa" 'org-agenda
        "ol" 'org-store-link
        "oc" 'org-cliplink
        "oG"  'gxref-set-project-dir
        "ogd" 'gxref-set-project-dir
        "ogc" 'gxref-clear-project-dir
        "ogu" 'gxref-update-db
        "[" 'ivy-push-view 
        "]" 'ivy-pop-view 
        ;;"ph" 'project-explorer-helm
        "pH" 'project-explorer-open
        "px" 'project-explorer-close
        (kbd "C-g") popwin:keymap

        )
    #+END_SRC

    #+RESULTS:

*** expand spacemacbus
**** global
     #+BEGIN_SRC emacs-lisp

       (spacemacs/set-leader-keys
         ;; xl from spacemacs 
         "xll" 'sort-lines-length
         "xlU" 'uniq-region
         "xlS" 'sort-lines
         "xn"  'xah-space-to-newline
         "&"   'org-mark-ring-goto
         "nx"  'zz-narrow-repeat
         "nz"  narrow-map
         "bf"  'bufler-workspace-frame-set
         "bl"  'bufler-switch-buffer
         "bi"  'ibuffer
         "si"  'spacemacs/search-project-auto-region-or-symbol
         ;;sdcv dictionary
         "sV" 'sdcv-search-pointer+
         "sv" 'sdcv-search-pointer
         "sN" 'sdcv-search-input+
         "sn" 'sdcv-search-input

         )
     #+END_SRC

     #+RESULTS:

     
**** consult
     #+begin_src emacs-lisp


       (spacemacs/set-leader-keys
         "u" 'consult-buffer-other-window ;;helm-goto-recent-directory ;;counsel-goto-recent-directory 
         "U" '(lambda (frame) (interactive "P" ) (if frame (consult-buffer-other-frame) (consult-buffer))) ;;'consult-recent-file;;helm-choose-from-recentf  ;;'string-rectangle ;;'recentf-open-most-recent-file
         "b[" 'evil-prev-buffer
         "b]" 'evil-next-buffer
         "fb" 'consult-bookmark
         "ry"  'consult-yank-pop
         "pi"    'consult-projectile-imenu
         "sj" 'consult-jump-in-buffer
         "ss" 'consult-line
         "sS" 'consult-thing-at-point
         )
     #+end_src

     #+RESULTS:

**** for major mode
     #+BEGIN_SRC emacs-lisp
       (spacemacs/set-leader-keys-for-major-mode 'org-mode
         "v" 'org-copy-visible
         "n" 'org-narrow-to-subtree
         )

       (spacemacs/set-leader-keys-for-major-mode 'mu4e-view-mode
         "&" 'org-mark-ring-goto)

       (spacemacs/set-leader-keys-for-major-mode 'mu4e-headers-mode
         "&" 'org-mark-ring-goto)

       (spacemacs/set-leader-keys-for-major-mode 'org-mode "os" ",',sb,c") 

     #+END_SRC

     #+RESULTS:


** evil default override 


   #+BEGIN_SRC emacs-lisp
     ;;deprecated;;(evilnc-default-hotkeys)

     ;;deprecated;;(global-set-key (kbd "C-x r t") 'inline-string-rectangle)
     (evil-set-toggle-key "<pause>")

     (general-define-key
      :keymaps '(evil-normal-state-map evil-visual-state-map)
      "u" 'undo-fu-only-undo
      "U" 'undo-fu-only-redo
      "gl" 'goto-line
      "g[" 'beginning-of-buffer
      "g]" 'end-of-buffer      
      "g{" 'beginning-of-defun
      "g}" 'end-of-defun      
      "gg" 'revert-buffer
      "gR" 'xref-find-references
      "gr" 'xref-pop-marker-stack
      "Q" 'call-last-kbd-macro
      "Q" 'call-last-kbd-macro
      [escape] 'keyboard-quit)


     (general-define-key
      :keymaps '(evil-normal-state-map evil-visual-state-map evil-insert-state-map)

      "\C-a" 'evil-beginning-of-line
      "\C-e" 'evil-end-of-line
      "\C-f" 'evil-forward-char
      "\C-b" 'evil-backward-char
      "\C-d" 'evil-delete-char
      "\C-n" 'evil-next-line
      "\C-p" 'evil-previous-line
      ;; "\C-w" 'phi-rectangle-kill-region
      "\C-w" 'kill-region-dwim
      "\C-y" 'yank
      "\C-k" 'kill-line
      )

     (general-define-key
      :keymaps '(minibuffer-local-map 
                 minibuffer-local-ns-map 
                 minibuffer-local-completion-map 
                 minibuffer-local-must-match-map 
                 minibuffer-local-isearch-map)
      [escape] 'minibuffer-keyboard-quit)

     ;;(define-key minibuffer-local-isearch-map [escape] 'keyboard-quit)
     ;;(define-key minibuffer-local-isearch-map [?\S- ] 'toggle-korean-input-method)



     ;;; http://leavinsprogramming.blogspot.kr/2012/05/evil-emacs-mode-for-vivim-users.html
     (defun evil-undefine ()
       (interactive)
       (let (evil-mode-map-alist)
         (call-interactively (key-binding (this-command-keys)))))

     (general-define-key
      :keymaps '(evil-normal-state-map)

      (kbd "TAB")   #'evil-undefine
      (kbd "C-c +") #'evil-numbers/inc-at-pt
      (kbd "C-c -") #'evil-numbers/dec-at-pt
      "zt" 'vimish-fold-toggle
      "zF" 'hs-toggle-hiding
      "zx" 'smex)

     (general-define-key
      :keymaps '(evil-motion-state-map)

      "\C-]" 'find-tag-dwim
      [down-mouse-1] 'mouse-drag-region) 









   #+END_SRC

** kp map
   #+BEGIN_SRC emacs-lisp
     ;; kp-map 
     ;; (define-key evil-normal-state-map [kp-0]     'helm-smex)

     (general-define-key
      :keymaps '(evil-normal-state-map evil-visual-state-map )
      [kp-0]        'copy-region-strip-left
      [kp-1]        'select-window-1
      [kp-2]        'bm-next
      [kp-3]        'select-window-3
      [kp-4]        'evil-prev-buffer
      [kp-5]        'bm-toggle
      [kp-6]        'evil-next-buffer
      [kp-7]        'copy-to-register-1
      [kp-8]        'bm-previous
      [kp-9]        'paste-from-register-1
      [kp-divide]   'ibuffer
      [kp-add]      'evil-paste-after
      [kp-enter]    'kmacro-end-and-call-macro
      [kp-decimal]  'winexe
      [kp-subtract] 'recenter-top-bottom)

   #+END_SRC

   #+RESULTS:
   : ibuffer

** evil surround
   #+BEGIN_SRC emacs-lisp
     (leaf evil-surround
       :ensure t
       :global-minor-mode global-evil-surround-mode 
       :config
       (general-define-key
        :states 'visual
        :keymaps 'evil-surround-mode-map
        "s" 'evil-surround-region))

     (leaf evil-embrace
       :ensure t
       :hook    (org-mode-hook . embrace-org-mode-hook)
       :config
       (evil-embrace-enable-evil-surround-integration))

   #+END_SRC

** auto complete

   #+BEGIN_SRC emacs-lisp
     ;;; Auto-complete
     (leaf auto-complete
       :ensure t
       :config
       (evil-add-command-properties 'ac-complete :repeat 'evil-ac-repeat)
       (evil-add-command-properties 'ac-expand :repeat 'evil-ac-repeat)
       (evil-add-command-properties 'ac-next :repeat 'ignore)
       (evil-add-command-properties 'ac-previous :repeat 'ignore)

       (defvar evil-ac-prefix-len nil
         "The length of the prefix of the current item to be completed.")

       (defun evil-ac-repeat (flag)
         "Record the changes for auto-completion."
         (cond
          ((eq flag 'pre)
           (setq evil-ac-prefix-len (length ac-prefix))
           (evil-repeat-start-record-changes))
          ((eq flag 'post)
           ;; Add change to remove the prefix
           (evil-repeat-record-change (- evil-ac-prefix-len)
                                      ""
                                      evil-ac-prefix-len)
           ;; Add change to insert the full completed text
           (evil-repeat-record-change
            (- evil-ac-prefix-len)
            (buffer-substring-no-properties (- evil-repeat-pos
                                               evil-ac-prefix-len)
                                            (point))
            0)
           ;; Finish repeation
           (evil-repeat-finish-record-changes)))))

   #+END_SRC

** evil extra operator
   #+BEGIN_SRC emacs-lisp
     ;; https://github.com/redguardtoo/evil-matchit/blob/master/README.org
     (leaf evil-matchit
       :ensure t
       :global-minor-mode global-evil-matchit-mode
       :config
       (plist-put evilmi-plugins 'xah-html-mode '((evilmi-html-get-tag evilmi-html-jump)))
       (plist-put evilmi-plugins 'web-mode '((evilmi-html-get-tag evilmi-html-jump))))


     (leaf evil-args
       :ensure t
       :config
       ;; bind evil-args text objects
       (general-define-key
        :keymaps 'evil-inner-text-objects-map
        "a" 'evil-inner-arg)
       (general-define-key
        :keymaps 'evil-outer-text-objects-map
        "a" 'evil-outer-arg)

       ;; bind evil-forward/backward-args
       (general-define-key
        :keymaps '(evil-normal-state-map evil-motion-state-map )
        "K" 'evil-jump-out-args
        "L" 'evil-forward-arg
        "H" 'evil-backward-arg))

     (general-define-key
      :keymaps '(evil-normal-state-map )
      (kbd "<S-backspace>") 'split-line-indent
      (kbd "<S-return>") #'(lambda ()
                             (interactive)
                             (call-interactively 'spacemacs/evil-insert-line-below)
                             (evil-next-line)))

     (leaf evil-extra-operator
       :ensure t
       :custom
        ((evil-extra-operator-eval-modes-alist .
         '((ruby-mode ruby-send-region)
           (enh-ruby-mode ruby-send-region)
           (python-mode python-shell-send-region)))
        (evil-extra-operator-fold-key . "gz"))
       :global-minor-mode global-evil-extra-operator-mode )

     (leaf evil-visualstar
       :ensure t
       :global-minor-mode global-evil-visualstar-mode )


   #+END_SRC

** mode specific 
*** ibuffer                                                      :deprecated:
    #+BEGIN_SRC emacs-lisp :tangle no
      ;; https://github.com/emacsmirror/evil/blob/master/evil-integration.el
      ;; Ibuffer

      (evil-make-overriding-map ibuffer-mode-map 'normal t)

      (general-define-key
       :keymaps 'ibuffer-mode-map
       (kbd  "<SPC>") nil)

      (general-define-key
       :states 'normal
       :keymaps 'ibuffer-mode-map
       "j" 'evil-next-line
       "k" 'evil-previous-line
       "RET" 'ibuffer-visit-buffer)
    #+END_SRC
*** w related mode 

    #+BEGIN_SRC emacs-lisp
      (progn
        (add-hook 'wdired-mode-hook #'evil-change-to-initial-state)
        (defadvice wdired-change-to-dired-mode (after evil activate)
          (evil-change-to-initial-state nil t)))



      ;; https://github.com/glynnforrest/emacs.d/blob/master/setup-occur-grep-ack.el

      (defun get-buffers-matching-mode (mode)
        "Returns a list of buffers where their major-mode is equal to MODE"
        (let ((buffer-mode-matches '()))
          (dolist (buf (buffer-list))
            (with-current-buffer buf
              (if (eq mode major-mode)
                  (add-to-list 'buffer-mode-matches buf))))
          buffer-mode-matches))

      (defun multi-occur-in-this-mode ()
        "Show all lines matching REGEXP in buffers with this major mode."
        (interactive)
        (multi-occur
         (get-buffers-matching-mode major-mode)
         (car (occur-read-primary-args))))

      (defun occur-goto-occurrence-recenter ()
        "Go to the occurrence on the current line and recenter."
        (interactive)
        (occur-mode-goto-occurrence)
        (recenter))

      ;; Preview occurrences in occur without leaving the buffer
      (defun occur-display-occurrence-recenter ()
        "Display the occurrence on the current line in another window and recenter."
        (interactive)
        (occur-goto-occurrence-recenter)
        (other-window 1))


      ;; Grep mode
      (defun grep-goto-occurrence-recenter ()
        "Go to the occurrence on the current line and recenter."
        (interactive)
        (compile-goto-error)
        (recenter))

      (defun grep-display-occurrence-recenter ()
        "Display the grep result of the current line in another window and recenter."
        (interactive)
        (grep-goto-occurrence-recenter)
        (other-window 1))


      (leaf wgrep
        :ensure t
        :config

        (w32-unix-eval
         ((evil-declare-key 'motion occur-mode-map (kbd "<return>")   'occur-goto-occurrence-recenter)
          (evil-declare-key 'motion grep-mode-map (kbd "<return>") 'grep-goto-occurrence-recenter)
          (evil-declare-key 'motion occur-mode-map (kbd "<S-return>") 'occur-display-occurrence-recenter)
          (evil-declare-key 'motion grep-mode-map (kbd "<S-return>") 'grep-display-occurrence-recenter)
          (evil-declare-key 'motion ack-and-a-half-mode-map (kbd "<return>") 'grep-goto-occurrence-recenter)
          (evil-declare-key 'motion ack-and-a-half-mode-map (kbd "<S-return>") 'grep-display-occurrence-recenter))
         ((evil-declare-key 'motion occur-mode-map (kbd "RET")   'occur-goto-occurrence-recenter)
          (evil-declare-key 'motion grep-mode-map (kbd "RET") 'grep-goto-occurrence-recenter)
          (evil-declare-key 'motion occur-mode-map (kbd "<S-RET>") 'occur-display-occurrence-recenter)
          (evil-declare-key 'motion grep-mode-map (kbd "<S-RET>") 'grep-display-occurrence-recenter)
          (evil-declare-key 'motion ack-and-a-half-mode-map (kbd "RET") 'grep-goto-occurrence-recenter)
          (evil-declare-key 'motion ack-and-a-half-mode-map (kbd "<S-RET>") 'grep-display-occurrence-recenter)))

        (evil-declare-key 'motion occur-mode-map "e" 'occur-edit-mode)
        (evil-declare-key 'motion occur-edit-mode-map "e" 'occur-cease-edit)
        (evil-declare-key 'motion grep-mode-map "e" 'wgrep-change-to-wgrep-mode)
        (evil-declare-key 'motion grep-mode-map "w" 'wgrep-save-all-buffers)
        ;;notuse;;(evil-declare-key 'motion ack-and-a-half-mode-map ",e" 'wgrep-change-to-wgrep-mode)
        ;;notuse;;(evil-declare-key 'motion ack-and-a-half-mode-map ",w" 'wgrep-save-all-buffers)
        (evil-declare-key 'motion wgrep-mode-map "e" 'wgrep-finish-edit)
        (evil-declare-key 'motion wgrep-mode-map "x" 'wgrep-abort-changes))


    #+END_SRC

    
*** ada-mode
    #+begin_src emacs-lisp
      (general-define-key
       :states '(normal insert visual replace operator motion emacs)
       :keymaps 'ada-mode-map
       (kbd "<f12>" ) 'toggle-parse-wisi)
    #+end_src

    #+RESULTS:

** sexp

**** evil-cleverparens
     #+BEGIN_SRC emacs-lisp
     (add-hook 'elisp-mode  #'evil-cleverparens-mode)
     (add-hook 'scheme-mode #'evil-cleverparens-mode)
     #+END_SRC

     #+RESULTS:
     | evil-cleverparens-mode |

*** org 
**** org-show-current-heading-tidily
     #+BEGIN_SRC emacs-lisp
       (defun org-show-current-heading-tidily ()
         (interactive)  ;Inteactive
         "Show next entry, keeping other entries closed."
         (if (save-excursion (end-of-line) (outline-invisible-p))
             (progn (org-show-entry) (show-children))
           (outline-back-to-heading)
           (unless (and (bolp) (org-on-heading-p))
             (org-up-heading-safe)
             (hide-subtree)
             (error "Boundary reached"))
           (org-overview)
           (org-reveal t)
           (org-show-entry)
           (show-children)))




       (evil-leader/set-key-for-mode 'org-mode
         "ha" 'counsel-org-agenda-headlines ;'helm-org-agenda-files-headings
         "hH" 'consult-outline
         "A"  #'(lambda () (interactive) (switch-to-buffer "*Org Agenda*"))
         "hh" 'counsel-outline
         "u"    'outline-up-heading
         "q"    'org-todo
         "<down>"    'outline-next-visible-heading
         "<up>"    'outline-previous-visible-heading
         "<right>"    'org-forward-heading-same-level
         "<left>"    'org-backward-heading-same-level

         "r"         'org-mark-ring-goto
         "&"         'org-mark-ring-goto

         "M" 'org-mime-org-buffer-htmlize
         "`" 'mu4e-message-send-and-exit
         "or" 'org-capture
         "oa" 'org-agenda
         "os" 'org-store-link
         "ol" 'org-insert-alllink
         "oo" 'org-open-at-point-global
         "oR" 'org-refile
         "oc" 'org-cliplink
         "od" 'org-deadline
         "oh" 'org-schedule
         "ot" 'org-set-tags
         "oT" 'org-time-stamp
         "ov" 'org-attach-screenshot
         "ob" 'org-iswitchb
         "ow" 'org-archive-subtree-default
         "op" 'org-link-copy-image
         "of" 'org-link-copy-file
         "oe" 'org-set-effort
         "oi" 'org-clock-in
         "oI" 'org-clock-out
         "w" 'org-archive-subtree-default
         "<f5>" 'org-redisplay-inline-images
         )



     #+END_SRC

     #+RESULTS:
     : t

**** evil-org 
     deprecated by evil-org
***** use this

      #+BEGIN_SRC emacs-lisp

        (leaf evil-org
          :ensure t
          :config
          (general-define-key
           :definer 'minor-mode
           :states '(normal insert visual )
           :keymaps 'evil-org-mode
           (kbd "<f2>") 'org-insert-structure-template
           (kbd "<kp-multiply>") 'org-insert-star
           (kbd "<kp-subtract>") 'wsl-open-org-link)
          (general-define-key
           :states '(normal  visual )
           :keymaps 'outline-mode-map
           ;;"gt"    'org-goto
           "gh"    'outline-up-heading
           "gn"    'outline-next-heading
           "gN"    'outline-next-visible-heading
           "gp"    'outline-previous-heading
           "gP"    'outline-previous-visible-heading
           "gl"    'goto-line
           "gf"    'org-forward-heading-same-level
           "gb"    'org-backward-heading-same-level
           "gu"    'outline-up-heading))

      #+END_SRC

      #+RESULTS:

*** mu4e
**** leader key
     #+BEGIN_SRC emacs-lisp 
       
   (evil-leader/set-key-for-mode 'mu4e-compose-mode
     "`" 'mu4e-message-send-and-exit)

     #+END_SRC

     #+RESULTS:

     - kim
     - dong
     - il

*** python

     #+BEGIN_SRC emacs-lisp 

       (evil-leader/set-key-for-mode 'python-mode
         "ss" 'python-shell-send-statement)

     #+END_SRC


*** dired                 
    
*** diff
    #+begin_src emacs-lisp

      (evil-leader/set-key-for-mode 'diff-mode
        "hH" 'counsel-outline
        "hh" 'consult-outline)
    #+end_src

    #+RESULTS:

**** dired mapping  
***** list files
      #+begin_src emacs-lisp
        (general-define-key :states 'normal :keymaps 'dired-mode-map (kbd "<f6>") #'diredp-list-marked)
      #+end_src

      #+RESULTS:


*** magit
    #+BEGIN_SRC emacs-lisp

      (leaf git-timemachine
        :ensure t
        ;; force update evil keymaps after git-timemachine-mode loaded
        :hook
        (git-timemachine-mode-hook . evil-normalize-keymaps)
        :config
        (evil-make-overriding-map git-timemachine-mode-map 'normal))


      (leaf evil-magit
        :ensure t
        :config

        (defun git-add-all ()
          (interactive)
          (let ((current-prefix-arg '(4)))
            (magit-stage-modified "t")))

        (defun git-quick-commit ()
          (interactive)
          (git-add-all)
          (magit-commit-create))

        (spacemacs/set-leader-keys
          "gG"  'git-quick-commit
          "gg"  'magit-commit-create
          "ga"  'magit-stage-modified
          "gp"  'magit-push-current-to-upstream
        ))

    #+END_SRC


*** occur
    
       #+begin_src emacs-lisp :tangle no
       (general-def 'normal occur-mode-map "y" #'evil-yank)
       #+end_src

       #+RESULTS:

** bind map
   #+BEGIN_SRC emacs-lisp
     (leaf evil-lisp-state
       :ensure t
       :config
       (let ((leader ","))
         (bind-map evil-lisp-state-map
           :evil-keys (leader)
           :major-modes (emacs-lisp-mode)
           :evil-states (normal lisp))
         (bind-map evil-lisp-state-major-mode-map
           :evil-keys (leader)
           :evil-states (normal lisp)
           :major-modes (emacs-lisp-mode))) )
   #+END_SRC

   #+RESULTS:
   : t

** enriched mode
   #+begin_src emacs-lisp
       (spacemacs/set-leader-keys-for-minor-mode 'enriched-mode
         "o" facemenu-keymap)
   #+end_src

   #+RESULTS:


** evil-innter-text
   #+BEGIN_SRC emacs-lisp
     (general-define-key
      :keymaps 'evil-inner-text-objects-map
      "K" 'evil-textobj-column-word
      "k" 'evil-textobj-column-word)

   #+END_SRC
** jump
   #+begin_src emacs-lisp
     (defun advice/save-imenu-jump (item)
       (evil--jumps-push))

     (advice-add 'imenu :before 'advice/save-imenu-jump)
   #+end_src

   #+RESULTS:

* bind map                                                       :DEPRECATED:
#+BEGIN_SRC emacs-lisp :tangle no

  (leaf bind-map
    :ensure t
    :config
    (bind-map-set-keys helm-ag-map
      (kbd "<f2>") 'helm-ag-edit
      (kbd "<f3>") 'helm-ag--run-save-buffer)
    (bind-map-set-keys helm-grep-map
      (kbd "<f3>") 'helm-grep-run-save-buffer))

#+END_SRC

#+RESULTS:
: t



* lion mode 
[[https://github.com/edkolev/evil-lion][GitHub - edkolev/evil-lion: Evil align operator]]
#+BEGIN_SRC emacs-lisp
  (leaf evil-lion
    :ensure t
    :global-minor-mode evil-lion-mode)
#+END_SRC

#+RESULTS:
: t
* switch-window
  #+BEGIN_SRC emacs-lisp
    (leaf switch-window
      :ensure t
      :custom (( switch-window-shortcut-style . 'qwerty)
               ( switch-window-querty-shortcuts . '("a" "s" "d" "f" "j" "k" "l" ";" "w" "e" "i" "o")))
      :bind
      (( (kbd "<f12>") . dired)
       ( (kbd "<f22>") . switch-to-buffer)
       ( (kbd "<M-f12>") . switch-window-then-dired))
      ;;(global-set-key (kbd "<S-f12>") 'switch-window-then-find-file)
      ;;(global-set-key (kbd "C-x o") 'switch-window)
      ;;(global-set-key (kbd "C-x 1") 'switch-window-then-maximize)
      ;;(global-set-key (kbd "C-x 2") 'switch-window-then-split-below)
      ;;(global-set-key (kbd "C-x 3") 'switch-window-then-split-right)
      ;;(global-set-key (kbd "C-x 0") 'switch-window-then-delete)
      ;;
      ;;(global-set-key (kbd "C-x 4 d") 'switch-window-then-dired)
      ;;(global-set-key (kbd "C-x 4 f") 'switch-window-then-find-file)
      ;;(global-set-key (kbd "C-x 4 m") 'switch-window-then-compose-mail)
      ;;(global-set-key (kbd "C-x 4 r") 'switch-window-then-find-file-read-only)
      ;;
      ;;(global-set-key (kbd "C-x 4 C-f") 'switch-window-then-find-file)
      ;;(global-set-key (kbd "C-x 4 C-o") 'switch-window-then-display-buffer)
      ;;
      ;;(global-set-key (kbd "C-x 4 0") 'switch-window-then-kill-buffer)
      )

  #+END_SRC

  #+RESULTS:
* garbage-collection
  
  #+begin_src emacs-lisp
    (global-set-key (kbd "<C-f33>")
                    (lambda ()
                      (interactive)
                      (save-some-buffers t
                                         #'(lambda ()
                                             (and (not buffer-read-only)
                                                  (buffer-file-name))))
                      (garbage-collect)))

    (global-set-key (kbd "<f33>") 'keyboard-quit)

  #+end_src

  #+RESULTS:
  : keyboard-quit

* evil-states
** normal state
   #+BEGIN_SRC emacs-lisp
   (append-to-list 'evil-normal-state-modes '(mu4e-compose-mode occur-mode occur-edit-mode))
   #+END_SRC
   
** emacs state
   #+BEGIN_SRC emacs-lisp
     (append-to-list
      'evil-emacs-state-modes
      '(
        svn-status-mode
        dvc-log-edit-mode
        project-buffer-mode
        gtags-selection-mode
        speedbar-mode
        picpocket-mode
        vterm-mode
        elfeed-mode
        ))
   #+END_SRC

   #+RESULTS:
   | org-brain-visualize-mode | 5x5-mode | bbdb-mode | biblio-selection-mode | blackbox-mode | bookmark-bmenu-mode | bookmark-edit-annotation-mode | browse-kill-ring-mode | bubbles-mode | bzr-annotate-mode | calc-mode | cfw:calendar-mode | completion-list-mode | custom-theme-choose-mode | debugger-mode | delicious-search-mode | desktop-menu-blist-mode | desktop-menu-mode | dun-mode | dvc-bookmarks-mode | dvc-diff-mode | dvc-info-buffer-mode | dvc-log-buffer-mode | dvc-revlist-mode | dvc-revlog-mode | dvc-status-mode | dvc-tips-mode | ediff-mode | ediff-meta-mode | efs-mode | Electric-buffer-menu-mode | emms-browser-mode | emms-mark-mode | emms-metaplaylist-mode | emms-playlist-mode | ess-help-mode | etags-select-mode | fj-mode | gc-issues-mode | gdb-breakpoints-mode | gdb-disassembly-mode | gdb-frames-mode | gdb-locals-mode | gdb-memory-mode | gdb-registers-mode | gdb-threads-mode | gist-list-mode | gnus-article-mode | gnus-browse-mode | gnus-group-mode | gnus-server-mode | gnus-summary-mode | gomoku-mode | google-maps-static-mode | jde-javadoc-checker-report-mode | magit-popup-mode | magit-popup-sequence-mode | mh-folder-mode | monky-mode | mpuz-mode | notmuch-hello-mode | notmuch-search-mode | notmuch-show-mode | notmuch-tree-mode | pdf-outline-buffer-mode | pdf-view-mode | proced-mode | rcirc-mode | rebase-mode | recentf-dialog-mode | reftex-select-bib-mode | reftex-select-label-mode | reftex-toc-mode | sldb-mode | slime-inspector-mode | slime-thread-control-mode | slime-xref-mode | snake-mode | solitaire-mode | sr-buttons-mode | sr-mode | sr-tree-mode | sr-virtual-mode | tetris-mode | tla-annotate-mode | tla-archive-list-mode | tla-bconfig-mode | tla-bookmarks-mode | tla-branch-list-mode | tla-browse-mode | tla-category-list-mode | tla-changelog-mode | tla-follow-symlinks-mode | tla-inventory-file-mode | tla-inventory-mode | tla-lint-mode | tla-logs-mode | tla-revision-list-mode | tla-revlog-mode | tla-tree-lint-mode | tla-version-list-mode | twittering-mode | urlview-mode | vm-mode | vm-summary-mode | w3m-mode | wab-compilation-mode | xgit-annotate-mode | xgit-changelog-mode | xgit-diff-mode | xgit-revlog-mode | xhg-annotate-mode | xhg-log-mode | xhg-mode | xhg-mq-mode | xhg-mq-sub-mode | xhg-status-extra-mode | magit-show-branches-mode | svn-status-mode | dvc-log-edit-mode | project-buffer-mode | gtags-selection-mode | speedbar-mode | picpocket-mode | vterm-mode | elfeed-mode | magit-show-branches-mode | svn-status-mode | dvc-log-edit-mode | project-buffer-mode | gtags-selection-mode | speedbar-mode | picpocket-mode | vterm-mode | elfeed-mode | bufler-mode | svn-status-mode | dvc-log-edit-mode | project-buffer-mode | gtags-selection-mode | speedbar-mode | picpocket-mode | vterm-mode | elfeed-mode | bufler-mode | bufler-list-mode |

** emacs-motion state 
   #+BEGIN_SRC emacs-lisp
     (append-to-list
      'evil-motion-state-modes
      '(spacemacs-buffer-mode
       magit-repolist-mode
       view-mode
       grep-mode))
   #+END_SRC
* evil-search-highlight-persist

  #+begin_src emacs-lisp
    (leaf evil-search-highlight-persist :ensure t)
  #+end_src

  #+RESULTS:
* evil-tex
  #+begin_src emacs-lisp
    (leaf evil-tex
      :ensure t
      :hook
      (LaTeX-mode-hook . evil-tex-mode))
  #+end_src

  #+RESULTS:
  : t

* text-object
Update: evil-regexp-range was recently replaced with evil-select-paren. This works on current evil and has the same usage as the old one:

** macro
 #+begin_src emacs-lisp


   (defmacro define-and-bind-text-object (name key start-regex end-regex)
     (let ((inner-name (make-symbol (s-append "-inner-name" name)))
           (outer-name (make-symbol (s-append "-outer-name" name))))
       `(progn
          (evil-define-text-object ,inner-name (count &optional beg end type)
            (evil-select-paren ,start-regex ,end-regex beg end type count nil))
          (evil-define-text-object ,outer-name (count &optional beg end type)
            (evil-select-paren ,start-regex ,end-regex beg end type count t))
          (define-key evil-inner-text-objects-map ,key (quote ,inner-name))
          (define-key evil-outer-text-objects-map ,key (quote ,outer-name)))))

  (define-and-bind-text-object "cblock" "c" "<\[0-9\]\\{8\\}W\[0-9\]\\{2\\}" "\[0-9\]\\{8\\}W\[0-9\]\\{2\\}>")

 #+end_src

 #+RESULTS:
 : define-and-bind-text-object

** Usage:


 #+begin_src emacs-lisp :tangle no
 ; between dollar signs:
 (define-and-bind-text-object "$" "\\$" "\\$")

 ; between pipe characters:
 (define-and-bind-text-object "|" "|" "|")

 ; from regex "b" up to regex "c", bound to k (invoke with "vik" or "vak"):
 (define-and-bind-text-object "k" "b" "c")
 #+end_src

** example


#+begin_quote
Posted byu/VanLaser
4 years ago
evil 'il/al' and 'ie/ae' text-objects

In Vim, I was used with Kana's custom il, al and ie, ae text-objects, that can select in an inclusive or exclusive way (without trailing space characters) the current line or the entire buffer, respectively.

One way to have the same functionality in Emacs+Evil is based on the regex-based define-and-bind-text-object awesome macro definition, and is as simple as that:

  ;; create "il"/"al" (inside/around) line text objects:
  (define-and-bind-text-object "l" "^\\s-*" "\\s-*$")
  ;; create "ie"/"ae" (inside/around) entire buffer text objects:
  (define-and-bind-text-object "e" "\\`\\s-*" "\\s-*\\'")

So now I can run for example yae to copy the entire buffer content to the default register, or dil to delete the current line without the trailing spaces or tabs (or use them with a custom operator such as "google translate").

I hope it helps others vimacsers too!

In the second case (entire buffer), is the regex fast, or it gets slow with large buffers (e.g. compared to a solution based on beginning-of-buffer, end-of-buffer)?
#+end_quote

* evil-collection
** mu4e
   #+begin_src emacs-lisp


     ;;'(evil-want-keybinding nil)
     ;;'(evil-want-minibuffer t)

          (leaf evil-collection
            :ensure t
            :custom ((evil-collection-setup-minibuffer . t)
                     (evil-want-minibuffer . t) 
                     (evil-want-keybinding . nil))
            :config
            (evil-collection-init '( minibuffer diff-mode outline dired mu4e ivy consult))

            (let ((bindings `((mu4e-view-mode-map 
                               "*"             bmkp-mu4e-view
                               ,(kbd "<home>")             open-mu4e-view   ;open in outlook
                               ,(kbd "<insert>")           mu4e-headers-mark-for-something   ;open in outlook
                               ,(kbd "<kp-multiply>") bmkp-mu4e-view
                               "@"             copy-mu4e-view
                               ,(kbd "<f12>F")             mu4e-find-file
                               ,(kbd "<f12>f")             mu4e-field-view
                               "o" mu4e-view-open-attachment
                               "O" mu4e-view-open-attachment-emacs
                               "m"  	mu4e-view-mark-for-tag
                               "#"  	mu4e-mark-resolve-deferred-marks)
                              (mu4e-headers-mode-map 
                               ,(kbd "<home>")             open-mu4e-view   ;open in outlook
                               ,(kbd "<insert>")        mu4e-headers-mark-for-something   ;open in outlook
                               ,(kbd "<kp-multiply>") bmkp-mu4e-header
                               "@"             copy-mu4e-header
                               ,(kbd "<f12>F")             mu4e-find-file
                               ,(kbd "<f12>f")             mu4e-field-header
                               "L"  	mu4e-occur-store-link)
                              (diff-mode-map
                               ;; motion
                               ,(kbd "<tab>") outline-cycle
                               ,(kbd "C-<tab>") outline-show-all
                               ,(kbd "<backtab>") outline-hide-other)
                              (outline-mode-map
                               ,(kbd "C-k") kill-line
                               ,(kbd "C-j") outline-forward-same-level))))
              (dolist (binding bindings)
                (apply #'evil-collection-define-key 'normal binding))))

          (evil-collection-define-key 'motion 'diff-mode-map
            (kbd "<tab>") 'outline-cycle
            (kbd "C-<tab>") 'outline-show-all
            (kbd "<backtab>") 'outline-hide-other)

          (evil-collection-define-key 'normal 'dired-mode-map
            ;;"["  'w32shell-cmd-here
            ;;"\M-;" 'execute-program
            "o" 'w32-dired-open-explorer
            "O" 'w32-dired-open-explorer-tmp
            ;; ",h" #'helm-dired-history-view
            ",," 'w32-dired-open-explorer-marked
            ",2" #'2zip
            ",7" #'2-7zip
            "S" 'hydra-dired-quick-sort/body
            "\\" 'w32-dired-copy-file-name)

   #+end_src

   #+RESULTS:
*** bufler
    #+begin_src emacs-lisp

      (general-swap-key :keymaps 'bufler-list-mode-map "k" "d" ) 
      (evil-collection-define-key 'normal 'bufler-list-mode-map
        "?"   #'hydra:bufler/body
        "g"   #'bufler
        "f"   #'bufler-list-group-frame
        "F"   #'bufler-list-group-make-frame
        "N"   #'bufler-list-buffer-name-workspace
        "d"   #'bufler-list-buffer-kill
        "s"   #'bufler-list-buffer-save
        (kbd "RET") #'bufler-list-buffer-switch
        (kbd "SPC") #'bufler-list-buffer-peek)




     #+end_src
   
** block-nav
   #+begin_src emacs-lisp
     (leaf block-nav
       :ensure t
       :config
       (dolist (modemap '(python-mode-map c++-mode-map))
         (evil-collection-define-key '(normal visual) modemap
           [kp-6] 'block-nav-next-block
           [kp-4] 'block-nav-previous-block
           [kp-2] 'block-nav-next-indentation-level
           [kp-4] 'block-nav-previous-indentation-level
           [kp-5] 'block-nav-move-indentation-level)))
   #+end_src

   #+RESULTS:
   
** evil start

   #+BEGIN_SRC emacs-lisp
 (evil-mode 1)
   #+END_SRC


   

* override
  
** dired
   #+begin_src emacs-lisp
     (general-define-key [remap dired] 'counsel-dired)
   #+end_src
** ivy
   #+begin_src emacs-lisp

     (general-define-key
      :keymaps '(counsel-mode-map)
      (vector 'remap 'execute-extended-command) 'execute-extended-command)

   #+end_src
