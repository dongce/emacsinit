# -*- coding: utf-8; -*-


* header
  #+BEGIN_SRC emacs-lisp
    ;; -*-mode: emacs-lisp; coding: utf-8; buffer-read-only: t;-*-
  #+END_SRC

* org 
** require                                          :deprecatedby:spacemacs:
   #+BEGIN_SRC emacs-lisp 
     ;;(require 'org)
     ;;(require 'calendar)
     ;;(require 'org-agenda)
     ;;(require 'evil-org)
     ;;(require 'org-capture)
     ;;(require 'ox-html)
   #+END_SRC
** setting
   #+BEGIN_SRC emacs-lisp

     ;; babel 에서 C-c' (org-edit-src-code 를 사용할 수 있다)

     ;;     #+STARTUP: overview
     ;;     #+STARTUP: content
     ;;     #+STARTUP: showall
     ;; 파일마다 위의 것을 적어서 조절할 수 있다. 전체는 다음과 설정이 같다. 
     ;;(setq org-startup-folded t)
     (global-set-key "\C-cl" 'org-store-link)
     (global-set-key "\C-ca" 'org-agenda)
     (global-set-key "\C-cb" 'org-switchb)

     (setq org-export-with-sub-superscripts nil )
     ;; capture 를 사용한다. 

     (setq org-log-done t)

     (add-hook 'org-mode-hook 'turn-on-font-lock) ; Org buffers only


          ;;; https://github.com/keelerm84/.emacs.d
                                             ; Make sure the code in begin_src blocks is colorized both when
                                             ; editing and when exporting.
     ;;(require 'ox-latex)
     ;; (setq org-latex-listings 'minted)
     ;; (add-to-list 'org-latex-packages-alist '("" "minted"))
     (setq org-src-fontify-natively t)


     (setq org-log-done 'time)
     (setq org-default-notes-file "/mnt/u/orgdir/notes.org")

     ;; (setq org-directory "~/Documents/Dropbox/OrgFiles/")
     ;; (setq org-agenda-files `(,org-directory))
     ;; (setq org-default-notes-file (concat org-directory "refile.org"))

                                             ; Targets include this file and any file contributing to the agenda - up to 9 levels deep
     (setq org-refile-targets (quote ((nil :maxlevel . 9)
                                      (org-agenda-files :maxlevel . 9))))

                                             ; Use full outline paths for refile targets - we file directly with IDO
     (setq org-refile-use-outline-path t)

                                             ; Targets complete directly with IDO
     (setq org-outline-path-complete-in-steps nil)

                                             ; Allow refile to create parent tasks with confirmation
     (setq org-refile-allow-creating-parent-nodes (quote confirm))

                                             ; Use IDO for both buffer and file completion and ido-everywhere to t
     ;; (setq org-completion-use-ido t)
     ;;(setq ido-everywhere t)
     (setq ido-max-directory-size 100000)
     ;; deprecated ;; (ido-mode (quote both))
     ;; (ido-mode nil)

     (set-face-foreground 'org-level-5 "aquamarine4")

     (use-package org-fs-tree 
       :demand
       ;; :commands org-fs-tree-dump
       )

     ;; save all the agenda files after each capture
     (add-hook 'org-capture-after-finalize-hook 'my/save-all-agenda-buffers)


     (use-package cal-korea-x
       :demand
       )

     ;; http://nadeausoftware.com/articles/2007/11/latency_friendly_customized_bullets_using_unicode_characters
     ;; (eval-after-load 'org-bullets '(setq org-bullets-bullet-list '("✺" "✹" "✸" "✷" "✶" "✭" "✦" "■" "▲" "●" )))
     ;; "✺" "✹" "✸" "✷" "✶" "✭" "✦" "■" "▲" "●"


     ;; (use-package org-bullets
     ;;   :config
     ;;   (setq org-bullets-bullet-list '( "✸" "✷" "✶" "★"  "☆" "⚝" "✦" "■" "▲" "●" ))
     ;; ;; "✺" "✹"
     ;;   )




     (use-package ox-reveal
       :demand
       )
     (use-package ox-html5presentation
       :demand
       )
     (use-package org-protocol
       :demand


       )
   #+END_SRC

** custom insert heading

   #+BEGIN_SRC emacs-lisp

     (fset 'org-insert-heading-origin 'org-insert-heading)
     (defun org-insert-heading (&optional force-heading invisible-ok)
       "Insert a new heading or item with same depth at point.
          If point is in a plain list and FORCE-HEADING is nil, create a new list item.
          If point is at the beginning of a headline, insert a sibling before the
          current headline.  If point is not at the beginning, split the line,
          create the new headline with the text in the current line after point
          \(but see also the variable `org-M-RET-may-split-line').

          When INVISIBLE-OK is set, stop at invisible headlines when going back.
          This is important for non-interactive uses of the command."
       (interactive "P")
       (if (or (= (buffer-size) 0)
               (and (not (save-excursion
                           (and (ignore-errors (org-back-to-heading invisible-ok))
                                (org-at-heading-p))))
                    (or force-heading (not (org-in-item-p)))))
           (progn
             (insert "\n* ")
             (run-hooks 'org-insert-heading-hook))
         (when (or force-heading (not (org-insert-item)))
           (let* ((empty-line-p nil)
                  (level nil)
                  (on-heading (org-at-heading-p))
                  (head (save-excursion
                          (condition-case nil
                              (progn
                                (org-back-to-heading invisible-ok)
                                (when (and (not on-heading)
                                           (featurep 'org-inlinetask)
                                           (integerp org-inlinetask-min-level)
                                           (>= (length (match-string 0))
                                               org-inlinetask-min-level))
                                  ;; Find a heading level before the inline task
                                  (while (and (setq level (org-up-heading-safe))
                                              (>= level org-inlinetask-min-level)))
                                  (if (org-at-heading-p)
                                      (org-back-to-heading invisible-ok)
                                    (error "This should not happen")))
                                (setq empty-line-p (org-previous-line-empty-p))
                                (match-string 0))
                            (error "*"))))
                  (blank-a (cdr (assq 'heading org-blank-before-new-entry)))
                  (blank (if (eq blank-a 'auto) empty-line-p blank-a))
                  pos hide-previous previous-pos)
             (cond
              ((and (org-at-heading-p) (bolp)
                    (or (bobp)
                        (save-excursion (backward-char 1) (not (outline-invisible-p)))))
               ;; insert before the current line
               (open-line (if blank 2 1)))
              ((and (bolp)
                    (not org-insert-heading-respect-content)
                    (or (bobp)
                        (save-excursion
                          (backward-char 1) (not (outline-invisible-p)))))
               ;; insert right here
               nil)
              (t
               ;; somewhere in the line
               (save-excursion
                 (setq previous-pos (point-at-bol))
                 (end-of-line)
                 (setq hide-previous (outline-invisible-p)))
               (and org-insert-heading-respect-content (org-show-subtree))
               (let ((split
                      (and (org-get-alist-option org-M-RET-may-split-line 'headline)
                           (save-excursion
                             (let ((p (point)))
                               (goto-char (point-at-bol))
                               (and (looking-at org-complex-heading-regexp)
                                    (match-beginning 4)
                                    (> p (match-beginning 4)))))))
                     tags pos)
                 (cond
                  (org-insert-heading-respect-content
                   (org-end-of-subtree nil t)
                   (when (featurep 'org-inlinetask)
                     (while (and (not (eobp))
                                 (looking-at "\\(\\*+\\)[ \t]+")
                                 (>= (length (match-string 1))
                                     org-inlinetask-min-level))
                       (org-end-of-subtree nil t)))
                   (or (bolp) (newline))
                   (or (org-previous-line-empty-p)
                       (and blank (newline)))
                   (open-line 1))
                  ((org-at-heading-p)
                   (when hide-previous
                     (show-children)
                     (org-show-entry))
                   (looking-at ".*?\\([ \t]+\\(:[[:alnum:]_@#%:]+:\\)\\)?[ \t]*$")
                   (setq tags (and (match-end 2) (match-string 2)))
                   (and (match-end 1)
                        (delete-region (match-beginning 1) (match-end 1)))
                   (setq pos (point-at-bol))
                   (or split (end-of-line 1))
                   (delete-horizontal-space)
                   (if (string-match "\\`\\*+\\'"
                                     (buffer-substring (point-at-bol) (point)))
                       (insert " "))
                   (newline (if blank 2 1))
                   (when tags
                     (save-excursion
                       (goto-char pos)
                       (end-of-line 1)
                       (insert " " tags)
                       (org-set-tags nil 'align))))
                  (t
                   (or split (end-of-line 1))
                   (newline (if blank 2 1)))))))
             (insert head) (just-one-space)
             (setq pos (point))
             (end-of-line 1)
             (unless (= (point) pos) (just-one-space) (backward-delete-char 1))
             (when (and org-insert-heading-respect-content hide-previous)
               (save-excursion
                 (goto-char previous-pos)
                 (hide-subtree)))
             (run-hooks 'org-insert-heading-hook)))))
   #+END_SRC
** util function 
    #+BEGIN_SRC emacs-lisp
      (defun oheader () 
        (interactive)
        (save-excursion
          (save-restriction
            (narrow-to-region (point-min) (point-min))
            (insert  "#+TITLE: Org Title
         ,#+AUTHOR: 김동일
         ,#+EMAIL: dongce@gmail.com
         ,#+DATE: 
         ,#+DESCRIPTION: 
         ,#+KEYWORDS:
         ,#+LANGUAGE: en
         ,#+OPTIONS: H:3 num:t toc:t \\n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
         ,#+OPTIONS: Tex:t LateX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
         ,#+INFOJS_OPT: view:nil ltoc:t mouse:unterline bottons:0 path:http://orgmode.org/org-info.js
         ,#+EXPORT_SELECT_TAGS: export
         ,#+EXPORT_EXCLUDE_TAGS: noexport
         ,#+LINK_UP:
         ,#+LINK_HOME:
         ,#+XSLT:")))) 

      (defun org-insert-star( &optional arg)

        (interactive "^p") 
        (or arg (setq arg 1))
        (move-beginning-of-line nil) 
        (while (looking-at "\\*+") (forward-char)) 

        (while (> arg 0)
          (insert "*")
          (setq arg (1- arg)))
        (if (not  (looking-at " ")) (insert " ")))


      (defun my/save-all-agenda-buffers ()
        "Function used to save all agenda buffers that are
         currently open, based on `org-agenda-files'."
        (interactive)
        (save-current-buffer
          (dolist (buffer (buffer-list t))
            (set-buffer buffer)
            (when (member (buffer-file-name)
                          (mapcar 'expand-file-name (org-agenda-files t)))
              (save-buffer)))))

      (defun  org-link-copy-image ()
        (interactive)
        (copy-image-file (org-element-property :path (org-element-context) )))

      (defun  org-link-copy-file ()
        (interactive)
        (copy-files (org-element-property :path (org-element-context) )))

      ;;; * 저장되어 있는 모든 링크를 넣는다.
      (defun org-insert-alllink ()
        (interactive)
        (while org-stored-links
          (insert "\n ")
          (org-insert-link t (car  (car org-stored-links)  ) (cadr  (car org-stored-links)  ))))

      (defun count-org-items (&optional level operator match scope skip)
        "Print a counting of outline items."
        (interactive)
        (let ((headline-level (or level 1)) ; 1-8
              (op (or operator '=))) ; '>= '<= '> '<
          (save-excursion
            (message "Counting of level%s%d outline items (match=%s, scope=%s, 
      skip=%s): %d"
                     op headline-level match scope skip
                     (eval (append (list '+)
                                   (org-map-entries
                                    `(lambda () (if (,op (org-outline-level) 
                                                     ,headline-level) 1 0))
                                    match scope skip)))))))



      (defun org-star-next-level ()
        (interactive)
        (org-insert-star (+ 1 (org-current-level))))

     #+END_SRC

** helm refile

   [[http://pages.sachachua.com/.emacs.d/Sacha.html#orgheadline13][Sacha Chua's Emacs configuration]]
    #+BEGIN_SRC emacs-lisp :tangle no


      ;;spacemacs-deprecated;;;;;; Refile settings
      ;;spacemacs-deprecated;;; Exclude DONE state tasks from refile targets
      ;;spacemacs-deprecated;;(defun bh/verify-refile-target ()
      ;;spacemacs-deprecated;;  "Exclude todo keywords with a done state from refile targets"
      ;;spacemacs-deprecated;;  (not (member (nth 2 (org-heading-components)) org-done-keywords)))
      ;;spacemacs-deprecated;;
      ;;spacemacs-deprecated;;(setq org-refile-target-verify-function 'bh/verify-refile-target)

       ;;; [[http://pages.sachachua.com/.emacs.d/Sacha.html#orgheadline13][Sacha Chua's Emacs configuration]]

       ;;; org helm refile
       (defvar my/helm-org-refile-locations nil)
       (defvar my/org-refile-last-location nil)

       (defun my/helm-org-clock-in-and-track-from-refile (candidate)
         (let ((location (org-refile--get-location candidate my/helm-org-refile-locations)))
           (save-window-excursion
             (org-refile 4 nil location)
             (my/org-clock-in-and-track)
             t)))

       (defun my/org-get-todays-items-as-refile-candidates ()
         "Return items scheduled for today, ready for choosing during refiling."
         (delq
          nil
          (mapcar
           (lambda (s)
             (if (get-text-property 0 'org-marker s)
                 (list
                  s
                  (buffer-file-name (marker-buffer (get-text-property 0 'org-marker s)))
                  nil
                  (marker-position (get-text-property 0 'org-marker s)))))
           (save-window-excursion (my/org-get-entries-fn (calendar-current-date) (calendar-current-date))))))

       ;; Based on http://emacs.stackexchange.com/questions/4063/how-to-get-the-raw-data-for-an-org-mode-agenda-without-an-agenda-view
       (defun my/org-get-entries-fn (begin end)
         "Return org schedule items between BEGIN and END.
            USAGE:  (org-get-entries-fn '(6 1 2015) '(6 30 2015))"
         (unless
             (and
              (calendar-date-is-valid-p begin)
              (calendar-date-is-valid-p end))
           (let ((debug-on-quit nil))
             (signal 'quit `("One or both of your gregorian dates are invalid."))))
         (let* (
                result
                (org-agenda-prefix-format "  • ")
                (org-agenda-entry-types '(:scheduled))
                (date-after
                 (lambda (date num)
                   "Return the date after NUM days from DATE."
                   (calendar-gregorian-from-absolute
                    (+ (calendar-absolute-from-gregorian date) num))))
                (enumerate-days
                 (lambda (begin end)
                   "Enumerate date objects between BEGIN and END."
                   (when (> (calendar-absolute-from-gregorian begin)
                            (calendar-absolute-from-gregorian end))
                     (error "Invalid period : %S - %S" begin end))
                   (let ((d begin) ret (cont t))
                     (while cont
                       (push (copy-sequence d) ret)
                       (setq cont (not (equal d end)))
                       (setq d (funcall date-after d 1)))
                     (nreverse ret)))) )
           (org-agenda-reset-markers)
           (setq org-agenda-buffer
                 (when (buffer-live-p org-agenda-buffer)
                   org-agenda-buffer))
           (org-compile-prefix-format nil)
           (setq result
                 (loop for date in (funcall enumerate-days begin end) append
                       (loop for file in (org-agenda-files nil 'ifmode)
                             append
                             (progn
                               (org-check-agenda-file file)
                               (apply 'org-agenda-get-day-entries file date org-agenda-entry-types)))))
           (unless (buffer-live-p (get-buffer org-agenda-buffer-name))
             (get-buffer-create org-agenda-buffer-name))
           (with-current-buffer (get-buffer org-agenda-buffer-name)
             (org-agenda-mode)
             (setq buffer-read-only t)
             (let ((inhibit-read-only t))
               (erase-buffer))
             (mapcar
              (lambda (x)
                (let ((inhibit-read-only t))
                  (insert (format "%s" x) "\n")))
              result))
           ;;    (display-buffer org-agenda-buffer-name t)
           result))

       (defun my/helm-org-create-task (candidate)
         (let ((entry (org-capture-select-template "T")))
           (org-capture-set-plist entry)
           (org-capture-get-template)
           (org-capture-set-target-location)
           (condition-case error
               (progn
                 (org-capture-put
                  :template
                  (org-capture-fill-template
                   (sacha/org-capture-prefill-template (org-capture-get :template)
                                                       candidate)))
                 (org-capture-place-template
                  (equal (car (org-capture-get :target)) 'function)))
             ((error quit)
              (if (get-buffer "*Capture*") (kill-buffer "*Capture*"))
              (error "Capture abort: %s" error)))) t)

       (defun my/helm-org-refile-read-location (tbl)
         (setq my/helm-org-refile-locations tbl)
         (helm
          (list
           ;; (helm-build-sync-source "Today's tasks"
           ;;   :candidates (mapcar (lambda (a) (cons (car a) a))
           ;;                       (my/org-get-todays-items-as-refile-candidates))
           ;;   :action '(("Select" . identity)
           ;;             ("Clock in and track" . my/helm-org-clock-in-and-track-from-refile)
           ;;             ("Draw index card" . my/helm-org-prepare-index-card-for-subtree))
           ;;   :history 'org-refile-history)
           (helm-build-sync-source "Refile targets"
             :candidates (mapcar (lambda (a) (cons (car a) a)) tbl)
             :action '(("Select" . identity)
                       ("Clock in and track" . my/helm-org-clock-in-and-track-from-refile)
                       ("Draw index card" . my/helm-org-prepare-index-card-for-subtree))
             :history 'org-refile-history)
           (helm-build-dummy-source "Create task"
             :action (helm-make-actions
                      "Create task"
                      'my/helm-org-create-task)))))

       (defun my/org-refile-get-location (&optional prompt default-buffer new-nodes no-exclude)
         "Prompt the user for a refile location, using PROMPT.
              PROMPT should not be suffixed with a colon and a space, because
              this function appends the default value from
              `org-refile-history' automatically, if that is not empty.
              When NO-EXCLUDE is set, do not exclude headlines in the current subtree,
              this is used for the GOTO interface."
         (let ((org-refile-targets org-refile-targets)
               (org-refile-use-outline-path org-refile-use-outline-path)
               excluded-entries)
           (when (and (derived-mode-p 'org-mode)
                      (not org-refile-use-cache)
                      (not no-exclude))
             (org-map-tree
              (lambda()
                (setq excluded-entries
                      (append excluded-entries (list (org-get-heading t t)))))))
           (setq org-refile-target-table
                 (org-refile-get-targets default-buffer
                                         ;; excluded-entries
                                         )))
         (unless org-refile-target-table
           (user-error "No refile targets"))
         (let* ((cbuf (current-buffer))
                (partial-completion-mode nil)
                (cfn (buffer-file-name (buffer-base-buffer cbuf)))
                (cfunc (if (and org-refile-use-outline-path
                                org-outline-path-complete-in-steps)
                           'org-olpath-completing-read
                         'org-icompleting-read))
                (extra (if org-refile-use-outline-path "/" ""))
                (cbnex (concat (buffer-name) extra))
                (filename (and cfn (expand-file-name cfn)))
                (tbl (mapcar
                      (lambda (x)
                        (if (and (not (member org-refile-use-outline-path
                                              '(file full-file-path)))
                                 (not (equal filename (nth 1 x))))
                            (cons (concat (car x) extra " ("
                                          (file-name-nondirectory (nth 1 x)) ")")
                                  (cdr x))
                          (cons (concat (car x) extra) (cdr x))))
                      org-refile-target-table))
                (completion-ignore-case t)
                cdef
                (prompt (concat prompt
                                (or (and (car org-refile-history)
                                         (concat " (default " (car org-refile-history) ")"))
                                    (and (assoc cbnex tbl) (setq cdef cbnex)
                                         (concat " (default " cbnex ")"))) ": "))
                pa answ parent-target child parent old-hist)
           (setq old-hist org-refile-history)
           ;; Use Helm's sources instead
           (setq answ (my/helm-org-refile-read-location tbl))
           (cond
            ((and (stringp answ)
                  (setq pa (org-refile--get-location answ tbl)))
             (org-refile-check-position pa)
             (when (or (not org-refile-history)
                       (not (eq old-hist org-refile-history))
                       (not (equal (car pa) (car org-refile-history))))
               (setq org-refile-history
                     (cons (car pa) (if (assoc (car org-refile-history) tbl)
                                        org-refile-history
                                      (cdr org-refile-history))))
               (if (equal (car org-refile-history) (nth 1 org-refile-history))
                   (pop org-refile-history)))
             (setq my/org-refile-last-location pa)
             pa)
            ((and (stringp answ) (string-match "\\`\\(.*\\)/\\([^/]+\\)\\'" answ))
             (setq parent (match-string 1 answ)
                   child (match-string 2 answ))
             (setq parent-target (org-refile--get-location parent tbl))
             (when (and parent-target
                        (or (eq new-nodes t)
                            (and (eq new-nodes 'confirm)
                                 (y-or-n-p (format "Create new node \"%s\"? "
                                                   child)))))
               (org-refile-new-child parent-target child)))
            ((listp answ) answ) ;; Sacha: Helm returned a refile location
            ((not (equal answ t))
             (user-error "Invalid target location")))))

       (add-hook 'org-after-refile-insert-hook
                 (lambda () (save-buffer)
                   ;; (auto-save-mode)
                   ))


       (fset 'org-refile-get-location 'my/org-refile-get-location)



    #+END_SRC

#+RESULTS:
: my/org-refile-get-location

** org babel
*** calc
    #+BEGIN_SRC emacs-lisp :tangle no

      ;; [[file:t:/usr/local/editor/emacsW32/site-lisp/elpa/org-20151123/ob-calc.el::(defun%20org-babel-execute:calc%20(body%20params)][src from]]

      (defun org-babel-execute:calc (body params)
        "Execute a block of calc code with Babel."
        (unless (get-buffer "*Calculator*")
          (save-window-excursion (calc) (calc-quit)))
        (let* ((vars (mapcar #'cdr (org-babel-get-header params :var)))
               (org--var-syms (mapcar #'car vars))
               (var-names (mapcar #'symbol-name org--var-syms)))
          (mapc
           (lambda (pair)
             (calc-push-list (list (cdr pair)))
             (calc-store-into (car pair)))
           vars)
          (mapc
           (lambda (line)
             (when (> (length line) 0)
               (cond
                ;; simple variable name
                ((member line var-names) (calc-recall (intern line)))
                ;; stack operation
                ((string= "'" (substring line 0 1))
                 (funcall (lookup-key calc-mode-map (substring line 1)) ))
                ((string= "`" (substring line 0 1))
                 (eval (read  (substring line 1)) ))
                ;; complex expression
                (t
                 (calc-push-list
                  (list (let ((res (calc-eval line)))
                          (cond
                           ((numberp res) res)
                           ((math-read-number res) (math-read-number res))
                           ((listp res) (error "Calc error \"%s\" on input \"%s\""
                                               (cadr res) line))
                           (t (replace-regexp-in-string
                               "'" ""
                               (calc-eval
                                (math-evaluate-expr
                                 ;; resolve user variables, calc built in
                                 ;; variables are handled automatically
                                 ;; upstream by calc
                                 (mapcar #'org-babel-calc-maybe-resolve-var
                                         ;; parse line into calc objects
                                         (car (math-read-exprs line)))))))))
                        ))))))
           (mapcar #'org-babel-trim
                   (split-string (org-babel-expand-body:calc body params) "[\n\r]"))))
        (save-excursion
          (with-current-buffer (get-buffer "*Calculator*")
            (calc-eval (calc-top 1)))))
    #+END_SRC

** elfeed
   #+BEGIN_SRC emacs-lisp :tangle no

     ;; (use-package elfeed-goodies
     ;;   :commands elfeed
     ;;   :init
     ;;   (with-eval-after-load 'elfeed
     ;;     (elfeed-goodies/setup))) 


     (use-package elfeed-org
       :commands elfeed
       :init
       (elfeed-org)
       (defun private/org-elfeed-entry-store-link ()
         (when elfeed-show-entry
           (let* ((link (elfeed-entry-link elfeed-show-entry))
                  (title (elfeed-entry-title elfeed-show-entry)))
             (org-store-link-props
              :link link
              :description title)
             )))
       (add-hook 'org-store-link-functions
                 'private/org-elfeed-entry-store-link)
       (defun elfeedurl ()
         (interactive)
         (let ((url (get-text-property (point) 'shr-url)))
           (kill-new url)
           (message url ))))
   #+END_SRC


** copy-link

*** reference
    #+begin_src emacs-lisp :tangle no
 (defun my-yank-org-link (text)
   (if (derived-mode-p 'org-mode)
       (insert text)
     (string-match org-bracket-link-regexp text)
     (insert (substring text (match-beginning 1) (match-end 1)))))

 (defun my-org-retrieve-url-from-point ()
   (interactive)
   (let* ((link-info (assoc :link (org-context)))
          (text (when link-info
                  ;; org-context seems to return nil if the current element
                  ;; starts at buffer-start or ends at buffer-end
                  (buffer-substring-no-properties (or (cadr link-info) (point-min))
                                                  (or (caddr link-info) (point-max))))))
     (if (not text)
         (error "Not in org link")
       (add-text-properties 0 (length text) '(yank-handler (my-yank-org-link)) text)
       (kill-new text))))
    #+end_src
*** modified
    #+begin_src emacs-lisp 

      (defun my-org-retrieve-path-from-point ()
        (interactive)
        (let* ((text (buffer-substring-no-properties  (point-at-bol) (point-at-eol))))
          (string-match org-bracket-link-regexp text)
          (setf text (s-replace-all
                     '(("/" . "\\") ("file:" . ""))
                     (file-truename (substring text (match-beginning 3) (match-end 3)))))
          (message text)
          (kill-new text)))
    #+end_src

    #+RESULTS:
    : my-org-retrieve-path-from-point

* narrow
  
** zones                                                        :deprecated:
   #+BEGIN_SRC emacs-lisp :tangle no
     (use-package zones
       :config

       (defun zone-activate (orig-fun &rest args)
         (setf zz-add-zone-anyway-p t)
         (apply orig-fun args)
         (setf zz-add-zone-anyway-p nil))

       ;;(advice-add 'org-narrow-to-subtree :before #'(lambda (&rest args) (setf zz-add-zone-anyway-p 1)))
       ;;(advice-add 'org-narrow-to-subtree :after  #'(lambda (&rest args) (setf zz-add-zone-anyway-p nil)))
       (advice-add 'org-narrow-to-subtree :around #'zone-activate))
   #+END_SRC

   #+RESULTS:
   : t

* latex                                                         :deprecated:
#+BEGIN_SRC emacs-lisp :tangle no
  ;;;_ attach-file 

  ;;; http://jkitchin.github.io/blog/2013/09/30/Attaching-code-blocks-to-a-pdf-file-during-export/
  ;; * Attaching code blocks to a pdf file during export
  ;;   :PROPERTIES:
  ;;   :categories: org-mode
  ;;   :date:     2013/09/30 21:58:52
  ;;   :updated:  2013/09/30 21:58:52
  ;;   :END:
  ;; This post is a further exploration of using the export filters to modify construction of content exported from org-mode. In this post we look at some code that will save all of the code-blocks in an org-buffer to systematically named files, and then attach the files to an exported pdf file. We will use the [[http://www.ctan.org/tex-archive/macros/latex/contrib/attachfile][attachfile]] LaTeX package to attach the scripts. We will build off of [[http://jkitchin.github.io/blog/2013/09/28/Customizing-export-of-code-blocks-in-HTML/][this post]] for the filters.

  ;; First, let us put in a gratuitous code block. In the rendered pdf, this script will be embedded in the pdf. I am not quite ready to build a filter that supports multiple backends, so in this post we just modify the latex export.

  ;; #+BEGIN_SRC python
  ;; name = 'John'
  ;; print 'Hello {0}'.format(name)
  ;; #+END_SRC

  ;; #+RESULTS:
  ;; : Hello John

  ;; We are only going to attach the python code blocks in this example, and ignore all the other blocks. We will basically use the same kind strategy we have used before. We will initially parse the buffer to get a list of all the code blocks. Then we create a filter for the src-blocks that keeps a counter of src-blocks, and depending on the type of the nth src-block, we will save the file, and modify the text for that block. Here is our code for the list of code blocks.

  ;; #+BEGIN_SRC emacs-lisp
  ;; (setq src-block-list 
  ;;       (org-element-map (org-element-parse-buffer) 'src-block 
  ;;         (lambda (src-block) src-block)))
  ;; #+END_SRC

  ;; #+RESULTS:

  ;; Now we create the filter. 

  ;; #+BEGIN_SRC emacs-lisp
  ;; (defun ox-mrkup-filter-src-block (text back-end info)
  ;;   (catch 'return text)
  ;;   (let ((src-block (nth counter src-block-list)))
  ;;     (if (string= (org-element-property :language src-block) "python")
  ;;         (progn 
  ;;           (setq scriptname (format "py-%d.py" counter))
  ;;           ;; save code block
  ;;           (with-temp-buffer
  ;;             (insert (org-element-property :value src-block))
  ;;             (write-region (point-min) (point-max) scriptname ))
         
  ;;           (setq output (format "%s\n\\attachfile{%s} Double click me to open" text scriptname)))
  ;;       ;; else
  ;;       (setq output text)))
  ;;   ;; increment counter no matter what so next block is processed
  ;;   (setq counter (+ counter 1))
  ;;   ;; return output
  ;;   output)
  ;; #+END_SRC

  ;; #+RESULTS:

  ;; Finally, we export the document to LaTeX, and run pdflatex on it to generate the pdf.

  ;; #+BEGIN_SRC emacs-lisp
  ;; (let ((counter 0)
  ;;       ;; these packages are loaded in the latex file
  ;;       (org-latex-default-packages-alist 
  ;;        '(("utf8" "inputenc" nil)
  ;;   ("T1" "fontenc" nil)
  ;;   ("" "fixltx2e" nil)
  ;;          ("" "lmodern" nil)
  ;;          ("" "minted" nil) ;; for code syntax highlighting
  ;;          ;; customize how pdf links look
  ;;          ("linktocpage,
  ;;            pdfstartview=FitH,
  ;;            colorlinks,
  ;;            linkcolor=blue,
  ;;            anchorcolor=blue,
  ;;            citecolor=blue,
  ;;            filecolor=blue,
  ;;            menucolor=blue,
  ;;            urlcolor=blue" "hyperref" nil)))
  ;;       (org-export-filter-src-block-functions '(ox-mrkup-filter-src-block))
  ;;       (async nil)
  ;;       (subtreep nil)
  ;;       (visible-only nil)
  ;;       (body-only nil)
  ;;       (ext-plist '()))
  ;;   (org-latex-export-to-pdf async subtreep visible-only body-only ext-plist))
  ;; #+END_SRC

  ;; #+RESULTS:

  ;; Check out the result: file:attaching-code-blocks-to-a-pdf.pdf. This text won't show up in the pdf. I had some difficulty including the link via org-links. The export engine wanted to embed it as a pdf in itself! That does not seem to work. 



  ;;;_ djcb-org-article
  ;;;_ MATH 

  ;;; http://en.wikibooks.org/wiki/LaTeX/Mathematics 


  ;; -------------------------------------
  ;; -- PDF
  ;; -------------------------------------
  ;; 'djcb-org-article' for export org documents to the LaTex 'article', using
  ;; XeTeX and some fancy fonts; requires XeTeX (see org-latex-to-pdf-process)
  ;; -----------------------------------------------------------------------------
  ;; http://emacs-fu.blogspot.com/2011/04/nice-looking-pdfs-with-org-mode-and.html
  ;; http://comments.gmane.org/gmane.emacs.orgmode/40221
  ;; -----------------------------------------------------------------------------
  ;; Install Packages:
  ;; + texlive-all  
  ;; + texlive-xetex
  ;; + ttf-sil-gentium
  ;; + ttf-sil-gentium-basic
  ;; + ttf-sil-charis
  ;; + ttf-dejavu
  ;; -----------------------------------------------------------------------------
  ;; Make sure to include the latex class in you header:
  ;; #+LaTeX_CLASS: djcb-org-article
  ;; -----------------------------------------------------------------------------
  (use-package org-latex
    :config
    (add-to-list
     'org-latex-classes
     '("minted-org-article"
       "\\documentclass[11pt,a4paper]{article}
               \\usepackage{minted}
               \\usemintedstyle{emacs}
               \\newminted{common-lisp}{fontsize=10}
                       \\usepackage[T1]{fontenc}
                       \\usepackage{hyperref}
                       \\usepackage{fontspec}
                       \\usepackage{graphicx}
                       \\defaultfontfeatures{Mapping=tex-text}
                       \\setromanfont{Gentium}
                       \\setromanfont [BoldFont={Gentium Basic Bold},
                                       ItalicFont={Gentium Basic Italic}]{Gentium Basic}
                       \\setmonofont[Scale=0.8]{DejaVu Sans Mono}
                       \\usepackage{geometry}
                       \\geometry{a4paper, textwidth=6.5in, textheight=10in,
                                   marginparsep=7pt, marginparwidth=.6in}
                       \\pagestyle{empty}
                       \\title{}
                             [NO-DEFAULT-PACKAGES]
                             [NO-PACKAGES]"
       ("\\section{%s}" . "\\section*{%s}")
       ("\\subsection{%s}" . "\\subsection*{%s}")
       ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
       ("\\paragraph{%s}" . "\\paragraph*{%s}")
       ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))

                       ;; \\setsansfont{Charis SIL}

  ;;; http://orgmode.org/worg/org-contrib/babel/examples/article-class.html

  ;; -----------------------------------------------------------------------------
  ;; Added Syntax Highlighting Support
  ;; http://orgmode.org/worg/org-tutorials/org-latex-export.html
  ;; #+LaTeX_HEADER: \usepackage{minted}
  ;; #+LaTeX_HEADER: \usemintedstyle{emacs}
  ;; #+LaTeX_HEADER: \newminted{common-lisp}{fontsize=\footnotesize}
  ;; -----------------------------------------------------------------------------
  ;; Install Packages:
  ;; + python-pygments
  ;; -----------------------------------------------------------------------------
  ;; (setq org-latex-listings 'minted)
  ;; (setq org-latex-custom-lang-environments
  ;;       '(
  ;;     (emacs-lisp "common-lispcode")
  ;;        ))
  ;; (setq org-latex-minted-options
  ;;       '(("frame" "lines")
  ;;         ("fontsize" "\\scriptsize")
  ;;     ("linenos" "")
  ;; ))
  ;; (setq org-latex-to-pdf-process
  ;;       '("xelatex --shell-escape -interaction nonstopmode %f"
  ;;     "xelatex --shell-escape -interaction nonstopmode %f")) ;; for multiple passes
  ;; ;; Not sure if this is actually setting the export class correctly.
  ;; (setq org-export-latex-class "djcb-org-article")
  ;;
  ;;
#+END_SRC

* org-evil 


 #+BEGIN_SRC emacs-lisp
   (use-package org-evil)
 #+END_SRC
 
  different evil-org 
  [[https://github.com/GuiltyDolphin/org-evil][GitHub - GuiltyDolphin/org-evil: Evil extensions for Org-mode.]]

** org-evil

 Evil extensions for Org-mode.

** Getting Started

*** Moving Around

 =org-evil= aims to make motion in Org intuitive for Evil users,
 so you can expect motions such as ~$~ to be similar to ~evil-end-of-line~,
 ~^~ to ~evil-first-non-blank~, and so on and so forth.

**** General Motions

 The following are the default motion bindings for =org-evil-motion=, use
 ~M-x describe-function BINDING~ for more information on each motion.

 - ~gH~ :: ~org-evil-motion-up-heading-top~
 - ~gh~ :: ~org-evil-motion-up-heading~
 - ~{~  :: ~org-evil-motion-backward-heading~
 - ~}~  :: ~org-evil-motion-forward-heading~

**** Block Motions

 The following bindings apply when inside an Org block:

 - ~(~ :: ~org-evil-block-beginning-of-block~
 - ~)~ :: ~org-evil-block-end-of-block~

**** Table Motions

 The following bindings apply when inside an Org table:

 - ~gR~ :: ~org-evil-table-goto-line-from-bottom~
 - ~gc~ :: ~org-evil-table-goto-column~
 - ~gr~ :: ~org-evil-table-goto-line~
 - ~|~  :: ~org-evil-table-goto-column~

*** Operators

**** Heading Operators

 The following bindings apply when at a heading:

 - ~<~ :: ~org-evil-promote~
 - ~>~ :: ~org-evil-demote~

**** Table Operators

 The following bindings apply when inside an Org table:

 - ~<~ :: ~org-evil-table-move-column-left~
 - ~>~ :: ~org-evil-table-move-column-right~
 - ~D~ :: ~org-evil-table-kill-row-to-end~
 - ~O~ :: ~org-evil-table-insert-row-above~
 - ~o~ :: ~org-evil-table-insert-row-below~

*** Text Objects

**** Block Text Objects

 The following text objects are enabled within an Org block:

 - ~ab~ :: ~org-evil-block-a-block~
 - ~ib~ :: ~org-evil-block-inner-block~



* helm-org
** deprecated 
 #+BEGIN_SRC emacs-lisp :tangle no
   ;;(defcustom helm-org-headings-max-depth 8)

   (defun helm-org-headings (&optional n)
     (interactive "p")
     (if (> n  1)
         (progn
           (make-local-variable 'helm-org-headings-max-depth)
           (setf helm-org-headings-max-depth n)))
     (helm-org-in-buffer-headings))

 #+END_SRC

 #+RESULTS:
 : helm-org-headings

* org-bullets

#+BEGIN_SRC emacs :tangle no
 '(org-bullets-bullet-list (quote ("🔯" "☀" "✱" "❖" "✦" "✢" "★" "≣")))

#+END_SRC

* bigblow

** org-mu4e


 #+BEGIN_SRC emacs-lisp

   (use-package org-mu4e
     :config
     (setq org-mu4e-link-query-in-headers-mode nil)
     (setq org-mu4e-convert-to-html t)
     (setq mu4e-debug nil))


   ;;; POLY-MODE is works but not good
   ;;deprecated;;(with-package
   ;;deprecated;;  (poly-mode)
   ;;deprecated;;
   ;;deprecated;;  (defun pm--bigblow-tail-matcher (ahead)
   ;;deprecated;;    (when (< ahead 0)
   ;;deprecated;;      (error "backwards tail match not implemented"))
   ;;deprecated;;    (let ((end (buffer-end 1)))
   ;;deprecated;;      (cons (max 1 (- end 1)) end)))
   ;;deprecated;;
   ;;deprecated;;  (defcustom pm-host/bigblow
   ;;deprecated;;    (pm-bchunkmode "bigblow-message" :mode 'message-mode)
   ;;deprecated;;    "message host chunkmode"
   ;;deprecated;;    :group 'hostmodes
   ;;deprecated;;    :type 'object
   ;;deprecated;;    )
   ;;deprecated;;
   ;;deprecated;;  (defcustom pm-inner/bigblow
   ;;deprecated;;    (pm-hbtchunkmode "bigblow-org"
   ;;deprecated;;                     :mode 'poly-org-mode
   ;;deprecated;;                     :head-reg mail-header-separator
   ;;deprecated;;                     :tail-reg 'pm--bigblow-tail-matcher)
   ;;deprecated;;    "bigblow typical chunk"
   ;;deprecated;;    :group 'innermodes
   ;;deprecated;;    :type 'object
   ;;deprecated;;    )
   ;;deprecated;;
   ;;deprecated;;  (defcustom pm-poly/bigblow
   ;;deprecated;;    (pm-polymode-one "bigblow"
   ;;deprecated;;                     :hostmode 'pm-host/bigblow
   ;;deprecated;;                     :innermode 'pm-inner/bigblow)
   ;;deprecated;;    "Noweb typical polymode."
   ;;deprecated;;    :group 'polymodes
   ;;deprecated;;    :type 'object)
   ;;deprecated;;
   ;;deprecated;;  (define-polymode poly-bigblow-mode pm-poly/bigblow)
   ;;deprecated;;  )


   (defun hinfojs ()
     (interactive) 
     (save-excursion
       (save-restriction
         (narrow-to-region (point) (point))
         (insert "#+INFOJS_OPT: view:showall toc:nil ltoc:nil\n")
         )))


   (defun bigblow ()
     "DOCSTRING"
     (interactive )
     (let ((content
            (if (region-active-p)
                (concat
                 (format  "#+begin_src %s\n"
                          (cdr  (assoc  (intern  (s-replace "-mode" ""  (symbol-name  major-mode)))
                                        (mapcar (lambda (x) (cons  (cdr x) (car x))) org-src-lang-modes))))
                 (s-trim (buffer-substring-no-properties (region-beginning) (region-end)))))))
       (mu4e-compose-new)
       (save-excursion
         (save-restriction
           (goto-char (point-min))
           (search-forward mail-header-separator)
           (next-line)
           ;;(org~mu4e-mime-switch-headers-or-body)
           (narrow-to-region (point) (point))
           ;; (insert-line "#+TITLE: 무제")
           (insert-line 
           "#+HTML_HEAD_EXTRA: <script type=\"text/javascript\"> var HS_SHOW_ALL_OPEN_DONE_TREES = false; </script> ")
           (insert-line "#+OPTIONS: toc:nil num:nil p:t ^:{} <:t \\n:t H:6")
           (insert-line "#+STARTUP: showeverything")
           (insert-line "")
           (insert-line "")
           (if content
               (progn

                 (insert-line content)
                 (insert-line "#+end_src")))

           ))(end-of-buffer)))

   (defun orgmail ()
     "DOCSTRING"
     (interactive )
     (save-excursion
       (save-restriction
         (if (region-active-p)
             (narrow-to-region (region-beginning) (region-end))
           (progn
             (org-back-to-heading)
             (narrow-to-region (point ) (org-end-of-subtree ))))
         (goto-char (point-min))
         (let* ((content (buffer-substring-no-properties (point-min) (point-max)))
                (proptitle (car (plist-get (org-export-get-environment ) ':title)))
                (title
                 (if (stringp proptitle)
                     (substring-no-properties proptitle)
                   (condition-case nil (nth 4  (org-heading-components)) (error "무제")) )))
       (mu4e-compose-new)
       (save-excursion
         (save-restriction
           ;; (goto-char (point-min))
           ;; (end-of-line 2)
           (message-goto-to )
           (insert "di7979.kim@hanwhasystems.com")
           (message-goto-subject )
           (if title (insert title) (insert "무제"))
           ;; (search-forward mail-header-separator)
           ;; (next-line)

           (message-goto-body)
           ;;byadvice;;(org~mu4e-mime-switch-headers-or-body)           
           (narrow-to-region (point) (point))
           ;; (if (and  title subregion)
           ;;     (insert-line (format  "#+TITLE: %s" title))
           ;;   (if (not title ) ( insert-line "#+TITLE: 무제"  ))
           ;;   )
           (insert-line "#+HTML_HEAD_EXTRA: <script type=\"text/javascript\"> var HS_SHOW_ALL_OPEN_DONE_TREES = false; </script> ")
           (insert-line "#+OPTIONS: toc:nil num:nil p:t ^:{} <:t \\n:t H:6")
           (insert-line "#+STARTUP: showeverything")
           (insert-line "")
           (insert-line "")
           (insert-line content)

           )) (end-of-buffer)))))

 (defadvice mu4e~compose-handler (after org-mu4e-compose-handler activate)
  (org~mu4e-mime-switch-headers-or-body))    
#+END_SRC

** html head

  #+BEGIN_SRC emacs-lisp

   (setq
    org-html-head
    (mapconcat
     (lambda (x)
       (if (symbolp x)
           (get-string-from-file (symbol-name x ))
         x
         ))
     `(
       "<script type=\"text/javascript\" src=\"http://10.239.12.200/orghtmltheme/styles/bigblow/js/jquery-1.11.0.min.js\"></script>"
       ;;net not supported;;"<script defer type=\"text/javascript\" src=\"http://code.jquery.com/jquery-latest.min.js\"></script>"
       "<script type=\"text/javascript\">"
       ;; /usr/local/emacs/site-lisp/orghtmltheme/styles/bigblow/js/hideshow.min.js
       ,(intern (fullpath "../../thirdparty/orghtmltheme/styles/bigblow/js/hideshow.js"))
       "$(document).ready(function() {hsInit();});"
       "</script>"

       "<style type=\"text/css\">"
       ;; /usr/local/emacs/site-lisp/orghtmltheme/styles/bigblow/css/bigblow.min.css
       ;; /usr/local/emacs/site-lisp/orghtmltheme/styles/bigblow/css/hideshow.min.css
       ,(intern (fullpath "../../thirdparty/orghtmltheme/styles/bigblow/css/bigblow.css"))
       ,(intern (fullpath "../../thirdparty/orghtmltheme/styles/bigblow/css/hideshow.css"))

       ;http://dinoegg.co.kr/_font-family/
       ;; "body, h1, h2, h3, h4, h5 , h6{ font-family: \'Consolas\', \'Malgun Gothic\';}"
       "body, h1, h2, h3, h4, h5 , h6{ font-family: \'Malgun Gothic\';}"
       "h1 { font-size:1.2em;}"
       "h2 { font-size:1.1em;}"
       "h3, h4, h5 { font-size:1.0em;}"
       "p { font-size:0.9em;max-width: 50em}"
       ;; "body {max-width: 60em}"
       "pre {"
       "  border: 1px solid #ccc;"
       "  box-shadow: 3px 3px 3px #eee;"
       "  padding: 8pt;"
       "  font-family: monospace;"
       "  overflow: auto;"
       "  margin: 1.2em;"
       "}"
       "pre.src {"
       "  position: relative;"
       "  overflow: visible;"
       "  padding-top: 1.2em;"
       "  font-family:'Consolas', 'Malgun Gothic';"
       "  font-size:0.9em;"
       "}"
       "pre.src:before {"
       "  display: none;"
       "  position: absolute;"
       "  background-color: white;"
       "  top: -10px;"
       "  right: 10px;"
       "  padding: 3px;"
       "  border: 1px solid black;"
       "}"
       "pre.src:hover:before { display: inline;}"
       "pre.src-sh:before    { content: 'sh'; }"
       "pre.src-bash:before  { content: 'sh'; }"
       "pre.src-emacs-lisp:before { content: 'Emacs Lisp'; }"
       "pre.src-elisp:before { content: 'Emacs Lisp'; }"
       "pre.src-R:before     { content: 'R'; }"
       "pre.src-perl:before  { content: 'Perl'; }"
       "pre.src-java:before  { content: 'Java'; }"
       "pre.src-sql:before   { content: 'SQL'; }"
       "pre.src-cpp:before   { content: 'C/C++'; }"

       ;; pygmentize -S default -f html
       ;; ".hll { background-color: #ffffcc }"
       ;; ".c { color: #408080; font-style: italic } "
       ;; ".err { border: 1px solid #FF0000 } "
       ;; ".k { color: #008000; font-weight: bold } "
       ;; ".o { color: #666666 } "
       ;; ".cm { color: #408080; font-style: italic } "
       ;; ".cp { color: #BC7A00 } "
       ;; ".c1 { color: #408080; font-style: italic } "
       ;; ".cs { color: #408080; font-style: italic } "
       ;; ".gd { color: #A00000 } "
       ;; ".ge { font-style: italic } "
       ;; ".gr { color: #FF0000 } "
       ;; ".gh { color: #000080; font-weight: bold } "
       ;; ".gi { color: #00A000 } "
       ;; ".go { color: #888888 } "
       ;; ".gp { color: #000080; font-weight: bold } "
       ;; ".gs { font-weight: bold } "
       ;; ".gu { color: #800080; font-weight: bold } "
       ;; ".gt { color: #0044DD } "
       ;; ".kc { color: #008000; font-weight: bold } "
       ;; ".kd { color: #008000; font-weight: bold } "
       ;; ".kn { color: #008000; font-weight: bold } "
       ;; ".kp { color: #008000 } "
       ;; ".kr { color: #008000; font-weight: bold } "
       ;; ".kt { color: #B00040 } "
       ;; ".m { color: #666666 } "
       ;; ".s { color: #BA2121 } "
       ;; ".na { color: #7D9029 } "
       ;; ".nb { color: #008000 } "
       ;; ".nc { color: #0000FF; font-weight: bold } "
       ;; ".no { color: #880000 } "
       ;; ".nd { color: #AA22FF } "
       ;; ".ni { color: #999999; font-weight: bold } "
       ;; ".ne { color: #D2413A; font-weight: bold } "
       ;; ".nf { color: #0000FF } "
       ;; ".nl { color: #A0A000 } "
       ;; ".nn { color: #0000FF; font-weight: bold } "
       ;; ".nt { color: #008000; font-weight: bold } "
       ;; ".nv { color: #19177C } "
       ;; ".ow { color: #AA22FF; font-weight: bold } "
       ;; ".w { color: #bbbbbb } "
       ;; ".mb { color: #666666 } "
       ;; ".mf { color: #666666 } "
       ;; ".mh { color: #666666 } "
       ;; ".mi { color: #666666 } "
       ;; ".mo { color: #666666 } "
       ;; ".sb { color: #BA2121 } "
       ;; ".sc { color: #BA2121 } "
       ;; ".sd { color: #BA2121; font-style: italic } "
       ;; ".s2 { color: #BA2121 } "
       ;; ".se { color: #BB6622; font-weight: bold } "
       ;; ".sh { color: #BA2121 } "
       ;; ".si { color: #BB6688; font-weight: bold } "
       ;; ".sx { color: #008000 } "
       ;; ".sr { color: #BB6688 } "
       ;; ".s1 { color: #BA2121 } "
       ;; ".ss { color: #19177C } "
       ;; ".bp { color: #008000 } "
       ;; ".vc { color: #19177C } "
       ;; ".vg { color: #19177C } "
       ;; ".vi { color: #19177C } "
       ;; ".il { color: #666666 } "


       ;; pygmentize -S colorful -f html
       ".hll { background-color: #ffffcc }"
       ".c { color: #888888 }"
       ".err { color: #FF0000; background-color: #FFAAAA }"
       ".k { color: #008800; font-weight: bold }"
       ".o { color: #333333 }"
       ".cm { color: #888888 }"
       ".cp { color: #557799 }"
       ".c1 { color: #888888 }"
       ".cs { color: #cc0000; font-weight: bold }"
       ".gd { color: #A00000 }"
       ".ge { font-style: italic }"
       ".gr { color: #FF0000 }"
       ".gh { color: #000080; font-weight: bold }"
       ".gi { color: #00A000 }"
       ".go { color: #888888 }"
       ".gp { color: #c65d09; font-weight: bold }"
       ".gs { font-weight: bold }"
       ".gu { color: #800080; font-weight: bold }"
       ".gt { color: #0044DD }"
       ".kc { color: #008800; font-weight: bold }"
       ".kd { color: #008800; font-weight: bold }"
       ".kn { color: #008800; font-weight: bold }"
       ".kp { color: #003388; font-weight: bold }"
       ".kr { color: #008800; font-weight: bold }"
       ".kt { color: #333399; font-weight: bold }"
       ".m { color: #6600EE; font-weight: bold }"
       ".s { background-color: #fff0f0 }"
       ".na { color: #0000CC }"
       ".nb { color: #007020 }"
       ".nc { color: #BB0066; font-weight: bold }"
       ".no { color: #003366; font-weight: bold }"
       ".nd { color: #555555; font-weight: bold }"
       ".ni { color: #880000; font-weight: bold }"
       ".ne { color: #FF0000; font-weight: bold }"
       ".nf { color: #0066BB; font-weight: bold }"
       ".nl { color: #997700; font-weight: bold }"
       ".nn { color: #0e84b5; font-weight: bold }"
       ".nt { color: #007700 }"
       ".nv { color: #996633 }"
       ".ow { color: #000000; font-weight: bold }"
       ".w { color: #bbbbbb }"
       ".mb { color: #6600EE; font-weight: bold }"
       ".mf { color: #6600EE; font-weight: bold }"
       ".mh { color: #005588; font-weight: bold }"
       ".mi { color: #0000DD; font-weight: bold }"
       ".mo { color: #4400EE; font-weight: bold }"
       ".sb { background-color: #fff0f0 }"
       ".sc { color: #0044DD }"
       ".sd { color: #DD4422 }"
       ".s2 { background-color: #fff0f0 }"
       ".se { color: #666666; font-weight: bold; background-color: #fff0f0 }"
       ".sh { background-color: #fff0f0 }"
       ".si { background-color: #eeeeee }"
       ".sx { color: #DD2200; background-color: #fff0f0 }"
       ".sr { color: #000000; background-color: #fff0ff }"
       ".s1 { background-color: #fff0f0 }"
       ".ss { color: #AA6600 }"
       ".bp { color: #007020 }"
       ".vc { color: #336699 }"
       ".vg { color: #dd7700; font-weight: bold }"
       ".vi { color: #3333BB }"
       ".il { color: #0000DD; font-weight: bold }"
   ;;; this is my setting
       "#content{text-align:left;max-width:70em}"
       "</style>"
       )
     "\n"
     ))

   (setq org-html-head (s-replace "100px" "2em" org-html-head))



   ;; https://lists.gnu.org/archive/html/emacs-orgmode/2015-08/msg00947.html
   (setq  org-element-use-cache nil)


#+END_SRC

#+RESULTS:

** pygmentize 
   #+BEGIN_SRC emacs-lisp

   ;; https://github.com/jwiegley/org-mode/issues/14

   ;; Use pygments highlighting for code
   (setf pygmentize (w32-unix-eval ( "t:\\usr\\local\\python35\\Scripts\\pygmentize.exe" ) ("/opt/anaconda3/bin/pygmentize") ))
   (defun pygmentize (lang code)
     "Use Pygments to highlight the given code and return the output"
     (with-temp-buffer
       (insert code)
       (let ((lang (or (cdr (assoc lang org-pygments-language-alist)) "text")))
         (shell-command-on-region (point-min) (point-max)
                                  (format "%s -f html -l %s" pygmentize lang)
                                  (buffer-name)
                                  t
                                  ))
       (message (buffer-name))                               
       (goto-char 0 )
       (search-forward "<pre>")
       (save-excursion
         (save-restriction 
           (narrow-to-region (point) (point-max))
           (goto-char (point-max))
           (buffer-substring-no-properties (point-min) (line-end-position -1))))))

   (defun pyg (linum)
     (interactive "P")
     (let* ((outname (concat  (file-name-sans-extension (buffer-file-name)) ".html")))
       (async-shell-command
        (if linum
            (format
             "%s -O full,style=colorful,linenos=inline,linenostart=1 -o %s -f html -l cpp %s " pygmentize outname (buffer-file-name))
          (format  "%s -O full,style=colorful -o %s -f html -l cpp %s " pygmentize outname (buffer-file-name))))))




     ;add whatever you want
   (defconst org-pygments-language-alist
     '(
       ("asymptote" . "asymptote")
       ("awk" . "awk")
       ("C" . "c")
       ("cpp" . "cpp")
       ("clojure" . "clojure")
       ("css" . "css")
       ("D" . "d")
       ("emacs-lisp" . "scheme")
       ("F90" . "fortran")
       ("gnuplot" . "gnuplot")
       ("groovy" . "groovy")
       ("html" . "html")
       ("haskell" . "haskell")
       ("java" . "java")
       ("js" . "js")
       ("julia" . "julia")
       ("latex" . "latex")
       ("lisp" . "newlisp")
       ("makefile" . "makefile")
       ("matlab" . "matlab")
       ("mscgen" . "mscgen")
       ("ocaml" . "ocaml")
       ("octave" . "octave")
       ("perl" . "perl")
       ("picolisp" . "scheme")
       ("python" . "python")
       ("R" . "r")
       ("ruby" . "ruby")
       ("sass" . "sass")
       ("scala" . "scala")
       ("scheme" . "scheme")
       ("sh" . "sh")
       ("sql" . "sql")
       ("sqlite" . "sqlite3")
       ("tcl" . "tcl")
       ("diff" . "diff")
       ("patch" . "diff")
       )
     "Alist between org-babel languages and Pygments lexers.
   See: http://orgmode.org/worg/org-contrib/babel/languages.html and
   http://pygments.org/docs/lexers/ for adding new languages to the
   mapping. ")

   ;; Override the html export function to use pygments

   (defun org-html-src-block (src-block contents info)
     "Transcode a SRC-BLOCK element from Org to HTML.
   CONTENTS holds the contents of the item.  INFO is a plist holding
   contextual information."
     (if (org-export-read-attribute :attr_html src-block :textarea)
         (org-html--textarea-block src-block)
       (let ((lang (org-element-property :language src-block))
             (caption (org-export-get-caption src-block))
             ;; (code (org-html-format-code src-block info))
             (label (let ((lbl (and (org-element-property :name src-block)
                                    (org-export-get-reference src-block info))))
                      (if lbl (format " id=\"%s\"" lbl) ""))))
         (if (not lang) (format "<pre class=\"example\"%s>\n%s</pre>" label (org-html-format-code src-block info))
           (format
            "<div class=\"org-src-container\">\n%s%s\n</div>"
            (if (not caption) ""
              (format "<label class=\"org-src-name\">%s</label>"
                      (org-export-data caption info)))
            (format "\n<pre class=\"src src-%s\"%s>%s</pre>" lang label (org-html-src-format-code src-block info)))))))



   (defun org-html-do-src-format-code
       (code &optional lang refs retain-labels num-start)
     "Format CODE string as source code.
   Optional arguments LANG, REFS, RETAIN-LABELS and NUM-START are,
   respectively, the language of the source code, as a string, an
   alist between line numbers and references (as returned by
   `org-export-unravel-code'), a boolean specifying if labels should
   appear in the source code, and the number associated to the first
   line of code."
     (let* ((code-lines (org-split-string code "\n"))
            (code-length (length code-lines))
            (num-fmt
             (and num-start
                  (format "%%%ds: "
                          (length (number-to-string (+ code-length num-start))))))
            (code code));;;
       (org-export-format-code
        code
        (lambda (loc line-num ref)
          (setq loc
                (concat
                 ;; Add line number, if needed.
                 (when num-start
                   (format "%s"
                           (format num-fmt line-num)))
                 ;; Transcoded src line.
                 loc
                 ;; Add label, if needed.
                 (when (and ref retain-labels) (format " (%s)" ref))))
          ;; Mark transcoded line as an anchor, if needed.
          (if (not ref) loc
            (format "%s"
                    ref loc)))
        num-start refs)))

   (defun org-html-src-format-code (element info)
     "Format contents of ELEMENT as source code.
   ELEMENT is either an example block or a src block.  INFO is
   a plist used as a communication channel."
     (let* ((lang (org-element-property :language element))
            ;; Extract code and references.
            (code-info (org-export-unravel-code element))
            (code (car code-info))
            (refs (cdr code-info))
            ;; Does the src block contain labels?
            (retain-labels (org-element-property :retain-labels element))
            ;; Does it have line numbers?
            (num-start (case (org-element-property :number-lines element)
                         (continued (org-export-get-loc element info))
                         (new 0))))

       (with-temp-buffer
         (insert  (org-html-do-src-format-code code lang refs retain-labels nil))
         (let ((lang (or (cdr (assoc lang org-pygments-language-alist)) "text")))
           (shell-command-on-region (point-min) (point-max)
                                    (if (numberp num-start )
                                        (format "%s -f html -O linenos=inline,linenostart=%d -l %s" pygmentize (+ 1  num-start) lang)
                                      (format "%s -f html -l %s" pygmentize lang))
                                    (buffer-name)
                                    t
                                    ))
         (goto-char 0 )
         (progn
           (search-forward "<pre>")
           (save-excursion
             (save-restriction 
               (narrow-to-region (point) (point-max))
               (goto-char (point-max))
               (buffer-substring-no-properties (point-min) (line-end-position -1))))))))

   #+END_SRC

   #+RESULTS:
   : org-html-src-format-code

** util func

   #+BEGIN_SRC emacs-lisp

   (defun oh ()
     (interactive)
     (let* ((fs (or (org-agenda-files t)
        (user-error "No agenda files")))
         (ntag (helm-comp-read "성명을 입력하세요 : " fs)))
         (find-file ntag)
         (if (buffer-base-buffer) (org-pop-to-buffer-same-window (buffer-base-buffer)))))


   (defun oa ()
     (interactive)
     (switch-to-buffer "*Org Agenda*"))

   (defun om ()
     (interactive)
     (switch-to-buffer "*mu4e-headers*"))

   (defun org-buffer ()
     "Open a new empty buffer.
   URL `http://ergoemacs.org/emacs/emacs_new_empty_buffer.html'
   Version 2015-06-12"
     (interactive)
     (let ((ξbuf (generate-new-buffer "untitled")))
       (switch-to-buffer ξbuf)
       (org-mode)
       (setq buffer-offer-save t)
       (setq default-directory "t:/orgdir/")
       (write-file "" t)
       ))

   (setq org-agenda-custom-commands
         `(

           ("d" . "마감기한")
           ,@(mapcar 
              (lambda (x)
                `(,(car x) ,(cadr x ) agenda ""
                  ((org-agenda-entry-types '(:deadline))
                   ;; a slower way to do the same thing
                   ;; (org-agenda-skip-function '(org-agenda-skip-entry-if 'notdeadline))
                   (org-agenda-span ,(caddr x))
                   (org-deadline-warning-days 5)
                   ;; (org-agenda-time-grid nil)
                   )))
              '(
                ("dd" "일 마감" 'day)
                ("dw" "주 마감" 'week)
                ("dm" "월 마감" 'month)
                ("dy" "년 마감" 'year)))



           ("h" . "예약작업")
           ,@(mapcar 
              (lambda (x)
                `(,(car x) ,(cadr x ) agenda ""
                  ((org-agenda-entry-types '(:scheduled))
                   ;; a slower way to do the same thing
                   ;; (org-agenda-skip-function '(org-agenda-skip-entry-if 'notdeadline))
                   (org-agenda-span ,(caddr x))
                   (org-agenda-repeating-timestamp-show-all ,(cadddr x)) 
                   ;; (org-agenda-time-grid nil)
                   )))
              '(
                ("hw" "일간 예약작업" 'day t)
                ("hw" "주간 예약작업" 'week t)
                ("hm" "월간 예약작업" 'month nil)
                ("hy" "년간 예약작업" 'year nil)))



           ;; ...other commands here


           ("p" . "우선순위")
           ("pa" "우선순위 A" tags-todo "+PRIORITY=\"A\"")
           ("pb" "우선순위 B" tags-todo "+PRIORITY=\"B\"")
           ("pc" "우선순위 C" tags-todo "+PRIORITY=\"C\"")))


   #+END_SRC


** encoding
   #+begin_src emacs-lisp
   (add-to-list 'mm-body-charset-encoding-alist '(utf-8 . base64)) 
   #+end_src

* org babel

** python

   #+BEGIN_SRC emacs-lisp
     (use-package scimax-org-babel-python
       :config
       (add-to-list 'org-ctrl-c-ctrl-c-hook 'org-babel-async-execute:python))
   #+END_SRC

   #+BEGIN_SRC python :tangle no

     import time

     for i in range(5):
         print(i)
         time.sleep(2)

   #+END_SRC


*** cancel it 
#+BEGIN_SRC emacs-lisp
(remove-from-list  'org-ctrl-c-ctrl-c-hook 'org-babel-async-execute:python)
#+END_SRC

#+RESULTS:

* davmail
** calendar
   #+BEGIN_SRC emacs-lisp
     (setq
      org-caldav-url "http://localhost:1080/users"
      org-caldav-calendar-id "di7979.kim@hanwhasystems.com/calendar"
      org-caldav-uuid-extension ".EML"
      org-caldav-inbox "/mnt/u/orgdir/caldav.org"
      )
   #+END_SRC
* evil conflict
#+BEGIN_SRC emacs-lisp
  (evil-define-key
  '(normal insert visual replace operator motion emacs)
      org-mode-map
  [(shift up)]          'org-shiftup
  [(shift down)]        'org-shiftdown
  [(shift left)]        'org-shiftleft
  [(shift right)]       'org-shiftright)
#+END_SRC

#+RESULTS:

* org-attach

** screenshot, clipboard 
   #+begin_src emacs-lisp
          (use-package org-attach-screenshot 
            :config

            (defun org-attach-screenshot (prfx filename)
              "Take an area screenshot and place it in the entry's attachment directory.

            The user is interactively prompted for a base FILENAME for the
            screenshot.  If the name is empty, a generic name will be
            generated.  If the org entry has no defined attachment directory,
            the user will be offered the choice to create one through the
            `org-attach-screenshot-get-attach-dir' function.

            The frame invoking the function gets hidden while taking the
            screenshot unless a prefix argument PRFX is passed (this allows
            taking screenshots of the Emacs session itself).  If no filename
            extension is provided, .png will be added.

            The command for invoking the external screenshot utility can be
            customized using the `org-attach-screenshot-command-line' variable.

            Note that the screenshots are not stored as actual attachments
            which would mean that entries for the Attachments would be
            written to the PROPERTIES section of a headline in addition to
            the links being already placed inside the text."

              (interactive (list current-prefix-arg
                                 (let ((defval (format-time-string
                                                "screenshot-%Y%m%d-%H%M%S.png")))
                                   (read-string
                                    (format "Screenshot base filename (%s): "
                                            defval)
                                    nil nil
                                    defval))))
              (unless (file-name-extension filename)
                (setq filename (concat filename ".png")))
              (assert (derived-mode-p 'org-mode) nil
                      "you must be in org mode to take a screenshot")
              (let* ((attachdir (org-attach-screenshot-get-attach-dir))
                     (scrfilename (concat (file-name-as-directory attachdir) filename))
                     (winscrfilename (concat (win-path-convert-file-name attachdir) "\\" filename))
                     (arglst (split-string org-attach-screenshot-command-line " "))
                     (cmd (car arglst))
                     linkfilename )
                (message winscrfilename)
                (assert (executable-find cmd) nil
                        "Cannot find executable '%s'. Please check org-attach-screenshot-command-line"
                        cmd)
                (if org-attach-screenshot-relative-links
                    (setq linkfilename
                          (file-relative-name
                           scrfilename (file-name-directory
                                        (or (buffer-file-name) default-directory))))
                  (setq linkfilename scrfilename))
                (if (and (file-exists-p scrfilename)
                         (not (y-or-n-p (format "%s already exists. Overwrite?"
                                                scrfilename))))
                    (call-interactively 'org-attach-screenshot)
                  (insert (concat "[[file:" linkfilename "]]"))
                  (if prfx (make-frame-invisible nil t))
                  ;; we must canoncicalize the file name when we hand it
                  ;; by call-process to the import command
                  (let* ((scrpath (convert-standard-filename  (expand-file-name scrfilename)))
                         (args (mapcar (lambda (x) (replace-regexp-in-string "%f" winscrfilename x t t))
                                       (cdr arglst))))
                    (powershell (s-join " " (cons cmd  args)))
                    (if prfx (make-frame-visible))
                    (message "wrote screenshot to %s" scrpath))
                  (when (or (eq org-attach-screenshot-auto-refresh 'always)
                            (and (eq org-attach-screenshot-auto-refresh 'ask)
                                 (y-or-n-p "Refresh inline images?")))
                    (org-display-inline-images nil t)))))

            (defun org-attach-clipboard (prfx filename)
              "Take an area screenshot and place it in the entry's attachment directory.

               The user is interactively prompted for a base FILENAME for the
               screenshot.  If the name is empty, a generic name will be
               generated.  If the org entry has no defined attachment directory,
               the user will be offered the choice to create one through the
               `org-attach-screenshot-get-attach-dir' function.

               The frame invoking the function gets hidden while taking the
               screenshot unless a prefix argument PRFX is passed (this allows
               taking screenshots of the Emacs session itself).  If no filename
               extension is provided, .png will be added.

               The command for invoking the external screenshot utility can be
               customized using the `org-attach-screenshot-command-line' variable.

               Note that the screenshots are not stored as actual attachments
               which would mean that entries for the Attachments would be
               written to the PROPERTIES section of a headline in addition to
               the links being already placed inside the text."

              (interactive (list (not  current-prefix-arg)
                                 (let* ((defval (format-time-string
                                                 "screenshot-%Y%m%d-%H%M%S.png")))
                                   (if current-prefix-arg
                                       (read-string
                                        (format "Screenshot base filename (%s): "
                                                defval)
                                        nil nil
                                        defval)
                                     defval))))
              (unless (file-name-extension filename)
                (setq filename (concat filename ".png")))
              (assert (derived-mode-p 'org-mode) nil
                      "you must be in org mode to take a screenshot")
              (let* ((attachdir (org-attach-dir t))
                     (scrfilename (concat (file-name-as-directory attachdir) filename))
                     (winscrfilename (concat (win-path-convert-file-name attachdir) "\\" filename))
                     (arglst  (list  nircmdexe  "clipboard" "saveimage" "%f" ))
                     (cmd (car arglst))
                     linkfilename status)
                (assert (executable-find cmd) nil
                        "Cannot find executable '%s'. Please check org-attach-screenshot-command-line"
                        cmd)
                (if org-attach-screenshot-relative-links
                    (setq linkfilename
                          (file-relative-name
                           scrfilename (file-name-directory
                                        (or (buffer-file-name) default-directory))))
                  (setq linkfilename scrfilename))
                (if (and (file-exists-p scrfilename)
                         (not (y-or-n-p (format "%s already exists. Overwrite?"
                                                scrfilename))))
                    (call-interactively 'org-attach-clipboard)
                  (insert (concat "[[file:" linkfilename "]]"))
                  (unless prfx (make-frame-invisible nil t))
                  ;; we must canoncicalize the file name when we hand it
                  ;; by call-process to the import command
                  (let* ((scrpath (convert-standard-filename  (expand-file-name scrfilename)))
                         (args (mapcar (lambda (x) (replace-regexp-in-string "%f" winscrfilename x t t))
                                       (cdr arglst))))
                    (powershell (s-join " " (cons cmd  args)))
                    (unless prfx (make-frame-visible))
                    (unless (equal status 0)
                      (error "screenshot command exited with status %d: %s" status
                             (mapconcat 'identity (cons cmd args) " ")) )
                    (message "wrote screenshot to %s" scrpath))
                  (when (or (eq org-attach-screenshot-auto-refresh 'always)
                            (and (eq org-attach-screenshot-auto-refresh 'ask)
                                 (y-or-n-p "Refresh inline images?")))
                    (org-display-inline-images nil t))))))

 #+end_src

 #+RESULTS:
 : t

* ob-http
  #+begin_src emacs-lisp
     (org-babel-do-load-languages
     'org-babel-load-languages
     '((http . t)))
  #+end_src

  #+RESULTS:


* calendar framework
  #+begin_src emacs-lisp
    (use-package calfw-org :ensure )
    (require 'cal-korea-x)
    (setq calendar-holidays cal-korea-x-korean-holidays)
  #+end_src

  #+RESULTS:
  | holiday-fixed    |  1 |   1 | 신정     |            |    |
  | holiday-lunar-ko |  1 | nil | 1        | 설날       | -1 |
  | holiday-lunar-ko |  1 | nil | 1        | 설날       |    |
  | holiday-lunar-ko |  1 | nil | 1        | 설날       |  1 |
  | holiday-fixed    |  3 |   1 | 3.1절    |            |    |
  | holiday-lunar-ko |  4 | nil | 8        | 석가탄신일 |    |
  | holiday-fixed    |  5 |   5 | 어린이날 |            |    |
  | holiday-fixed    |  6 |   6 | 현충일   |            |    |
  | holiday-fixed    |  8 |  15 | 광복절   |            |    |
  | holiday-fixed    | 10 |   3 | 개천절   |            |    |
  | holiday-fixed    | 10 |   9 | 한글날   |            |    |
  | holiday-lunar-ko |  8 | nil | 15       | 추석       | -1 |
  | holiday-lunar-ko |  8 | nil | 15       | 추석       |    |
  | holiday-lunar-ko |  8 | nil | 15       | 추석       |  1 |
  | holiday-fixed    | 12 |  25 | 성탄절   |            |    |

* export
  #+begin_src emacs-lisp
    (defun org-html-export-to-mhtml (async subtree visible body)
      (cl-letf (((symbol-function 'org-html--format-image) 'format-image-inline))
        (org-html-export-to-html nil subtree visible body)))

    (defun format-image-inline (source attributes info)
      (let* ((ext (file-name-extension source))
             (prefix (if (string= "svg" ext) "data:image/svg+xml;base64," "data:;base64,"))
             (data (with-temp-buffer (url-insert-file-contents source) (buffer-string)))
             (data-url (concat prefix (base64-encode-string data)))
             (attributes (org-combine-plists `(:src ,data-url) attributes)))
        (org-html-close-tag "img" (org-html--make-attribute-string attributes) info)))

    (org-export-define-derived-backend 'html-inline-images 'html
      :menu-entry '(?h "Export to HTML" ((?m "As MHTML file and open" org-html-export-to-mhtml))))
  #+end_src


