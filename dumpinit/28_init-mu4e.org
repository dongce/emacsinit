# -*- coding: utf-8; -*-

* header
  #+BEGIN_SRC emacs-lisp
    ;; -*-mode: emacs-lisp; coding: utf-8; buffer-read-only: t;-*-
  #+END_SRC

  #+RESULTS:

* mu4e setting

** initial setting
   #+BEGIN_SRC emacs-lisp

                       ;;;_ emacs 버그 - TZ 환경 변수를 정상적으로 처리하지 못한다. 
     ;;(setenv "TZ" "ROK")                     ;mingw 프로그램 영향 

     ;;http://emacswiki.org/emacs/LoadPath

     (leaf mu4e
       :require t
       :load-path "/opt/local/share/emacs/site-lisp/mu4e"
       :init (append-path "/opt/local/bin")
       :custom
       ((mu4e-bookmarks .
                        '( ("flag:unread AND NOT flag:trashed" "Unread messages"      ?u)
                           ("date:1d..now"                  "오늘의 메일"     ?t)
                           ("flag:attach"       "첨부파일있음"     ?a)
                           ("date:8d..now"                     "Last 7 days"          ?w)
                           ("mime:image/*"                     "Messages with images" ?p)))
        (outlook.exe .
                     "C:\\Program Files\\Microsoft Office\\Office16\\OUTLOOK.EXE")
        (mu4e-field-list .
                         '(:path :docid :from :to :cc :subject :date :size :message-id  :maildir :priority :flags :attachments :references ))))
    #+end_src

    #+RESULTS:
    : mu4e
    
   #+BEGIN_SRC emacs-lisp
    
     (defun bmkp-mu4e-helper ( subject docid)
       (let* ((bookmark-name (format "%d-%s" docid subject ))
              (bookmark-record (bookmark-get-bookmark bookmark-name t )))

         (if bookmark-record
             (message "북마크가 이미 존재합니다.")

           (progn
             (bmkp-make-function-bookmark
              bookmark-name
              (format "(lambda () (mu4e~proc-view %d nil nil))" docid))
             (message (format "\"%s\" 메일에 대하여 북마크를 완료하였습니다." subject))
             (bookmark-edit-annotation bookmark-name )))))

     (defun bmkp-mu4e-view ()
       (interactive)
       (let* ((subject (mu4e-message-field mu4e~view-message :subject))
              (docid (mu4e-message-field mu4e~view-message :docid)))
         (bmkp-mu4e-helper subject docid)))

     (defun bmkp-mu4e-header ()
       (interactive)
       (let* ((msg (mu4e-message-at-point))
              (subject (mu4e-message-field msg :subject))
              (docid (mu4e-message-field msg :docid)))
         (bmkp-mu4e-helper subject docid)))


     (defun mu4e-filename (msg)
       (decode-coding-string (string-as-unibyte (mu4e-message-field msg :path)) 'utf-8))

     (defun copy-mu4e-header ()
       (interactive)
       (let* ((msg (mu4e-message-at-point))
              (subject (mu4e-message-field msg :subject))
              (path    (mu4e-message-field msg :path))
              (docid (mu4e-message-field msg :docid)))
         (kill-new (format "%s %s : (lambda ()  (mu4e~proc-view %d nil nil))" subject path docid))))


     (defun copy-mu4e-view ()
       (interactive)
       (let* ((subject (mu4e-message-field mu4e~view-message :subject))
              (path    (mu4e-filename mu4e~view-message ))
              (docid (mu4e-message-field mu4e~view-message :docid)))
         (kill-new (format "%s %s (lambda () (mu4e~proc-view %d nil nil))" subject path docid))))

     ;;(defun open-mu4e-header ()
     ;;  (interactive)
     ;;  (w32-shell-execute nil outlook.exe (format "/eml \"%s\"" (mu4e-message-field (mu4e-message-at-point) :path ) )))
     (defun open-mu4e-view (&optional findfile)
       (interactive "P")
       (let ( (file (mu4e-message-field
                     (if (equal major-mode 'mu4e-view-mode) mu4e~view-message (mu4e-message-at-point)) :path)))
         (message file )
         (if findfile
             (find-file file )
           (w32-shell-execute nil (format "\"%s\"" outlook.exe) 
                              (format "\"/eml `\"%s`\"\""
                                      (win-path-convert-file-name file)
                                      ;;(base64-decode-string  (pyutil-wslpath file)) 
                                      ;;(s-replace "/"  "\\" (s-replace "/mnt/f/" "f:" file))
                                      ;;(pyutil-wslpath file)
                                      )))))


     (defun mu4e-field-header ()
       (interactive)
       (mu4e-field-helper (mu4e-message-at-point) mu4e-field-list))

     (defun mu4e-field-view ()
       (interactive)
       (mu4e-field-helper mu4e~view-message (cons ':parts mu4e-field-list)))

     (defun mu4e-find-file()
       (interactive)
       (let* ((msg (mu4e-message-at-point))
              (path    (mu4e-message-field msg :path)))
         (find-file path)))

     (defun copy-file-mu4e()
       (interactive "r")
       (let* ((msg (mu4e-message-at-point))
              (filename (buffer-substring-no-properties (region-beginning) (region-end)))
              (path    (mu4e-message-field msg :path)))

         (find-file path)))

     (defun shr-render ()
       "Display the HTML rendering of the current buffer."
       (interactive )
       (or (fboundp 'libxml-parse-html-region)
           (error "This function requires Emacs to be compiled with libxml2"))
       (save-excursion 
         (save-restriction 
           (narrow-to-region (point) (point-max))
           (shr-insert-document
            (libxml-parse-html-region (point-min) (point-max)))
           (delete-region (point) (point-max))
           )))      


     (defun shr-insert-document-temp (dom)
       "Render the parsed document DOM into the current buffer.
                       DOM should be a parse tree as generated by
                       `libxml-parse-html-region' or similar."
       (setq shr-content-cache nil)
       (let ((start (point))
             (shr-state nil)
             (shr-start nil)
             (shr-base nil)
             (shr-preliminary-table-render 0)
             (shr-width (or shr-width (1- (window-width)))))
         (shr-descend (shr-transform-dom dom))))
     ;; (shr-remove-trailing-whitespace start (point))))

     (defun shr-render-temp ()
       "Display the HTML rendering of the current buffer."
       (interactive )
       (or (fboundp 'libxml-parse-html-region)
           (error "This function requires Emacs to be compiled with libxml2"))
       (save-excursion 
         (save-restriction

           (let ((dom (libxml-parse-html-region (point-min) (point-max))))
             (with-temp-file "c:/temp.txt"
               (shr-insert-document-temp dom)))
           (delete-region (point) (point-max)))))






     (defun mu(from days)
       (interactive "s발신인: \nP")
       (setf from
             (s-trim
              (if  (s-equals? ""  from)
                  (symbol-name  (symbol-at-point))
                from )))
       (if (s-equals? from "")
           (mu4e-headers-search (format  "date:%dd..now" (if  days  (prefix-numeric-value days) 3 )))
         (mu4e-headers-search (format  "from:%s date:%dd..now" from (if  days  (prefix-numeric-value days) 3 )))))

     (defun mymail(days)
       (interactive "p")
       (let ((days (if  days  (prefix-numeric-value days) 3 )))
         (message (format "dayns %d" days))
         (mu4e-headers-search (format  "date:%dd..now" days))))

     (defun fetchmail(days)
       (interactive "p")
       (let ((days (if  days  (prefix-numeric-value days) 3 )))
         (message (format "dayns %d" days))
         (pyutil-win32event "fetchmail")
         ;; (run-at-time 5 nil #'mu4e-update-index)
         (run-at-time 8 nil #'mu4e-headers-search (format  "date:%dd..now" days))))


     (global-set-key [f3] 'mymail)
     (global-set-key [f13]  '(lambda ()  (interactive) (pop-to-buffer "*mu4e-headers*")))
     (global-set-key [S-f3]  '(lambda ()  (interactive) (pop-to-buffer "*mu4e-headers*")))
     (global-set-key [M-f3] 'fetchmail) 
     (global-set-key [C-f3] 'mu)

   #+END_SRC

   #+RESULTS:
   : mu

** helm-mu 
   #+begin_src emacs-lisp 

     (leaf helm-mu
       :require t
       :config 
       (defvar mucontacts-source
         (helm-build-in-buffer-source "mu를 이용하여 메일주소를 검색합니다."
           :data #'helm-mu-contacts-init
           :filtered-candidate-transformer #'helm-mu-contacts-transformer
           ;;:fuzzy-match nil
           :action '(("메일주소를 가져옵니다. " .
                      (lambda (_candidate)
                        (insert
                         (s-join "," (mapcar #'first (mapcar #'split-string (helm-marked-candidates)))))))
                     )))

       (defvar mucontacts-from
         (helm-build-in-buffer-source "mu를 이용하여 메일주소를 검색합니다."
           :data #'helm-mu-contacts-init
           :filtered-candidate-transformer #'helm-mu-contacts-transformer
           ;;:fuzzy-match nil
           :action '(("메일주소를 가져옵니다. " .
                      (lambda (_candidate)
                        (kill-new
                         (s-join ";" (mapcar #'first (mapcar #'split-string (helm-marked-candidates)))))))
                     )))
       (defun mufrom ()
         "Search for contacts."
         (interactive)
         (helm :sources 'mucontacts-from
               :buffer "*helm mu contacts*"))

       (defun mucontacts ()
         "Search for contacts."
         (interactive)
         (mu4e~request-contacts-maybe)
         (helm :sources 'mucontacts-source
               :buffer "*helm mu contacts*")))
   #+end_src

   #+RESULTS:
   : helm-mu

** 연락처 
   ftp://ftp.gnu.org/old-gnu/Manuals/elisp-manual-20-2.5/html_chapter/elisp_17.html
   참조

   <2020-01-17 금 16:23> 김동일 함수명 변경
   debugging - (insert (format "%s" mu4e~contacts))
   #+BEGIN_SRC emacs-lisp
     ;;(defadvice mu4e~update-contacts (before mu4e~contacts-filter activate)
     ;;  (ad-set-arg
     ;;   0
     ;;   (-filter
     ;;    (lambda (x)
     ;;      (s-equals? "hanwhasystems.com" (cadr  (s-split "@" (car x ))))) (ad-get-arg 0))))

     (defadvice mu4e~update-contacts (before mu4e~contacts-filter activate)
       (ad-set-arg
        0
        (-filter
         (lambda (x)
           (s-contains? "hanwhasystems.com" (car x ))) (ad-get-arg 0))))

   #+END_SRC

   #+RESULTS:
   : mu4e~update-contacts


  
** periodic 
   #+BEGIN_SRC emacs-lisp
     (defun mu4e-periodic ()
       (interactive)
       (mu4e-update-index)
       (if (null mu4e~contacts) (mu4e~request-contacts-maybe)))

   #+END_SRC
* mu4e-org
** follow link 
#+BEGIN_SRC emacs-lisp
  (defadvice org-mu4e-open (before save-view-ivy activate)
    (let* ((view (cl-labels
                     ((ft (tr)
                          (if (consp tr)
                              (if (eq (car tr) t)
                                  (cons 'vert
                                        (mapcar #'ft (cddr tr)))
                                (cons 'horz
                                      (mapcar #'ft (cddr tr))))
                            (with-current-buffer (window-buffer tr)
                              (cond ((buffer-file-name)
                                     (list 'file (buffer-file-name) (point)))
                                    ((eq major-mode 'dired-mode)
                                     (list 'file default-directory (point)))
                                    (t
                                     (list 'buffer (buffer-name) (point))))))))
                   (ft (car (window-tree))))))
      (setf  (alist-get "{} view-mu4e-from" ivy-views) (list  view) )))
#+END_SRC

#+RESULTS:
: org-mu4e-open

** send advice
   #+begin_src emacs-lisp
     (leaf org-mu4e
       :require t
       :config 
       (defun mu4e-message-send-and-exit ()
         (interactive)
         (goto-char 0 )
         (mu4e-compose-mode)
         (add-hook 'message-send-hook '(lambda () (replace-string "hanwhasystems.com" "hanwha-rd.com")) nil t)
         (add-hook 'message-send-hook 'org~mu4e-mime-convert-to-html-maybe nil t)
         (message-send-and-exit))) 

   #+end_src

   #+RESULTS:
   : org-mu4e

* keybinding

  #+BEGIN_SRC emacs-lisp
    (defun my/mu4e-inbox ()
      "jump to mu4e inbox"
      (interactive)
      (mu4e~headers-jump-to-maildir "INBOX"))

    (spacemacs/set-leader-keys "oi" 'mu4e)
    (spacemacs/set-leader-keys "oI" 'mu)

  #+END_SRC

  #+RESULTS:

* imapget
** moved to .spacemacs
   #+BEGIN_SRC emacs-lisp :tangle no
   (w32open "t:/MISC/batservice/imapget.bat")
   #+END_SRC

   #+RESULTS:
   : t

* filter 
  #+BEGIN_SRC emacs-lisp
    (setf mu4e-query-fragments-list 
                               '(("%pkx" . "subject:*PKX* or *PKG")
                                 ("%ffx" . "subject:*ffx*")))


  #+END_SRC

  #+RESULTS:
  : t
* refile
  #+BEGIN_SRC emacs-lisp
(setq mu4e-refile-folder
      (lambda (msg)
        (cond
         ;; messages to the mu mailing list go to the /mu folder
         ;;((mu4e-message-contact-field-matches msg :to "mu-discuss@googlegroups.com") "/mu")
         ;; messages sent directly to me go to /archive
         ;; also `mu4e-user-mail-address-p' can be used
         ;;((mu4e-message-contact-field-matches msg :to "dongce@gmail.com") "/hobby")
         ;; messages with football or soccer in the subject go to /football
         ((string-match "ATX" (mu4e-message-field msg :subject)) "/ATX")
         ((string-match "LPH2\\|LPH-II" (mu4e-message-field msg :subject)) "/LPH2")
         ((string-match "KDX" (mu4e-message-field msg :subject)) "/KDX")
         ;; messages sent by me go to the sent folder
         ;;address;;((find-if
         ;;address;;  (lambda (addr)
         ;;address;;    (mu4e-message-contact-field-matches msg :from addr))
         ;;address;;  mu4e-user-mail-address-list)
         ;;address;; mu4e-sent-folder)
         ;; everything else goes to /archive
         ;; important to have a catch-all at the end!
         (t  "/archive"))))

(defun mu4e-get-maildirs ()
  "Get maildirs under `mu4e-maildir', recursively, as a list of
  relative paths (ie., /archive, /sent etc.). Most of the work is
  done in `mu4e~get-maildirs-1'. Note, these results are /cached/
  if `mu4e-cache-maildir-list' is customized to non-nil. In that case,
  the list of maildirs will not change until you restart mu4e."
  (unless mu4e-maildir (mu4e-error "`mu4e-maildir' is not defined"))
  (unless (and mu4e-maildir-list mu4e-cache-maildir-list)
    (setq mu4e-maildir-list
          (sort
           (append
            (when (file-accessible-directory-p
                   (concat mu4e-maildir "/cur")) '("/"))
            (mu4e~get-maildirs-1 mu4e-maildir "/")
            '("../../../REFILE/ATX"
              "../../../REFILE/LPH-II"
              )
            )
           (lambda (s1 s2) (string< (downcase s1) (downcase s2))))))
  mu4e-maildir-list)

  #+END_SRC

* tag
  :tag 로 검색 가능
  #+BEGIN_SRC emacs-lisp
    (leaf mu4e-mark
      :config
      (add-to-list 'mu4e-marks
                   '(tag
                     :char       "g"
                     :prompt     "gtag"
                     :ask-target (lambda () (completing-read "꼬리표 입력바랍니다 : " '(kdx1p lph2 fl wpl ffxii pkxb HR )))
                     :action      (lambda (docid msg target)
                                    (mu4e-action-retag-message msg (concat "+" target)))))

      (mu4e~headers-defun-mark-for tag)
      (mu4e~view-defun-mark-for tag)
      ;;(general-define-key :keymaps 'mu4e-headers-mode-map (kbd "A") 'mu4e-headers-mark-for-archive)
      (general-define-key :keymaps 'mu4e-headers-mode-map (kbd "m") 'mu4e-headers-mark-for-tag)
      (general-define-key :keymaps 'mu4e-view-mode-map (kbd "m") 'mu4e-view-mark-for-tag)
    )
  #+END_SRC
* occur-store-link
  #+begin_src emacs-lisp
    (defun mu4e-occur-store-link ()
      (interactive)
      (next-error)
      (org-store-link 0 t))
  #+end_src
* update index 

  #+begin_src emacs-lisp :tangle no
    (mu4e~proc-index 
     (s-concat "/mnt/f/PERSONAL/" (datetime-format "%Y/%m/%d"))
     mu4e-user-mail-address-list
     nil
     nil)

  #+end_src

  #+RESULTS:
* contact-decomose

#+begin_src emacs-lisp
  (defun decode-contacts (str)
    (if  (> (length str) 3)
        (decode-coding-string str 'utf-8)
      nil))
#+end_src


#+RESULTS:
: decode-contacts

* thread-folding
  #+begin_src emacs-lisp
    (leaf mu4e-thread-folding
      :require t
      :config 
      (add-to-list 'mu4e-header-info-custom
                   '(:empty . (:name "Empty"
                                     :shortname ""
                                     :function (lambda (msg) "  "))))
      (setq mu4e-headers-fields '((:empty . 2)
                                  (:human-date . 20)
                                  (:flags . 6)
                                  (:subject . 70)
                                  (:from . 22))))
  #+end_src

  #+RESULTS:
  : mu4e-thread-folding

  

* company 참고 
  #+begin_src emacs-lisp :tangle no

    (defun company-mu4e (command &optional arg &rest ignore)
      "`company-mode' completion backend for BBDB."
      (message "mure compose")
      (cl-case command
        (prefix (and 
                 (let ((case-fold-search t))
                   (looking-back
                    "^\\([^ :]*-\\)?\\(To\\|B?Cc\\|From\\):.*? *\\([^,;]*\\)"
                    (line-beginning-position)))
                 (match-string-no-properties 3)))
        (candidates (-filter
                     (lambda (item)
                       (s-contains-p arg item t) )
                     (hash-table-keys mu4e~contacts)))
        (sorted t)
        (no-cache t)))
  #+end_src
