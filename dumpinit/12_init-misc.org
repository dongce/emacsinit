# -*- coding: utf-8; -*-


* header

  #+BEGIN_SRC emacs-lisp
    ;; -*-modc: emacs-lisp; coding: utf-8; buffer-read-only: t;-*-
  #+END_SRC


* print
  #+BEGIN_SRC emacs-lisp

    (setq ps-lpr-switches '("-query"))
    (setq ps-printer-name t)

    ;; 헤더가 붙지 않도록 설정한다.
    (setq ps-print-header nil )

    (w32-unix-eval
     (
      ;; WIN32 설정
      (setq ps-lpr-command "t:/usr/local/postscript/gsview/gsview/gsprint.exe")
      (setq preview-gs-command "t:/usr/local/postscript/gs910/bin/gswin32c.exe")
      (require 'w32-winprint)
      )
     (
      ;; 다음을 이용하용 ENSCRIPT 사용 가능
      ;; 언어에 때라 특정한 옵션 사용가능
      (defvar *enscript-syntax*
        '( (c++-mode . "-Ecpp")
           (c-mode . "-Ecpp" )
           (ada-mode . "-Eada" )
           (sh-mode . "-Ebash" )
           (diff-mode . "-Ediff" )
           (emacs-lisp-mode ."-Eelisp" )
           (idl-mode . "-Eidl")
           (makefile-mode ."-Emakefile")
           (python-mode ."-Epython") ) )

      (defun enscript()
        (interactive)
        (print
         (with-output-to-string
           (call-process-region
            (point-min)
            (point-max)
            "/opt/sfw/bin/enscript"
            nil
            standard-output
            nil
            "-Plplpx"
            (cdr (assoc major-mode *enscript-syntax* ) ) ) ) )  )

      (defun enscript-region()
        (interactive)
        (print
         (with-output-to-string
           (call-process-region
            (region-beginning)
            (region-end)
            "enscript"
            nil
            standard-output
            nil
            "-Plplpx"
            (cdr (assoc major-mode *enscript-syntax* ) ) ) ) )  )))

    ;; 한글 프린팅이 가능하다.
    (require 'ps-print)
    (require 'ps-mule)
    (require 'ps-bdf)
    (require 'ps2pdf)


    ;; latex listings 를 이용합니다.
    ;; http://en.wikibooks.org/wiki/LaTeX/Source_Code_Listings

    ;; Supported languages
    ;; It supports the following programming languages:
    ;; ABAP2,4 	IDL4 	PL/I
    ;; ACSL 	inform 	Plasm
    ;; Ada4 	Java4 	POV
    ;; Algol4 	JVMIS 	Prolog
    ;; Ant 	ksh 	Promela
    ;; Assembler2,4 	Lisp4 	Python
    ;; Awk4 	Logo 	R
    ;; bash 	make4 	Reduce
    ;; Basic2,4 	Mathematica1,4 	Rexx
    ;; C4 	Matlab 	RSL
    ;; C++4 	Mercury 	Ruby
    ;; Caml4 	MetaPost 	S4
    ;; Clean 	Miranda 	SAS
    ;; Cobol4 	Mizar 	Scilab
    ;; Comal 	ML 	sh
    ;; csh 	Modelica3 	SHELXL
    ;; Delphi 	Modula-2 	Simula4
    ;; Eiffel 	MuPAD 	SQL
    ;; Elan 	NASTRAN 	tcl4
    ;; erlang 	Oberon-2 	TeX4
    ;; Euphoria 	OCL4 	VBScript
    ;; Fortran4 	Octave 	Verilog
    ;; GCL 	Oz 	VHDL4
    ;; Gnuplot 	Pascal4 	VRML
    ;; Haskell 	Perl 	XML
    ;; HTML 	PHP 	XSLT


    ;; breakindent=0em,
    ;; language=XML,
    ;; basicstyle=\\footnotesize,
    ;; numbers=left,
    ;; numberstyle=\\footnotesize,
    ;; stepnumber=2,
    ;; numbersep=5pt,
    ;; backgroundcolor=\\color{white},
    ;; showspaces=false,
    ;; showstringspaces=false,
    ;; showtabs=false,
    ;; frame=single,
    ;; tabsize=2,
    ;; captionpos=b,
    ;; escapeinside={\\%*}{*)},
    ;; linewidth=\\textwidth
    ;; http://en.wikibooks.org/wiki/LaTeX/Source_Code_Listings
    ;; http://www.personal.ceu.hu/tex/docclass.htm
    ;; http://stackoverflow.com/questions/1965702/how-to-mark-line-breaking-of-long-lines
    ;; http://en.wikibooks.org/wiki/LaTeX/Page_Layout
    ;; http://stackoverflow.com/questions/1116266/listings-in-latex-with-utf-8-or-at-least-german-umlauts kim dong il


    ;; \documentclass [10pt ,a4paper, oneside]{article}

    ;; \usepackage{listings}   %per la stampa del codice

    ;; \newenvironment{C}
    ;; {\lstset{language=[ANSI]C++,
    ;; basicstyle=\small\ttfamily,
    ;; %numbers=left,
    ;; showspaces=false,
    ;; numberstyle=\tiny,
    ;; stepnumber=2,
    ;; tabsize=2,
    ;; numbersep=5pt,
    ;; numberfirstline = false,
    ;; framexleftmargin=5mm, frame=shadowbox,
    ;; breaklines = true}
    ;; }
    ;; {}

    ;; \begin{document}

    ;; \begin{C}
    ;; \begin{lstlisting}
    ;; void initIrqVectors(void) {
    ;;    // IVPR = address base used with IVOR's
    ;;    asm ("lis r5, IV_ADDR@h");
    ;;    for (int i = 0; i < 5 ; i++) { ... }
    ;; }
    ;; \end{lstlisting}
    ;; \end{C}
    ;; \end{document}


    (defcustom lstlngnames
      '((python-mode . python)
        (c++-mode . c++)
        (c-mode . c++)
        (sh-mode . sh)
        (idl-mode . idl)
        (emacs-lisp-mode . lisp)
        (lisp-mode . lisp)
        (ruby-mode . ruby)
        (web-mode . html)
        (java-mode . java)
        )
      "latex listings 언어 목록"
      )


    (defmacro listing-template (fontsize &rest forms)
      `(progn
         ;; http://en.wikibooks.org/wiki/LaTeX/Page_Layout
         ;; (insert-line "\\documentclass[a4paper, landscape, 11pt]{article}")
         ;; http://texblog.org/2012/08/29/changing-the-font-size-in-latex/
         ;; http://tex.stackexchange.com/questions/33685/set-the-font-family-for-lstlisting
         (insert-line (format "\\documentclass[a4paper, %dpt]{extarticle}" (if (member ,fontsize '(8 9 10 11 12 14 17 20)) ,fontsize 10 )))
         (insert-line "\\usepackage{extsizes}") ;http://texblog.org/2012/08/29/changing-the-font-size-in-latex/
         (insert-line "\\usepackage[utf8]{inputenc}")
         (insert-line "\\usepackage{fullpage}")
         (insert-line "\\usepackage{courier}")
         (insert-line "\\usepackage{listings}")
         (insert-line "\\usepackage{color}")
         (insert-line "\\usepackage{MnSymbol}")
         (insert-line "\\usepackage[hangul]{kotex}")
         ;; http://en.wikibooks.org/wiki/LaTeX/Source_Code_Listings
         ;; http://stackoverflow.com/questions/981020/how-to-force-line-wrapping-in-listings-package
         (insert  "\\lstset{
    %inputencoding=utf8
    %showspaces=false,
    showstringspaces=false,
    extendedchars=\\true,
    breaklines=true,
    breakatwhitespace=true,
    breakautoindent=false,
    basicstyle=\\footnotesize\\ttfamily,
    }
    ")
         ;; http://stackoverflow.com/questions/1965702/how-to-mark-line-breaking-of-long-lines
         (insert "
    \\lstset{prebreak=\\raisebox{0ex}[0ex][0ex]
            {\\ensuremath{\\rhookswarrow}}}
    \\lstset{postbreak=\\raisebox{0ex}[0ex][0ex]
            {\\ensuremath{\\rcurvearrowse\\space}}}\n" )
         (mapcar #'insert-line '("\\usepackage {fancyhdr}" "\\pagestyle{fancy}"))


         ,@forms
         ))

    (defmacro verbatim-template (fontsize &rest forms)
      `(progn
         (insert-line (format "\\documentclass[a4paper, %dpt]{extarticle}" (if (member ,fontsize '(8 9 10 11 12 14 17 20)) ,fontsize 10 )))
         (insert-line "\\usepackage{extsizes}") ;http://texblog.org/2012/08/29/changing-the-font-size-in-latex/
         (insert-line "\\usepackage[utf8]{inputenc}")
         (insert-line "\\usepackage{fullpage}")
         (insert-line "\\usepackage{courier}")
         (insert-line "\\usepackage{lmodern}")
         (insert-line "\\usepackage{spverbatim}")
         (insert-line "\\usepackage{listings}")
         (insert-line "\\usepackage{color}")
         (insert-line "\\usepackage{MnSymbol}")
         (insert-line "\\usepackage[hangul]{kotex}")
         (mapcar #'insert-line '("\\usepackage {fancyhdr}" "\\pagestyle{fancy}"))
         ,@forms))

    (defun listings (&optional  fontsize)
      (interactive "p")
      (save-some-buffers)
      (let* ((fname (file-truename  (make-temp-file "listings")))
             (lexical-binding t)
             (language (symbol-name  (cdr  (assoc major-mode lstlngnames ))))
             (inputlisting (format  "\\lstinputlisting[language=%s]{%s}" language (buffer-file-name)))
             (filename  (buffer-file-name))
             (jobname (file-name-base filename))
             )
        (with-temp-file fname
          (listing-template
           fontsize
           (insert-line (format  "\\markboth{%s}{%s}"   language   (file-name-nondirectory  filename)))

           (insert-line "\\begin{document}")
           (insert-line "\\newline")
           (insert-line "\\newline")
           (insert-line "\\newline")
           (insert-line inputlisting)
           (insert-line "\\end{document}")

           ))

        ;; (async-start-process "pdflatex" "pdflatex" (lambda (p) (message "pdflatex 완료")) "-no-file-line-error" "-shell-escape" "-interaction" "nonstopmode" "-jobname" jobname fname)
        (async-start-process "pdflatex" "pdflatexwrap" (lambda (p) (w32-shell-execute "" (file-truename  (format "%s.pdf" jobname)) ))     jobname fname)
        ))



    (defun listing-region (b e &optional  fontsize)
      (interactive "r\np")
      (save-some-buffers)
      (let* ((fname (file-truename  (make-temp-file "listings")))
             (lexical-binding t)
             (language (symbol-name  (cdr  (assoc major-mode lstlngnames ))))
             (bufstring (buffer-substring b e ))
             (filename  (buffer-file-name))
             (jobname (file-name-base filename))
             )
        (with-temp-file fname
          (set-buffer-file-coding-system 'utf-8)
          (listing-template
           fontsize
           (insert-line (format  "\\markboth{%s}{%s}"   language   (file-name-nondirectory  filename)))
           ;; (insert-line "\\lstset{language=}")
           (insert-line "\\begin{document}")
           (insert-line "\\newline")
           (insert-line "\\begin{lstlisting}"  )
           (insert bufstring)
           (insert-line "\\end{lstlisting}")
           (insert-line "\\end{document}")))

        ;; (async-start-process "pdflatex" "pdflatex" (lambda (p) (message "pdflatex 완료")) "-shell-escape" "-interaction" "nonstopmode" "-jobname" jobname fname)
        (async-start-process "pdflatex" "pdflatexwrap" (lambda (p) (w32-shell-execute "" (file-truename  (format "%s.pdf" jobname)) ))     jobname fname)
        ))




    (defun verbatim-region (b e &optional  fontsize)
      (interactive "r\np")
      (save-some-buffers)
      (let* ((fname (file-truename  (make-temp-file "verbatim")))
             (lexical-binding t)
             (language (symbol-name  (cdr  (assoc major-mode lstlngnames ))))
             (bufstring (buffer-substring b e ))
             (filename  (buffer-file-name))
             (jobname (file-name-base filename))
             )
        (with-temp-file fname
          (set-buffer-file-coding-system 'utf-8)
          (verbatim-template
           fontsize
           (insert-line (format  "\\markboth{%s}{%s}"   language   (file-name-nondirectory  filename)))

           (insert-line "\\begin{document}")
           (insert-line "\\newline")
           (insert-line "\\begin{spverbatim}" )
           (insert bufstring)
           (insert-line "\\end{spverbatim}")
           (insert-line "\\end{document}")))

        ;; (async-start-process "pdflatex" "pdflatex" (lambda (p) (message "pdflatex 완료")) "-shell-escape" "-interaction" "nonstopmode" "-jobname" jobname fname)
        (async-start-process "pdflatex" "pdflatexwrap" (lambda (p) (w32-shell-execute "" (file-truename  (format "%s.pdf" jobname)) ))     jobname fname)
        ))
    (defmacro pytex-template (fontsize &rest forms)
      `(progn
         (insert-line (format "\\documentclass[a4paper, %dpt]{extarticle}" (if (member ,fontsize '(8 9 10 11 12 14 17 20)) ,fontsize 10 )))
         (insert-line "\\usepackage{extsizes}") ;http://texblog.org/2012/08/29/changing-the-font-size-in-latex/
         (insert-line "\\usepackage[margin=2cm]{geometry}")
         (insert-line "\\usepackage{courier}")
         (insert-line "\\usepackage{kotex}")
         (mapcar #'insert-line '("\\usepackage {fancyhdr}" "\\pagestyle{fancy}"))
         (insert "
    \\usepackage[utf8]{inputenc}
    \\usepackage[T1]{fontenc}
    \\usepackage{pythontex}
    ")


         ,@forms
         ))

    (defun pytex-region (b e &optional  fontsize)
      (interactive "r\np")
      (save-some-buffers)
      (let* ((fname (file-truename  (make-temp-file "pytex")))
             (lexical-binding t)
             (language (symbol-name  (cdr  (assoc major-mode lstlngnames ))))
             (bufstring (buffer-substring b e ))
             (filename  (buffer-file-name))
             (jobname (file-name-base filename))
             )
        (with-temp-file fname
          (set-buffer-file-coding-system 'utf-8)
          (pytex-template
           fontsize
           (insert-line (format  "\\markboth{%s}{%s}"   language   (file-name-nondirectory  filename)))

           (insert-line "\\begin{document}")
           (insert-line (format  "\\begin{pygments}{%s}" language))
           (insert-line bufstring)
           (insert-line "\\end{pygments}")
           (insert-line "\\end{document}")))

        ;; (async-start-process "pdflatex" "pdflatex" (lambda (p) (message "pdflatex 완료")) "-shell-escape" "-interaction" "nonstopmode" "-jobname" jobname fname)
        (async-start-process "pytex" "pytexwrap" (lambda (p) (w32-shell-execute "" (file-truename  (format "%s.pdf" jobname)) ))     jobname fname)
        ))

  #+END_SRC
* external
  #+BEGIN_SRC emacs-lisp
    ;; (leaf :ensure calc-ext)
    (leaf sqlite
      :ensure t
      :custom
      ((sqlite-program . "sqlite3")))


    ;;; http://www.mikusa.com/python-mysql-docs/index.html
    ;;; pymacs 등을 이용하여 emacs -> sql 이 가능하다.



    (require 'cmuscheme )
    (defun socket-scheme ()
      "Run an inferior Scheme process, input and output via buffer `*scheme*'.
    If there is a process already running in `*scheme*', switch to that buffer.
    With argument, allows you to edit the command line (default is value
    of `scheme-program-name').
    If the file `~/.emacs_SCHEMENAME' or `~/.emacs.d/init_SCHEMENAME.scm' exists,
    it is given as initial input.
    Note that this may lose due to a timing error if the Scheme processor
    discards input when it starts up.
    Runs the hook `inferior-scheme-mode-hook' \(after the `comint-mode-hook'
    is run).
    \(Type \\[describe-mode] in the process buffer for a list of commands.)"

      (interactive )
      (if (not (comint-check-proc "*scheme*"))
          (progn (set-buffer (make-comint "scheme" (cons "localhost" 7979 )))
                 (inferior-scheme-mode)))
      (setq scheme-buffer "*scheme*")
      (pop-to-buffer "*scheme*"))


    ;;한글을 사용하는데 어려움이 전혀 없음을 알 수 있다.

    ;; package auto load next line
    ;;(require 'slime)
    ;;(slime-setup)

    ;;; SMILE 설정
    ;;(setq inferior-lisp-program "clisp")
    (setq slime-multiprocessing t )
    (setq inferior-lisp-program "c:\\usr\\local\\lisp\\allegro\\mlisp.exe")
    (setq *slime-lisp* "c:\\usr\\local\\lisp\\allegro\\mlisp.exe")
    (setq *slime-port* 4006 )
    (defun aslime ()
      (print "Allegro slime...")
      (interactive)
      (shell-command
       (format
        "%s +B +cm -L %s\\slime.lisp -- -p %s --ef %s &"
        ,*slime-lisp*
        (getenv "HOME")
        ,*slime-port*
        slime-net-coding-system))
      (delete-other-windows)
      (while (not (ignore-errors ( slime-connect "localhost" *slime-port*)))
        (sleep-for 0.2 )))

    ;;(require 'dedicated)
    ;; (require 'quack)

    ;;(require 'comint-popup)
    ;;(setq comint-popup-idle-threshold -1)
    ;; (add-hook 'comint-mode-hook (lambda () (dedicated-mode )))
    ;;(add-hook 'comint-output-filter-functions 'comint-popup-buffer)

    (require 'telnet)

    (defun start-telnet (host)
      "Open a network login connection to host named HOST (a string).
       Communication with HOST is recorded in a buffer `*termx*'.
       Normally input is edited in Emacs and sent a line at a time."
      (interactive "sOpen telnet connection to host: ")
      (let* ((comint-delimiter-argument-list '(?\  ?\t))
             (name "termx")
             (buffer (get-buffer "*termx*"))
             process)
        (setq telnet-new-line (char-to-string 13))

        (if (and buffer (get-buffer-process buffer))
            (pop-to-buffer buffer)
          (pop-to-buffer (make-comint name "c:\\usr\\local\\guile\\bin\\plink.exe" nil "-telnet" host))
          (setq process (get-buffer-process (current-buffer)))
          (set-process-filter process 'telnet-initial-filter)
          (accept-process-output process)
          (telnet-mode)
          (setq comint-input-sender 'telnet-simple-send)
          (setq telnet-count telnet-initial-count))))

    (defun start-rs232 (host)
      "Open a network login connection to host named HOST (a string).
       Communication with HOST is recorded in a buffer `*termx*'.
       Normally input is edited in Emacs and sent a line at a time."
      (interactive "sOpen telnet connection to host: ")
      (let* ((comint-delimiter-argument-list '(?\  ?\t))
             (buffer (get-buffer "*rs232-term*"))
             process)
        (setq telnet-new-line (char-to-string 13))

        (if (and buffer (get-buffer-process buffer))
            (pop-to-buffer buffer)
          (pop-to-buffer (make-comint "rs232-term" "c:\\usr\\local\\guile\\bin\\plink.exe" nil "-load" host))
          (setq process (get-buffer-process (current-buffer)))
          ;;(set-process-filter process 'telnet-initial-filter)
          (telnet-mode)
          (setq comint-input-sender 'telnet-simple-send)
          ;;(setq telnet-count telnet-initial-count)
          )))



    (defun num-list (start end  )
      (interactive)
      (let ((result '()))
        (while
            (not (= start end ))
          (setq result (cons start result))
          (setq start (+ start 1 )))
        (reverse result)))


    (setf comint-input-sender-no-newline t )

  #+END_SRC

* encrypt

** content
   #+BEGIN_SRC emacs-lisp

     ;;암호화 기능을 사용할 수 있습니다.
     (require 'epg-config)
     (require 'epa)
     (require 'epa-file)

     (epa-file--file-name-regexp-set 'epa-file-name-regexp "\\.gpg\\(~\\|\\.~[0-9]+~\\)?\\'\\|암호화\\|cipher-folder")

     (when-os 'windows-nt
       (defun epa-file-decode-and-insert (string file visit beg end replace)
         (insert (epa-file--decode-coding-string string 'cp949))))

    (setf epg-pinentry-mode 'loopback) 

   #+END_SRC

   #+RESULTS:
   : epg--start

** move to emacs src

   #+begin_src emacs-lisp :tangle no
     (defun epg--start (context args)
       "Start `epg-gpg-program' in a subprocess with given ARGS."
       (if (and (epg-context-process context)
                (eq (process-status (epg-context-process context)) 'run))
           (error "%s is already running in this context"
                  (epg-context-program context)))
       (let* ((agent-info (getenv "GPG_AGENT_INFO"))
              (args (append (list "--no-tty"
                                  "--status-fd" "1"
                                  "--yes")
                            (if (and (not (eq (epg-context-protocol context) 'CMS))
                                     (string-match ":" (or agent-info "")))
                                '("--use-agent"))
                            (if (and (not (eq (epg-context-protocol context) 'CMS))
                                     (epg-context-progress-callback context))
                                '("--enable-progress-filter"))
                            (if (epg-context-home-directory context)
                                (list "--homedir"
                                      (epg-context-home-directory context)))
                            (unless (eq (epg-context-protocol context) 'CMS)
                              '("--command-fd" "0"))
                            (if (epg-context-armor context) '("--armor"))
                            (if (epg-context-textmode context) '("--textmode"))
                            (if (epg-context-output-file context)
                                (list "--output" (epg-context-output-file context)))
                            (if (epg-context-pinentry-mode context)
                                (list "--pinentry-mode"
                                      (symbol-name (epg-context-pinentry-mode
                                                    context))))
                            args))
              (process-environment process-environment)
              (buffer (generate-new-buffer " *epg*"))
              error-process
              process
              terminal-name
              agent-file
              (agent-mtime '(0 0 0 0)))
         ;; Set GPG_TTY and TERM for pinentry-curses.  Note that we can't
         ;; use `terminal-name' here to get the real pty name for the child
         ;; process, though /dev/fd/0" is not portable.
         (unless (memq system-type '(ms-dos windows-nt))
           (with-temp-buffer
             (condition-case nil
                 (when (= (call-process "tty" "/dev/fd/0" t) 0)
                   (delete-char -1)
                   (setq terminal-name (buffer-string)))
               (file-error))))
         (when terminal-name
           (setq process-environment
                 (cons (concat "GPG_TTY=" terminal-name)
                       (cons "TERM=xterm" process-environment))))
         ;; Start the Emacs Pinentry server if allow-emacs-pinentry is set
         ;; in ~/.gnupg/gpg-agent.conf.
         (when (and (fboundp 'pinentry-start)
                    (executable-find epg-gpgconf-program)
                    (with-temp-buffer
                      (when (= (call-process epg-gpgconf-program nil t nil
                                             "--list-options" "gpg-agent")
                               0)
                        (goto-char (point-min))
                        (re-search-forward
                         "^allow-emacs-pinentry:\\(?:.*:\\)\\{8\\}1"
                         nil t))))
           (pinentry-start))
         (setq process-environment
               (cons (format "INSIDE_EMACS=%s,epg" emacs-version)
                     process-environment))
         ;; Record modified time of gpg-agent socket to restore the Emacs
         ;; frame on text terminal in `epg-wait-for-completion'.
         ;; See
         ;; <http://lists.gnu.org/archive/html/emacs-devel/2007-02/msg00755.html>
         ;; for more details.
         (when (and agent-info (string-match "\\(.*\\):[0-9]+:[0-9]+" agent-info))
           (setq agent-file (match-string 1 agent-info)
                 agent-mtime (or (nth 5 (file-attributes agent-file)) '(0 0 0 0))))
         (if epg-debug
             (save-excursion
               (unless epg-debug-buffer
                 (setq epg-debug-buffer (generate-new-buffer " *epg-debug*")))
               (set-buffer epg-debug-buffer)
               (goto-char (point-max))
               (insert (if agent-info
                           (format "GPG_AGENT_INFO=%s\n" agent-info)
                         "GPG_AGENT_INFO is not set\n")
                       (format "%s %s\n"
                               (epg-context-program context)
                               (mapconcat #'identity args " ")))))
         (with-current-buffer buffer
           (if (fboundp 'set-buffer-multibyte)
               (set-buffer-multibyte nil))
           (make-local-variable 'epg-last-status)
           (setq epg-last-status nil)
           (make-local-variable 'epg-read-point)
           (setq epg-read-point (point-min))
           (make-local-variable 'epg-process-filter-running)
           (setq epg-process-filter-running nil)
           (make-local-variable 'epg-pending-status-list)
           (setq epg-pending-status-list nil)
           (make-local-variable 'epg-key-id)
           (setq epg-key-id nil)
           (make-local-variable 'epg-context)
           (setq epg-context context)
           (make-local-variable 'epg-agent-file)
           (setq epg-agent-file agent-file)
           (make-local-variable 'epg-agent-mtime)
           (setq epg-agent-mtime agent-mtime))
         (setq error-process
               (make-pipe-process :name "epg-error"
                                  :buffer (generate-new-buffer " *epg-error*")
                                  ;; Suppress "XXX finished" line.
                                  :sentinel #'ignore
                                  :noquery t))
         (setf (epg-context-error-buffer context) (process-buffer error-process))
         (with-file-modes 448
           (setq process (make-process :name "epg"
                                       :buffer buffer
                                       :command (cons (epg-context-program context)
                                                      args)
                                       :connection-type 'pipe
                                       :coding '(cp949 . cp949) ;; → this critical
                                       :filter #'epg--process-filter
                                       :stderr error-process
                                       :noquery t)))
         (setf (epg-context-process context) process)))
   #+end_src
* personal
  #+BEGIN_SRC emacs-lisp
    (defun tjcode (code1 code2 securitycard )
      (let ((table (eval (read (epg-decrypt-file (epg-make-context) (wsl-path-convert-file-name securitycard) nil)))))
        (kill-buffer "*Messages*")
        (message "코드: %d %d"  (car (cadr (assoc code1 table))) (cadr (cadr (assoc code2 table))))))

    (defun tjcodeall (code1 code2 securitycard )
      (let ((table (eval (read (epg-decrypt-file (epg-make-context) (wsl-path-convert-file-name securitycard) nil)))))
        (message "코드: %s %s"  (cadr (assoc code1 table)) (cadr (assoc code2 table)))
        (kill-buffer "*Messages*")))

    (defun dgbcode( code1 code2 )
      (interactive "n대구은행 첫번째 코드: \nn대구은행 두번째 코드 : ")
      (tjcode code1 code2 "u:/svndir/cipher-folder-암호가필요한것말고는사용하지말것/개인정보/각종번호/대구은행.gpg" ))

    (defun mtjcode( code1 code2 )
      (interactive "n새마을 첫번째 코드: \nn새마을 두번째 코드 : ")
      (tjcode code1 code2 "u:/svndir/cipher-folder-암호가필요한것말고는사용하지말것/개인정보/각종번호/새마을.gpg" ))

    (defun dtjcode (code1 code2 )
      (interactive "n동양증권 첫번째 코드: \nn동양증권 두번째 코드 : ")
      (tjcode code1 code2 "u:/svndir/cipher-folder-암호가필요한것말고는사용하지말것/개인정보/각종번호/동양종금보안카드.gpg" ))

    (defun stjcode (code1 code2 )
      (interactive "n삼성증권 첫번째 코드: \nn삼성증권 두번째 코드 : ")
      (tjcode code1 code2 "u:/svndir/cipher-folder-암호가필요한것말고는사용하지말것/개인정보/각종번호/삼성증권대구은행보안카드.gpg" ))

    (defun  htjcode(code1 code2 )
      (interactive "n하나은행 첫번째 코드: \nn하나은행 두번째 코드 : ")
      (tjcodeall code1 code2 "u:/svndir/cipher-folder-암호가필요한것말고는사용하지말것/개인정보/각종번호/하나은행.gpg" ))



    (defun hpnum (names)
      (interactive "s성명을 입력하세요: \n")
      (let* ((hpassoc (eval (read (with-temp-buffer (insert-file-contents "u:/svndir/스크랩/mobile.el" ) (buffer-string)))))
             (result  (mapcar
                       (lambda (x)
                         (assoc (intern x ) hpassoc ))
                       (split-string names ))))
        (print result)
        (kill-new "")
        (mapcar
         (lambda (x)
           (kill-append (replace-regexp-in-string "\+82\-" "0" (symbol-name (cadr x)) ) nil )
           (kill-append "\n" nil ))
         result)))



    (defun single-name ()
      (apply
       #'append
       (mapcar
        (lambda (b)
          (mapcar
           (lambda (v)
             (cdr  (assoc 'cn v )))
           (cdr
            (assoc 'empvo
                   (json-read-file (car  b))))))
        (directory-files-and-attributes "t:/MISC/single-mail/jsonaddressbook" t ".json$"))))

    (defun single-content (name )
      (let ((result nil))
        (dolist (json (directory-files-and-attributes "t:/MISC/single-mail/jsonaddressbook" t ".json$") result)
          (mapcar
           (lambda (v)
             (if (string-equal name (cdr (assoc 'cn v )))  (setf result  (cons v result))))
           (cdr (assoc 'empvo (json-read-file (car  json))))))))


    ;;; content example
    ;; (((epTitleCode . R4) (iTotalPageCount . 0) (serverLocation . KR) (description . S/W) (epValidLoginPeriod . 2003022720030430) (epSubOrgCode . ) (epSendRegionCode . ) (cn . 김동일) (sn . 김) (iTotalCount . 0) (epId . S021211222312C100638) (epSendBusiCode . ) (preferredLanguage . ko) (epRegionCode . MA) (epSendSubOrgCode . ) (mailHost . ms17.samsung.com) (o . 삼성탈레스) (epEnSendCompanyName . ) (epDefaultCompCode . O) (epmiddlename . ) (epUserStatus . B) (otherFacsimileTelephoneNumber . ) (epenmiddlename . ) (epEnSendSubOrgName . ) (epSubOrgName . ) (epSendSecurityLevel . 5) (facsimileTelephoneNumber . 054-460-8709) (epAttachSize . 10) (epUserLevel . U) (department . SW그룹) (givenname . 동일) (epSmsotp . ) (epSendCompanyName . ) (epSendGradeOrTitle . ) (epServiceCode . U) (title . 선임연구원) (mobile . +82-10-3826-0719) (epOrganizationCode . PC7) (epEnDepartment . SW Group) (telephoneNumber . +82-054-460-8717) (epSendGradeName . ) (epEnTitle . Engineer) (epEnOrganizationName . Samsung Thales) (postalAddress .  경북 구미시 공단동 259 사서함 50) (iCurrentPage . 0) (epHomePostalCode . 706-050) (epSendTitleName . ) (iPageCount . 0) (epSendDeptCode . ) (epPreferredLanguage . ko) (mail . di7979.kim@samsung.com) (epEnCn . dong il Kim) (homePhone . 053-762-1146) (employeeNumber . 02902774) (uid . di7979.kim) (epSendCompanyCode . ) (epensn . Kim) (epEnDescription . S/W) (epEnPostalAddress . Gongdan-Dong Gumi-City Gyoungsangbok-Do) (epSendDeptName . ) (employeeType . N) (epAlternativeMail . dikim97@samsung.co.kr) (homePostalAddress .     대구시 수성구 중동 521-5번지) (departmentNumber . T10D5302) (epUserLocation . AK) (dn . uid=di7979.kim,ou=regular,ou=people,o=samsung) (epEnGradeName . Engineer) (epBusiCode . MA) (postalCode . 730-030) (epengivenname . dong il) (bEpIsBlue . :json-false) (nickName . ) (epEnSendGradeName . ) (epEnSendTitleName . ) (epSecurityLevel . 5) (epSendTitleNumber . ) (epGradeName . 선임연구원) (epNative . N) (epEnHomePostalAddress . Jung-dong Susung-gu Daegu-city) (epGradeOrTitle . T) (epvoipnumber . ) (bEpAutofoward . :json-false) (epTitleSortOrder . 52) (epEnSendDeptName . ))
    ;; ....
    ;;  )


    (defun singleid()
      (interactive)
      (let ((ntag (selectrum-completing-read "성명을 입력하세요 : " (single-name))))

        ;; (insert (format "%s" (single-content ntag )))
        (mapcar
         (lambda (x)
           (let ((mail   (s-replace "samsung.com"  "hanwha.com"(cdr (assoc 'mail x)))))
             (message mail)
             (kill-new  mail)))
         (single-content ntag ))
        ))


    (defun hanwhaid()
      (interactive)
      (let ((ntag (selectrum-completing-read "성명을 입력하세요 : " (single-name))))

        ;; (insert (format "%s" (single-content ntag )))
        (mapcar
         (lambda (x)
           (let ((mail   (s-replace "samsung.com"  "hanwha.com"(cdr (assoc 'mail x)))))
             (message mail)
             (insert  (format "%s,"  mail))))
         (single-content ntag ))
        ))

  #+END_SRC

  #+RESULTS:
  : hanwhaid

* sw team

  조직도 소스보기에 서 생성할 수 있다.

  #+BEGIN_SRC emacs-lisp

    (defun sw-name ()
      (apply
       #'append
       (mapcar
        (lambda (b)
          (mapcar
           (lambda (v)
             (cdr  (assoc 'userName v )))
           (json-read-file (car  b))))
        (directory-files-and-attributes "t:/MISC/single-mail/swaddress" t ".json$"))))

    (defun sw-content (name )
      (let ((result nil))
        (dolist (json (directory-files-and-attributes "t:/MISC/single-mail/swaddress" t ".json$") result)
          (mapcar
           (lambda (v)
             (if (string-equal name (cdr (assoc 'userName v )))  (setf result  (cons v result))))
           (json-read-file (car  json))))))
    (defun swnc()
      (interactive)
      (let ((ntag (selectrum-completing-read "성명을 입력하세요 : " (sw-name))))
        (with-current-buffer (get-buffer-create "*name-card*")
          (outline-mode)
          (goto-char (point-max))
          (insert (format "* %s\n" ntag))
          (mapcar
           (lambda (n)
             (insert (format "%s : %s\n" (car n) (cdr n))))
           (car (sw-content ntag )))
          (switch-to-buffer-other-window (current-buffer)))))
  #+END_SRC

* SCM
  #+BEGIN_SRC emacs-lisp

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; SVN 관련
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; svn-status-toggle-svn-verbose-flag 함수를 이용하여 변경가능하다.
    ;;(setq svn-status-verbose t)

    ;; 다음을 이용해 바로 commit 이 가능하지만 필요없다.
    ;;(defun svn-commit-dir ( dir )
    ;;  "Commit selected files.
    ;;If some files have been marked, commit those non-recursively;
    ;;this is because marking a directory with \\[svn-status-set-user-mark]
    ;;normally marks all of its files as well.
    ;;If no files have been marked, commit recursively the file at point."
    ;;  (interactive (list (svn-read-directory-name "SVN status directory: "
    ;;                                              nil default-directory nil)))
    ;;
    ;;  (switch-to-buffer (dired-noselect dir ""))
    ;;  (svn-status-commit))
    ;;(global-set-key (kbd "C-.") 'svn-commit-dir)


    ;; (leaf psvn )
    ;;(load-library "dsvn" )                  ;; subversion 1.7 이상
    ;;(setq svn-call-process-function 'call-process )
    ;;(setq svn-start-process-function 'start-process )

    (defun link11-commit ()
      (interactive)
      (set-buffer (dired-noselect "c:/FFX/CFCS/DLP_LINK11"))
      (svn-status-commit))

    (defun isdl-commit ()
      (interactive)
      (set-buffer (dired-noselect "c:/FFX/CFCS/DLP_ISDL"))
      (svn-status-commit))

    (add-hook 'svn-log-edit-mode-hook
              '(lambda () (set-buffer-file-coding-system 'cp949)))


    (defvar ticket-history nil
      "History list for some commands that read regular expressions.

    Maximum length of the history list is determined by the value
    of `history-length', which see.")


    (defun read-ticket-number (prompt &optional default)
      "Read a numeric value in the minibuffer, prompting with PROMPT.
    DEFAULT specifies a default value to return if the user just types RET.
    The value of DEFAULT is inserted into PROMPT."
      (let* ((n nil)
             (history-delete-duplicates t )
             (history-add-new-input nil)     ;;수동으로 history 에 포함 필요
             )
        (when default
          (setq prompt
                (if (string-match "\\(\\):[ \t]*\\'" prompt)
                    (replace-match (format " (기본값 %s)" default) t t prompt 1)
                  (replace-regexp-in-string "[ \t]*\\'"
                                            (format " (기본값 %s) " default)
                                            prompt t t))))
        (while
            (progn
              (let ((str (read-from-minibuffer prompt nil nil nil 'ticket-history default)))
                (condition-case nil
                    (setq n (cond
                             ((zerop (length str)) default)
                             ((stringp str) (prog1 (read str) (add-to-history 'ticket-history str))))) ;number-to-string
                  (error nil)))
              (unless (numberp n)
                (message "숫자를 입력해 주세요.")
                (sit-for 1)
                t)))
        n))


    (defun ticket (tn)
      (interactive (list (read-ticket-number "티켓번호를 입력해 주세요 : " (car ticket-history))))
      (insert ( format "//!!!ticket:%d %s 김동일 | " tn (format-time-string "%Y%m%d"))))

    (defun nticket (tn)
      (interactive (list (read-ticket-number "티켓번호를 입력해 주세요 : " (car ticket-history))))
      (insert ( format "%d" tn )))

    (defun dticket (tn)
      (interactive (list (read-ticket-number "티켓번호를 입력해 주세요 : " (car ticket-history))))
      (insert ( format "//DEPRECATEDBY-ticket:%d//" tn )))

    (defun lticket (tn)
      (interactive (list (read-ticket-number "티켓번호를 입력해 주세요 : " (car ticket-history))))
      (insert ( format "//!!!lst-ticket:%d %s 김동일 | " tn (format-time-string "%Y%m%d"))))




    (defun ffxlog ()
      (interactive)
      (insert-file "t:/usr/local/ffxsvn-dev/log-template.txt"))



    ;;deprecated-tooslow;;;;(setq semantic-load-turn-useful-things-on t)
    ;;deprecated-tooslow;;(require 'cedet)
    ;;deprecated-tooslow;;(require 'ecb)
    ;;deprecated-tooslow;;;; 에러시에 trace 윈도우 생성
    ;;deprecated-tooslow;;(setq stack-trace-on-error nil )
    ;;deprecated-tooslow;;(setq ecb-tip-of-the-day nil)
    ;;deprecated-tooslow;;(setq ecb-primary-secondary-mouse-buttons (quote mouse-1--mouse-2))
    ;;deprecated-tooslow;;;;(ecb-activate)
    ;;deprecated-tooslow;;(ecb-toggle-ecb-windows -1 )

    (defun smerge ()
      (interactive)
      (let ((cmd
             (completing-read "명령을 입력하세요: "
                              (mapcar (function (lambda (x) (list x t)))
                                      `(
                                        next
                                        prev
                                        resolve
                                        all-keep
                                        base-keep
                                        other-keep
                                        mine-keep
                                        keep-current
                                        ediff
                                        combine-with-next
                                        refine
                                        diff-base-mine
                                        diff-base-other
                                        diff-mine-other
                                        ))
                              nil t nil nil "next")))
        (funcall
         (cdr
          (assoc
           (intern cmd )
           '(
             (next                . smerge-next              )
             (prev                . smerge-prev              )
             (resolve             . smerge-resolve           )
             (all-keep            . smerge-keep-all          )
             (base-keep           . smerge-keep-base         )
             (other-keep          . smerge-keep-other        )
             (mine-keep           . smerge-keep-mine         )
             (keep-current        . smerge-keep-current      )
             (ediff               . smerge-ediff             )
             (combine-with-next   . smerge-combine-with-next )
             (refine              . smerge-refine            )
             (diff-base-mine      . smerge-diff-base-mine    )
             (diff-base-other     . smerge-diff-base-other   )
             (diff-mine-other     . smerge-diff-mine-other   )))))))

    (global-set-key (kbd "M-n") 'smerge)


    (leaf git-timemachine
      :ensure t
      :config
      (defun my-git-timemachine-show-selected-revision ()
        "Show last (current) revision of file."
        (interactive)
        (let (collection)
          (setq collection
                (mapcar (lambda (rev)
                          ;; re-shape list for the ivy-read
                          (cons (concat (substring (nth 0 rev) 0 7) "|" (nth 5 rev) "|" (nth 6 rev)) rev))
                        (git-timemachine--revisions)))
          (ivy-read "commits:"
                    collection
                    :action (lambda (rev)
                              (git-timemachine-show-revision rev)))))

      (defun my-git-timemachine ()
        "Open git snapshot with the selected version.  Based on ivy-mode."
        (interactive)
        (git-timemachine--start #'my-git-timemachine-show-selected-revision)))

  #+END_SRC

* compile
  #+BEGIN_SRC emacs-lisp


    ;; compile 확장 버젼
    ;; (leaf compile- :ensure t )
    ;; (leaf compile :ensure t )

    ;; 특정파일만 컴파일 할 수 있습니다.
    (defun compile-file (option-file)
      (interactive)
      (compile
       (format "cl %s %s" (with-temp-buffer (insert-file-contents option-file) (replace-string "\n" " " ) (buffer-substring (point-min) (point-max)))
               (replace-regexp-in-string "\\.h" ".cpp" (buffer-file-name) ))))





    (defun build-link11 (&optional vxworks)
      (interactive
       (list current-prefix-arg))
      (if vxworks
          (progn
            (dired "c:/FFX/CFCS/DLP_LINK11/proj/makeproj")
            (compile "c:/vxworks/tornado/host/x86-win32/bin/torVars.bat & make -f makefile.vxworks all "))
        (compile "vcbuild C:\\FFX\\CFCS\\DLP_LINK11\\proj\\winproj\\winproj.vcproj  Debug")))


    (defun build-isdl (&optional vxworks)
      (interactive
       (list current-prefix-arg))
      (if vxworks
          (progn
            (dired "c:/FFX/CFCS/DLP_ISDL/proj/makeproj")
            (compile "c:/vxworks/tornado/host/x86-win32/bin/torVars.bat & make -f makefile.vxworks all "))
        (compile "vcbuild  C:\\FFX\\CFCS\\DLP_ISDL\\proj\\winproj\\winproj.vcproj  Debug")))


    (defun build-dlp (&optional vxworks)
      (interactive
       (list current-prefix-arg))

      (if (not (null (scheme-get-process)))
          (comint-send-string (scheme-proc) "(quit)\n"))
      (if (eq nil (buffer-file-name)) (build-isdl vxworks)
        (if (eq nil (string-match "isdl" (buffer-file-name)))
            (build-link11 vxworks)
          (build-isdl vxworks))))

    ;; 특정 변수를 버퍼에게 종속적으로 만드는 함수
    ;;(make-variable-buffer-local 'next-error-function)


    ;; Command to point VS.NET at our current file & line
    (defun my-current-line ()
      "Return the current buffer line at point.  The first line is 0."
      (save-excursion
        (beginning-of-line)
        (count-lines (point-min) (point))))
    (defun devenv-cmd (&rest args)
      "Send a command-line to a running VS.NET process.  'devenv' comes from devenv.exe"
      (call-process "DevEnvCommand" nil nil nil (apply 'concat args)))
    (defun switch-to-devenv ()
      "Jump to VS.NET, at the same file & line as in emacs"
      (interactive)
      (save-some-buffers)
      (let ((val1
             (devenv-cmd "File.OpenFile \"" (buffer-file-name (current-buffer)) "\""))
            (val2
             (devenv-cmd "Edit.GoTo " (int-to-string (+ (my-current-line) 1)))))
        (cond ((zerop (+ val1 val2))
                                            ;(iconify-frame)  ;; what I really want here is to raise the VS.NET window
               t)
              ((or (= val1 1) (= val2 1))
               (error "command failed"))  ;; hm, how do I get the output of the command?
              (t
               (error "couldn't run DevEnvCommand")))))

    ;; Command to toggle a VS.NET breakpoint at the current line.
    (defun devenv-toggle-breakpoint ()
      "Toggle a breakpoint at the current line"
      (interactive)
      (switch-to-devenv)
      (devenv-cmd "Debug.ToggleBreakpoint"))
    ;;(global-set-key [f9] 'devenv-toggle-breakpoint)

    ;; Run the debugger.
    (defun devenv-debug ()
      "Run the debugger in VS.NET"
      (interactive)
      (devenv-cmd "Debug.Start"))

    ;;(global-set-key [(f2)] (lambda () (interactive) (switch-to-devenv) (devenv-cmd "Edit.GoToDefinition")))

    ;;(global-set-key [(f3)] 'switch-to-devenv)
    ;;(global-set-key [(shift f3)] (lambda () (interactive) (switch-to-devenv) (devenv-cmd "Build.Compile")))
    ;;(global-set-key [(shift f5)] (lambda () (interactive) (devenv-cmd "Debug.AttachtoProcess")))
    (global-set-key [(M f4)] (lambda () (interactive) (devenv-cmd "Window.CloseAllDocuments")))


    ;;(global-set-key [shift f3] (lambda () (interactive) (switch-to-dev) (devenv-cmd "Build.Compile")))
    ;;(global-set-key [shift f5] (lambda () (interactive) (devenv-cmd "Debug.AttachtoProcess")))


    (defun recompile-quietly ()
      "Re-compile without changing the window configuration."
      (interactive)
      (save-window-excursion
        (recompile)))

    (defun eval-env (x)
      (let ((result x))
        (setf result  (s-replace "$(GUILE_HOME)" "t:\\\\usr\\\\local\\\\guile\\\\" result  ))
        (setf result  (s-replace "$(NDDS_HOME)"  "t:\\\\rti\\\\waveworks\\\\ndds.4.5c\\\\" result ))
        (setf result  (s-replace "$(DSFHOME)"  "t:\\\\kss\\\\devenv\\\\util\\\\dsf\\\\" result ))
        (if (not result) x result )))

    (defun project-compile-file ()
      (interactive)
      (let ((file (buffer-file-name)))
        (with-current-buffer (project-buffer-mode-p-get-attached-project-buffer)
          (let ((coption
                 (cadr (find-if                   ;첫번째 ELEMENT 만 리턴합니다.
                        (lambda (x)
                          (string-equal "VCCLCompilerTool" (cdr (assoc 'Name (cadr x )))))
                        (edom-by-tag-name (car (xml-parse-file (project-buffer-get-project-path (car project-buffer-master-project)))) 'Tool )))))
            (compile
             (eval-env (format
                        "cl /c %s %s %s"
                        (concat "-I" (string-replace-match ";" (cdr (assoc 'AdditionalIncludeDirectories coption)) " -I" nil t ))
                        (concat "-D" (string-replace-match ";" (cdr (assoc 'PreprocessorDefinitions coption)) " -D" nil t ))
                        file)))))))

    ;; F6 에 의해서 파일을 찾을 때 디렉토리를 찾습니다.
    (setq
     cc-search-directories
     '(
       "."
       ;;"c:/FFX/CFCS/DLP_LINK11/src/bridge"
       ;;"c:/FFX/CFCS/DLP_LINK11/src/common"
       ;;"c:/FFX/CFCS/DLP_LINK11/src/include"
       ;;"c:/FFX/CFCS/DLP_LINK11/src/track_input"
       ;;"c:/FFX/CFCS/DLP_LINK11/src/dts_controller"
       ;;"c:/FFX/CFCS/DLP_LINK11/src/db_access_main"
       ;;"c:/FFX/CFCS/DLP_LINK11/src/db_access_main/cache"
       ;;"c:/FFX/CFCS/DLP_LINK11/src/remote_control"
       ;;"c:/FFX/CFCS/DLP_LINK11/src/db_access_main/DLRL"
       ;;"c:/FFX/CFCS/DLP_LINK11/src/general_in_out"
       ;;"c:/FFX/CFCS/DLP_LINK11/src/network_tx"
       ;;"c:/FFX/CFCS/DLP_LINK11/src/track_output"
       ;;"c:/FFX/CFCS/DLP_LINK11/src/parameter_adapt"
       ;;"c:/FFX/CFCS/DLP_LINK11/src/status_checker"
       ;;"c:/FFX/CFCS/DLP_LINK11/src/network_rx"
       ;;"c:/FFX/CFCS/DLP_LINK11/DLP_L11_L11IP_COMMON"
       ;;"c:/FFX/CFCS/DLP_ISDL/common"
       ;;"c:/FFX/CFCS/DLP_ISDL/src"
       ;;"c:/FFX/CFCS/DLP_ISDL/common/cache"
       ;;"c:/usr/local/guile/include"
       ;;"c:/usr/local/guile/include/vxwrap"
       ;;"c:/FFX/devenv/ndds/csds/include"
       ;;"c:/FFX/devenv/ndds/include"
       ;;"c:/FFX/devenv/ndds/include/ndds"
       ;;"c:/FFX/devenv/ffxlib/include"

       ))


    ;; QAC
    (add-to-list
     'compilation-error-regexp-alist
     '("^\\([^,\n\t]+\\),\\([0-9]+\\),\\([0-9]+\\)," 1 2 3))

    ;; tcf 와 CPP 파일을 연결합니다.
    ;;(setf cc-other-file-alist (cons '("\\.tcf\\'" (".cpp" )) cc-other-file-alist))


    (defun release ()
      (interactive)
      (switch-to-buffer "*compilation*")
      (compile "release.cmd"))


    (defun next-error-buffer-hl-line ()
      "Turn on `hl-line-mode' in buffer `next-error-last-buffer'.
    To turn it off: `M-x hl-line-mode' in the compilation/grep buffer."
      (ignore-errors
        (when (and next-error-last-buffer  (buffer-live-p next-error-last-buffer))
          (with-current-buffer next-error-last-buffer
            (hl-line-mode 1)
            (recenter-top-bottom)
            ))))

    (add-hook 'next-error-hook 'next-error-buffer-hl-line)

    ;;; * compile environment
    (defun vs2005env ()
      (interactive)
      (setenv "VSINSTALLDIR"     "c:\\usr\\microsoft\\vs2005\\IDE" t )
      (setenv "VCINSTALLDIR"     "c:\\usr\\microsoft\\vs2005\\IDE\\VC" t )
      (setenv "FrameworkDir"     "C:\\Windows\\Microsoft.NET\\Framework" t )
      (setenv "FrameworkVersion" "v2.0.50727" t )
      (setenv "FrameworkSDKDir"  "c:\\usr\\microsoft\\vs2005\\IDE\\SDK\\v2.0" t )
      (setenv "DevEnvDir" "c:\\usr\\microsoft\\vs2005\\IDE\\Common7\\IDE" t )
      (setenv  "PATH" "c:\\usr\\microsoft\\vs2005\\IDE\\Common7\\IDE;c:\\usr\\microsoft\\vs2005\\IDE\\VC\\BIN;c:\\usr\\microsoft\\vs2005\\IDE\\Common7\\Tools;c:\\usr\\microsoft\\vs2005\\IDE\\Common7\\Tools\\bin;c:\\usr\\microsoft\\vs2005\\IDE\\VC\\PlatformSDK\\bin;c:\\usr\\microsoft\\vs2005\\IDE\\SDK\\v2.0\\bin;C:\\Windows\\Microsoft.NET\\Framework\\v2.0.50727;c:\\usr\\microsoft\\vs2005\\IDE\\VC\\VCPackages;$PATH" t )
      (setenv "INCLUDE" "c:\\usr\\microsoft\\vs2005\\IDE\\VC\\ATLMFC\\INCLUDE;c:\\usr\\microsoft\\vs2005\\IDE\\VC\\INCLUDE;c:\\usr\\microsoft\\vs2005\\IDE\\VC\\PlatformSDK\\include;c:\\usr\\microsoft\\vs2005\\IDE\\SDK\\v2.0\\include;$INCLUDE" t )
      (setenv "LIB" "c:\\usr\\microsoft\\vs2005\\IDE\\VC\\ATLMFC\\LIB;c:\\usr\\microsoft\\vs2005\\IDE\\VC\\LIB;c:\\usr\\microsoft\\vs2005\\IDE\\VC\\PlatformSDK\\lib;c:\\usr\\microsoft\\vs2005\\IDE\\SDK\\v2.0\\lib;$LIB" t )
      (setenv "LIBPATH" "C:\\Windows\\Microsoft.NET\\Framework\\v2.0.50727;c:\\usr\\microsoft\\vs2005\\IDE\\VC\\ATLMFC\\LIB" t ))


    (defun vs2008env ()
      (interactive)
      (setenv "VSINSTALLDIR"     "c:\\usr\\microsoft\\vs2008\\IDE" t )
      (setenv "VCINSTALLDIR"     "c:\\usr\\microsoft\\vs2008\\IDE\\VC" t )
      (setenv "FrameworkDir"     "C:\\Windows\\Microsoft.NET\\Framework" t )
      (setenv "FrameworkVersion" "v2.0.50727" t )
      (setenv "Framework35Version" "v3.5" t )
      (setenv "FrameworkSDKDir"  "c:\\usr\\microsoft\\vs2008\\IDE\\SDK\\v3.5" t )
      (setenv "DevEnvDir" "c:\\usr\\microsoft\\vs2008\\IDE\\Common7\\IDE" t )
      (setenv  "PATH" "c:\\usr\\microsoft\\vs2008\\IDE\\Common7\\IDE;c:\\usr\\microsoft\\vs2008\\IDE\\VC\\BIN;c:\\usr\\microsoft\\vs2008\\IDE\\Common7\\Tools;c:\\usr\\microsoft\\vs2008\\IDE\\Common7\\Tools\\bin;C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\bin;c:\\usr\\microsoft\\vs2008\\IDE\\SDK\\v3.5\\bin;C:\\Windows\\Microsoft.NET\\Framework\\v3.5.50727;c:\\usr\\microsoft\\vs2008\\IDE\\VC\\VCPackages;$PATH" t )
      (setenv "INCLUDE" "c:\\usr\\microsoft\\vs2008\\IDE\\VC\\ATLMFC\\INCLUDE;c:\\usr\\microsoft\\vs2008\\IDE\\VC\\INCLUDE;C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\include;c:\\usr\\microsoft\\vs2008\\IDE\\SDK\\v3.5\\include;$INCLUDE" t )
      (setenv "LIB" "c:\\usr\\microsoft\\vs2008\\IDE\\VC\\ATLMFC\\LIB;c:\\usr\\microsoft\\vs2008\\IDE\\VC\\LIB;C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\lib;c:\\usr\\microsoft\\vs2008\\IDE\\SDK\\v3.5\\lib;$LIB" t )
      (setenv "LIBPATH" "C:\\Windows\\Microsoft.NET\\Framework\\v3.5;c:\\usr\\microsoft\\vs2008\\IDE\\VC\\ATLMFC\\LIB" t ))



    (defun torEnv ()
      (interactive)
      (setenv "WIND_HOST_TYPE" "x86-win32"                                    t )
      (setenv "WIND_BASE"      "T:\\T22PPC"                                   t )
      (setenv "PATH"           "$WIND_BASE\\host\\$WIND_HOST_TYPE\\bin;$PATH" t )
      (setenv "DIABLIB"        "$WIND_BASE\\host\\diab"                       t )
      (setenv "PATH"           "$DIABLIB\\WIN32\\bin;$PATH"                   t ))
  #+END_SRC

* search

** origin
   #+BEGIN_SRC emacs-lisp

     (defun link11-grep (word &optional case-senstive )
       "현제커서 위치의 단어를 검색한다."
       (interactive
        (list (read-string "찾을 단어: " (current-word)) current-prefix-arg ))

       (set-buffer (dired-noselect "c:/FFX/CFCS/DLP_LINK11"))
       (grep (if case-senstive
                 (format "%s \"%s\" *" grep-command word )
               (format "%s --smart-case   \"%s\" *" grep-command word ))))

     (defun isdl-grep (word &optional case-senstive )
       "현제커서 위치의 단어를 검색한다."
       (interactive
        (list (read-string "찾을 단어: " (current-word)) current-prefix-arg ))

       (set-buffer (dired-noselect "c:/FFX/CFCS/DLP_ISDL"))
       (grep (if case-senstive
                 (format "%s \"%s\" *" grep-command word )
               (format "%s  \"%s\" *" grep-command word ))))

     (defun dlp-grep (word &optional case-senstive )
       "현제커서 위치의 단어를 검색한다."
       (interactive
        (list (read-string "찾을 단어: " (current-word)) current-prefix-arg ))
       (if (not (eq nil (string-match "isdl" (buffer-file-name))))
           (set-buffer (dired-noselect "c:/FFX/CFCS/DLP_ISDL"))
         (if (not (eq nil (string-match "link11" (buffer-file-name))))
             (set-buffer (dired-noselect "c:/FFX/CFCS/DLP_LINK11"))))
       (grep (if case-senstive (format " \"%s\" *" grep-command word ) (format "%s  \"%s\" *" grep-command word ))))

     (defun grep-dired-marked (word)
       "Display Windows context menu on selected files"
       (interactive
        (list (read-string "찾을 단어: " (current-word)) ))
       (let* ((files (dired-get-marked-files))
              (files (if (null files)
                         (list (dired-current-directory) )
                       files)))
         ;; http://www.gnu.org/software/emacs/manual/html_node/elisp/Calling-Functions.html
         (grep (format "%s \"%s\" %s" grep-command word
                       (s-join " "  (mapcar (lambda (x) (format "\"%s\" " x)) files))))))


     (global-set-key "\C-cu" 'dlp-grep)

     (autoload 'ioccur "ioccur"
       "점진적 occur" t)


     (defun grep-word (word &optional case-senstive )
       "현제커서 위치의 단어를 검색한다."
       (interactive
        (list (read-string "grep 찾을 단어: " (current-word)) current-prefix-arg ))

       (let ((directory-name-backup default-directory))

         (if case-senstive
             (setq default-directory
                   (mapconcat (lambda (x) x ) (reverse (cdr (nthcdr case-senstive (reverse (split-string default-directory "/"))))) "/")))
         (grep (format "%s  -E \"%s\" " grep-command word ))
         (setq default-directory directory-name-backup)))



     (defun woccur (word &optional nlines )
       "현제커서 위치의 단어를 OCCUR한다."
       (interactive
        (list (read-string "occur 찾을 단어: " (current-word))
              (prefix-numeric-value current-prefix-arg) ))
       (occur word nlines ))

     (defun occur-region( beg end &optional lines )
       "Check occurence of string which is selected by markejr."
       (interactive "r\nP")
       (occur (buffer-substring-no-properties beg end) lines ))
     (defun occur-compile-region( beg end &optional lines )
       "Check occurence of string which is selected by marker."
       (interactive "r\nP")
       (occur-compile (buffer-substring-no-properties beg end) lines ))


     (defun occur-xml ( regexp &optional nlines)
       "Show all lines matching REGEXP in buffers specified by BUFREGEXP.
         Normally BUFREGEXP matches against each buffer's visited file name,
         but if you specify a prefix argument, it matches against the buffer name.
         See also `multi-occur'."
       (interactive (occur-read-primary-args))
       (occur-1 regexp nlines
                (delq nil (mapcar
                           (lambda (buf)
                             (when (and
                                    (buffer-file-name buf)
                                    (string-match ".*xml" (buffer-file-name buf))) buf))
                           (buffer-list)))))

     (global-set-key "\C-co" 'occur)

     ;; 쓰기 좋은 키 바인딩 입니다.
     ;;(global-set-key "\C-ci" 'isdl-grep)
     ;;(global-set-key (kbd "C-M-,") '(lambda ()  (interactive) (run-scheme "winprojcd")))



     ;; dictionary
     (autoload 'dictionary-search "dictionary"
       "Ask for a word and search it in all dictionaries" t)
     (autoload 'dictionary-match-words "dictionary"
       "Ask for a word and search all matching words in the dictionaries" t)
     (autoload 'dictionary-lookup-definition "dictionary"
       "Unconditionally lookup the word at point." t)
     (autoload 'dictionary "dictionary"
       "Create a new dictionary buffer" t)
     (autoload 'dictionary-mouse-popup-matching-words "dictionary"
       "Display entries matching the word at the cursor" t)
     (autoload 'dictionary-popup-matching-words "dictionary"
       "Display entries matching the word at the point" t)
     (autoload 'dictionary-tooltip-mode "dictionary"
       "Display tooltips for the current word" t)
     (autoload 'global-dictionary-tooltip-mode "dictionary"
       "Enable/disable dictionary-tooltip-mode for all buffers" t)
     ;; 사전기능을 사용
     (require 'dictionary)

     (global-set-key "\C-ci" 'woccur)
     (global-set-key "\C-cu" 'grep-word)
     (global-set-key "\C-cs" 'dictionary-search)
     (global-set-key "\C-cm" 'dictionary-match-words)


     (require 'misearch)

     (defun misearch-next-buffer (buffer wrap)
       (catch 'found
         (let ((mode (buffer-local-value 'major-mode buffer)))
           (dolist (next-buffer (if isearch-forward
                                    (cdr (buffer-list))
                                  (reverse (cdr (buffer-list)))))
             (when (eq mode (buffer-local-value 'major-mode next-buffer))
               (throw 'found next-buffer))))))

     (defun toggle-misearch ()
       (interactive)
       (if (equal multi-isearch-next-buffer-function nil)
           (setq multi-isearch-next-buffer-function 'misearch-next-buffer)
         (setq multi-isearch-next-buffer-function nil)))



     ;;ISEARCH HOOK;;(require 'thingatpt)
     ;;ISEARCH HOOK;;
     ;;ISEARCH HOOK;;(defun my-isearch-yank-word-or-char-from-beginning ()
     ;;ISEARCH HOOK;;  "Move to beginning of word before yanking word in isearch-mode."
     ;;ISEARCH HOOK;;  (interactive)
     ;;ISEARCH HOOK;;  ;; Making this work after a search string is entered by user
     ;;ISEARCH HOOK;;  ;; is too hard to do, so work only when search string is empty.
     ;;ISEARCH HOOK;;  (if (= 0 (length isearch-string))
     ;;ISEARCH HOOK;;      (beginning-of-thing 'word))
     ;;ISEARCH HOOK;;  (isearch-yank-word-or-char)
     ;;ISEARCH HOOK;;  ;; Revert to 'isearch-yank-word-or-char for subsequent calls
     ;;ISEARCH HOOK;;  (substitute-key-definition 'my-isearch-yank-word-or-char-from-beginning
     ;;ISEARCH HOOK;;			     'isearch-yank-word-or-char
     ;;ISEARCH HOOK;;			     isearch-mode-map))
     ;;ISEARCH HOOK;;
     ;;ISEARCH HOOK;;(add-hook 'isearch-mode-hook
     ;;ISEARCH HOOK;; (lambda ()
     ;;ISEARCH HOOK;;   "Activate my customized Isearch word yank command."
     ;;ISEARCH HOOK;;   (substitute-key-definition 'isearch-yank-word-or-char
     ;;ISEARCH HOOK;;			      'my-isearch-yank-word-or-char-from-beginning
     ;;ISEARCH HOOK;;			      isearch-mode-map)))


         ;;; GNU GLOBAL incremental update It’s possible to use GNU GLOBAL
         ;;; incremental update feature in after-save-hook in order to keep
         ;;; synchronized the changes you made in source code and gtags
         ;;; databasc:

     (append-path (fullpath "../../global/bin/"))
     (append-path (fullpath "../../cscope-15.8a/"))

     (require 'xcscope)

     ;; I-search with initial contents.
     ;; original sourcc: http://platypope.org/blog/2007/8/5/a-compendium-of-awesomeness
     (defvar isearch-initial-string nil)

     (defun isearch-set-initial-string ()
       (remove-hook 'isearch-mode-hook 'isearch-set-initial-string)
       (setq isearch-string isearch-initial-string)
       (isearch-search-and-update))

     (defun isearch-forward-at-point (&optional regexp-p no-recursive-edit)
       "Interactive search forward for the symbol at point."
       (interactive "P\np")
       (if regexp-p (isearch-forward regexp-p no-recursive-edit)
         (let* ((end (progn (skip-syntax-forward "w_") (point)))
                (begin (progn (skip-syntax-backward "w_") (point))))
           (if (eq begin end)
               (isearch-forward regexp-p no-recursive-edit)
             (setq isearch-initial-string (buffer-substring begin end))
             (add-hook 'isearch-mode-hook 'isearch-set-initial-string)
             (isearch-forward regexp-p no-recursive-edit)))))




     ;; Uncomment the below line to use eww (Emacs Web Wowser)
     ;; (setq xah-lookup-browser-function 'eww)

     ;;(req-package xah-lookup
     ;;  :force t
     ;;  :config
     ;;  (defun xah-lookup-cppreference (&optional word)
     ;;    "Lookup definition of current word or text selection in URL."
     ;;    (interactive)
     ;;    (xah-lookup-word-on-internet
     ;;     word
     ;;     ;; Use � as a placeholder in the query URL.
     ;;     "http://en.cppreference.com/mwiki/index.php?search=�"
     ;;     xah-lookup-browser-function)))
   #+END_SRC

   #+RESULTS:
   : t

** gtag
   #+BEGIN_SRC emacs-lisp :tangle  no
     (remove-hook 'c++-mode-hook 'semantic-default-c-setup)
     (add-hook 'c++-mode-hook '(lambda () (gtags-mode 1)))
     (setq gtags-mode-hook '(lambda () (setq gtags-pop-delete t) (setq gtags-path-style 'relative)))
     (setq gtags-select-mode-hook '(lambda () (setq hl-line-face 'underline) (hl-line-mode 1)))

     (require 'gtags)
     (w32-unix-eval
      ((setq gtags-global-command (file-truename (fullpath "../../global/bin/global.exe"))))
      ((setq gtags-global-command  "/usr/local/misctools/default/bin/global")))




     (defun gtag ()
       (interactive)
       (let ((default-directory (read-directory-name "GTAG를 생성·갱신 할 폴더 :")))
         (if (file-exists-p "GTAGS")
             (async-shell-command  (concat gtags-global-command " -u"))
           (async-shell-command "gtags"))))

     (defun ww-next-gtag ()
       "Find next matching tag, for GTAGS."
       (interactive)
       (let ((latest-gtags-buffer
              (car (delq nil  (mapcar (lambda (x) (and (string-match "GTAGS SELECT" (buffer-name x)) (buffer-name x)) )
                                      (buffer-list)) ))))
         (cond (latest-gtags-buffer
                (switch-to-buffer latest-gtags-buffer)
                (forward-line)
                (gtags-select-it nil))
               ) ))


     (defun find-tag-dwim(&optional prefix)
       "union of `find-tag' alternatives. decides upon major-mode"
       (interactive "P")
       (if (and (boundp 'gtags-mode)
                gtags-mode)
           (progn
             (ring-insert find-tag-marker-ring (point-marker))
             (call-interactively (if prefix   'ww-next-gtag 'gtags-find-tag)))
         (if (and (boundp 'cscope-minor-mode)
                  cscope-minor-mode)
             (progn
               (ring-insert find-tag-marker-ring (point-marker))
               (call-interactively
                (if prefix
                    'cscope-find-this-symbol
                  'cscope-find-global-definition-no-prompting
                  )))
           (call-interactively 'find-tag))))

     (substitute-key-definition 'find-tag 'find-tag-dwim  global-map)

     (global-set-key
      (kbd "H-.")
      '(lambda (&optional prefix)
         (interactive "P")
         (call-interactively (if prefix  'gtags-find-tag ;; H-, find all usages of symbol.
                               'ww-next-gtag)) ;; H-. find all references of tag
         ))

     (global-set-key
      (kbd "H-,")
      '(lambda (&optional prefix)
         (interactive "P")
         (call-interactively (if prefix  'gtags-find-symbol ;; H-, find all usages of symbol.
                               'gtags-find-rtag)) ;; H-. find all references of tag
         ))


     ;;deprecatedby-gtag.el gtag-mode;;(defun gtags-root-dir ()
     ;;deprecatedby-gtag.el gtag-mode;;  "Returns GTAGS root directory or nil if doesn't exist."
     ;;deprecatedby-gtag.el gtag-mode;;  (with-temp-buffer
     ;;deprecatedby-gtag.el gtag-mode;;    (if (zerop (call-process gtags-global-command nil t nil "-pr"))
     ;;deprecatedby-gtag.el gtag-mode;;        (buffer-substring (point-min) (1- (point-max)))
     ;;deprecatedby-gtag.el gtag-mode;;      nil)))
     ;;deprecatedby-gtag.el gtag-mode;;
     ;;deprecatedby-gtag.el gtag-mode;;(defun gtags-update ()
     ;;deprecatedby-gtag.el gtag-mode;;  "Make GTAGS incremental update"
     ;;deprecatedby-gtag.el gtag-mode;;  (call-process gtags-global-command nil nil nil "-u"))
     ;;deprecatedby-gtag.el gtag-mode;;
     ;;deprecatedby-gtag.el gtag-mode;;(defun gtags-update-hook ()
     ;;deprecatedby-gtag.el gtag-mode;;  (when (gtags-root-dir)
     ;;deprecatedby-gtag.el gtag-mode;;    (gtags-update)))
     ;;deprecatedby-gtag.el gtag-mode;;
     ;;deprecatedby-gtag.el gtag-mode;;;;(add-hook 'after-save-hook #'gtags-update-hook)
     ;;deprecatedby-gtag.el gtag-mode;;
     ;;deprecatedby-gtag.el gtag-mode;;;;;GNU GLOBAL update for a single file
     ;;deprecatedby-gtag.el gtag-mode;;;;;
     ;;deprecatedby-gtag.el gtag-mode;;;;;For projects with a huge amount of files, “global -u” can take a
     ;;deprecatedby-gtag.el gtag-mode;;;;;very long time to complete. For changes in a single file, we can
     ;;deprecatedby-gtag.el gtag-mode;;;;;update the tags with “gtags --single-update” and do it in the
     ;;deprecatedby-gtag.el gtag-mode;;;;;background:
     ;;deprecatedby-gtag.el gtag-mode;;
     ;;deprecatedby-gtag.el gtag-mode;;
     ;;deprecatedby-gtag.el gtag-mode;;(defun gtags-update-single(filename)
     ;;deprecatedby-gtag.el gtag-mode;;  "Update Gtags database for changes in a single file"
     ;;deprecatedby-gtag.el gtag-mode;;  (interactive)
     ;;deprecatedby-gtag.el gtag-mode;;  (start-process "update-gtags" "update-gtags" "bash" "-c" (concat "cd " (gtags-root-dir) " ; gtags --single-update " filename )))
     ;;deprecatedby-gtag.el gtag-mode;;
     ;;deprecatedby-gtag.el gtag-mode;;(defun gtags-update-current-file()
     ;;deprecatedby-gtag.el gtag-mode;;  (interactive)
     ;;deprecatedby-gtag.el gtag-mode;;  (defvar filename)
     ;;deprecatedby-gtag.el gtag-mode;;  (setq filename (replace-regexp-in-string (gtags-root-dir) "." (buffer-file-name (current-buffer))))
     ;;deprecatedby-gtag.el gtag-mode;;  (gtags-update-single filename)
     ;;deprecatedby-gtag.el gtag-mode;;  (message "Gtags updated for %s" filename))
     ;;deprecatedby-gtag.el gtag-mode;;
     ;;deprecatedby-gtag.el gtag-mode;;(defun gtags-update-hook()
     ;;deprecatedby-gtag.el gtag-mode;;  "Update GTAGS file incrementally upon saving a file"
     ;;deprecatedby-gtag.el gtag-mode;;  (when gtags-mode
     ;;deprecatedby-gtag.el gtag-mode;;    (when (gtags-root-dir)
     ;;deprecatedby-gtag.el gtag-mode;;      (gtags-update-current-file))))
     ;;deprecatedby-gtag.el gtag-mode;;
     ;;deprecatedby-gtag.el gtag-mode;;;;(add-hook 'after-save-hook 'gtags-update-hook)


   #+END_SRC

   #+RESULTS:
   | lambda | (&optional prefix) | (interactive P) | (call-interactively (if prefix (quote gtags-find-symbol) (quote gtags-find-rtag))) |

* edit

** unify region

   #+BEGIN_SRC emacs-lisp
     (defun uniq-region ()
       "remove duplicate adjacent lines in the given region"
       (interactive)
       (save-excursion
         (save-restriction
           (narrow-to-region (region-beginning) (region-end))
           (strip-trailing-whitespace (point-min) (point-max))
           (let (( contents (s-split "\n" (buffer-substring-no-properties (point-min) (point-max))))
                 ( unified nil)
                 )
             (dolist (it contents (setf unified  (reverse  unified)))
               (if (not  (member it unified))
                   (setf unified (cons it unified) )))
             (delete-region (point-min) (point-max))
             (insert (s-join "\n" unified))))))



     ;; (defun uniquify-region ()
     ;;   "remove duplicate adjacent lines in the given region"
     ;;   (interactive)
     ;;   (save-excursion
     ;;     (save-restriction
     ;;       (narrow-to-region (region-beginning) (region-end))
     ;;       (sort-lines nil (point-min) (point-max))
     ;;       (beginning-of-buffer)
     ;;       (while (re-search-forward "\\(.*\n\\)\\1+" nil t)
     ;;         (replace-match "\\1" nil nil))
     ;;       (widen)
     ;;       nil)))

     (defun find-duplicate-lines (&optional insertp interp)
       (interactive "i\np")
       (let ((max-pon (line-number-at-pos (point-max)))
             (gather-dups))
         (while (< (line-number-at-pos) max-pon) (= (forward-line) 0)
                (let ((this-line (buffer-substring-no-properties (line-beginning-position 1) (line-end-position 1)))
                      (next-line (buffer-substring-no-properties (line-beginning-position 2) (line-end-position 2))))
                  (when  (equal this-line next-line)  (setq gather-dups (cons this-line gather-dups)))))
         (if (or insertp interp)
             (save-excursion  (princ gather-dups (current-buffer)))
           gather-dups)))

     (defun occur-duplicate-lines ()
       (interactive)
       (occur "\\(.*\n\\)\\1+"))


     ;; 중복 라인을 제거한다.
     (defun uniquify-all-lines-region (start end)
       "Find duplicate lines in region START to END keeping first occurrence."
       (interactive "*r")
       (save-excursion
         (let ((end (copy-marker end)))
           (while
               (progn
                 (goto-char start)
                 (re-search-forward "^\\(.*\\)\n\\(\\(.*\n\\)*\\)\\1\n" end t))
             (replace-match "\\1\n\\2")))))

   #+END_SRC

   #+RESULTS:
   : uniquify-all-lines-region


** sorting
#+BEGIN_SRC emacs-lisp

  (defun csortregion ()
    "remove duplicate adjacent lines in the given region"
    (interactive)
    (save-excursion
      (save-restriction
        (narrow-to-region (region-beginning) (region-end))
        (strip-trailing-whitespace (point-min) (point-max))
        (let (( contents
                (sort  (s-split "\n" (buffer-substring-no-properties (point-min) (point-max))) #'string-collate-lessp)))

          (delete-region (point-min) (point-max))
          (insert (s-join "\n" contents))))))


  (require 'sort-group-lines)
#+END_SRC
** eol marker
   #+BEGIN_SRC emacs-lisp
;; Useful function:
;; convert dos (^M) end of line to unix end of line
;; DOS CR-LF
;; UNIX LF


(defun dos2unix ()
  (interactive)
  (set-buffer-file-coding-system 'undecided-unix)
  (goto-char (point-min))
  (while (search-forward-regexp "$" nil t)
    (replace-match "")))


;versa vice
(defun unix2dos ()
  (interactive)
  (set-buffer-file-coding-system 'undecided-dos)
  (goto-char (point-min))
  (while (search-forward-regexp "$" nil t)
    (replace-match "")))
   #+END_SRC

** register


   #+BEGIN_SRC emacs-lisp
     ;; REGISTER 관련

     (defun insert-a ()
       (interactive)
       (save-excursion  (yank))
       (insert-register ?a))
   #+END_SRC

   #+RESULTS:
   : insert-a

** kill advice

   #+BEGIN_SRC emacs-lisp :tangle no

(defadvice kill-ring-save (before slick-copy activate compile)
  "When called interactively with no active region, copy the current line."
  (interactive
   (if mark-active
       (list (region-beginning) (region-end))
     (progn
       (message "Current line is copied.")
       (list (line-beginning-position) (line-beginning-position 2)) ) ) ))

(defadvice kill-region (before slick-copy activate compile)
  "When called interactively with no active region, cut the current line."
  (interactive
   (if mark-active
       (list (region-beginning) (region-end))
     (list (line-beginning-position) (line-beginning-position 2)) ) ) )
   #+END_SRC

** rectangle
   #+BEGIN_SRC emacs-lisp
     ;; 오른쪽에 일괄적으로 주석달 때 사용한다.
     (leaf rect
       :require t
       :config
       (defun string-right (beg end str)
         (interactive
          (progn (barf-if-buffer-read-only)
                 (list
                  (region-beginning)
                  (region-end)
                  (read-string (format "String insert rectangle (default %s): "
                                       (or (car string-rectangle-history) ""))
                               nil 'string-rectangle-history
                               (car string-rectangle-history)))))
         (save-excursion
           (save-restriction
             (if (> end beg)
                 (narrow-to-region
                  (progn (goto-char beg) (point-at-bol))
                  (progn (goto-char end) (point-at-eol)))
               (narrow-to-region
                (progn (goto-char end) (point-at-bol))
                (progn (goto-char beg) (point-at-eol))))
             (beginning-of-buffer)
             (end-of-line)
             (let ((col (current-column)))
               (while (not (eobp))
                 (end-of-line 2)
                 (if (> (current-column) col) (setf col (current-column))))
               (beginning-of-buffer)
               (while (not (eobp))
                 (move-to-column col t)
                 (insert str)
                 (forward-line 1)))))))

     (general-define-key
      :keymaps 'ctl-x-r-map
      "h" 'string-right)
   #+END_SRC

   #+RESULTS:

** align

   #+BEGIN_SRC emacs-lisp
(defun set-middle-m (start end &optional s)
  (interactive "r\ns구분자 : ")
  (save-excursion
    (let ((result '()))
      (goto-char start)
      (while (not (equal nil (re-search-forward "[A-Za-z0-9] +[A-Za-z]" end t) ))
        (backward-char)
        (setf result (cons (list (point-at-bol) (point)) result )))

      (setf result (reverse result))

      (let ((middle (apply #'max (mapcar (lambda (x) (- (cadr x ) (car x ))) result ))   ))
        (goto-char start)
        (while (not (equal nil (re-search-forward "[A-Za-z0-9] +[A-Za-z]" end t)))
          (backward-char)
          (let ((pos (car result)))
            (setf result (cdr result))
            (backward-char 1)
            (insert-before-markers (make-string  (- middle (- (cadr pos ) (car pos ))) ?\s))

            (move-end-of-line nil )))))))

(defun set-middle (start end  s)
  (interactive "r\ns구분자 정규식: ")
  (save-excursion
    (let ((result '()))
      (goto-char start)
      (while (not (equal nil (search-forward-regexp s end t) ))
        (message (format "%d" (point-at-bol)))
        (setf result (cons (list (point-at-bol) (match-beginning 0)) result ))
        (move-end-of-line nil ))
      (setf result (reverse result))
      (let ((middle (apply #'max (mapcar (lambda (x) (- (cadr x ) (car x ))) result ))   ))
        (goto-char start)
        (while (not (equal nil (search-forward-regexp s end t) ))
          (let ((pos (car result)))
            (message (format "%d" (point-at-bol)))
            (setf result (cdr result))
            ;;(backward-char 1)
            (goto-char (match-beginning 0))
            (insert-before-markers (make-string  (- middle (- (cadr pos ) (car pos ))) ?\s))
            (setf end (+ end (- middle (- (cadr pos ) (car pos )))))
            (move-end-of-line nil )))))))

(global-set-key (kbd "C-=") 'set-middle)

   #+END_SRC

** insert

   #+BEGIN_SRC emacs-lisp

;; 날짜 삽입가능
(defun insert-date ( )
  "편집 시점의 날짜를 삽입한다."
  (interactive)
  (insert (format-time-string  "%Y년 %m월 %d일 %V주 %a요일 %p %I시 %M분 %S초")))


;; 다음은 간단히 사용할 수 있는 함수이다.

(defun cmt ()
	(interactive)
	(insert "////////////////////////////////////////////////////////////////////////\n")
	(insert "//\t\n")
	(insert "////////////////////////////////////////////////////////////////////////")
	(previous-line 1)
	(end-of-line) )


(defun insertstring()
  (interactive)
  (insert " : \"\"" ) (backward-char 1 ))

(defun emacs-header ()
  (interactive)
  (narrow-to-region 1 1 )
  (insert "-*-modc: C; coding: utf-8; buffer-read-only: t;-*-")
  (comment-region (point-min) (point-max))
  (newline-and-indent)
  (widen)
  )

   #+END_SRC

** at point operation

   #+BEGIN_SRC emacs-lisp
;; https://gist.github.com/Wilfred/4715345

(defun dwim-at-point ()
  "If there's an active selection, return that. Otherwise, get
the symbol at point."
  (if (use-region-p)
      (buffer-substring-no-properties (region-beginning) (region-end))
    (if (symbol-at-point)
        (symbol-name (symbol-at-point)))))

;; todo: investigate whether we're reinventing the wheel, since query-replace-history already exists

(defvar replace-at-point/history nil)

(defun replace-at-point (from-string to-string)
  "Replace occurrences of FROM-STRING with TO-STRING, defaulting
to the symbol at point."
  (interactive (list
                (read-from-minibuffer "Replace what? " (dwim-at-point))
                (read-from-minibuffer "With what? " (if (equal kill-ring nil) (dwim-at-point) (car kill-ring)))))


  (forward-symbol -1)

  (add-to-list 'replace-at-point/history
               (list (format "%s -> %s" from-string to-string)
                     from-string to-string))
  (perform-replace from-string to-string nil nil nil))

(eval-when-compile (require 'cl)) ; first, second

(defun replace-repeat ()
  (interactive)
  (unless replace-at-point/history
    (error "You need to have done query-replace-at-point first"))
  (let* ((choices (mapcar 'first query-replace/history))
         (choice (ido-completing-read "Previous replaces: " choices))
         (from-with-to (cdr (assoc choice replace-at-point/history)))
         (from-string (first from-with-to))
         (to-string (second from-with-to)))
    (perform-replace from-string to-string nil nil nil)))
   #+END_SRC

** copy
   #+BEGIN_SRC emacs-lisp
     (defun copy-rectangle-to-clipboard (p1 p2)
       "Copy region as column (rectangle) to operating system's clipboard.
     This command will also put the text in register 0. (sec: `copy-to-register')"
       (interactive "r")
       (let ((x-select-enable-clipboard t))
         (copy-rectangle-to-register ?0 p1 p2)
         (kill-new
          (with-temp-buffer
            (insert-register ?0)
            (delete-trailing-whitespace (point-min) (point-max))
            (buffer-string) ))))

   #+END_SRC

** change

   #+BEGIN_SRC emacs-lisp

     (defun upcase-symbol (syms)
       (interactive)
       (mapcar
        (lambda (x)
          (replace-string
           (symbol-name x )
           (upcase (symbol-name x )) t (point-min) (point-max )))
        syms ))


     (defun strip-trailing-whitespace (b e )
       "strips whitespace from the end of all the lines in the buffer;
     equivalent to (`replace-regexp' \" \\t+$\" \"\")"
       (save-excursion
         (save-restriction
           (narrow-to-region b e)
           (goto-char (point-min))
           (while (re-search-forward "[ \t]+$" nil t) (replace-match "" nil t))
           nil)))

     (defun stw ()
       (interactive)
       (if (region-active-p)
           (strip-trailing-whitespace (region-beginning) (region-end))
         (strip-trailing-whitespace (point-min) (point-max))))
     ;; 다음을 이용하여 한 단어를 capitalize 할 수 있다.
     (defun ucap ( )
       (interactive)
       (let ((start (point))
             (end (progn (forward-sexp) (point))))
         (replace-string "_" " " nil start end )
         (capitalize-region start end )
         (replace-string " " "" nil start end )))

     (defun swap-regions (beg1 end1 beg2 end2)
       "Swap region between BEG1 and END1 with region BEG2 and END2.

     For the first region, mark the first region and set mark at
     point.  The second region only needs to be marked normally.
     Again, set the mark at the beginning and end of the first region,
     then mark the second region with mark and point.

     The order of the two regions in the buffer doesn't matter.
     Either one can precede the other.  However, the regions can not
     be swapped if they overlap.

     All arguments can either be a number for a position in the buffer
     or a marker."
       (interactive
        (if (< (length mark-ring) 2)
            (error "Not enough in mark-ring to swap a region")
          (let ((region (list (region-beginning) (region-end)))
                (marks (sort (list (marker-position (car mark-ring))
                                   (marker-position (cadr mark-ring)))
                             '<)))
            (if (< (car region) (car marks))
                (append region marks)
              (append marks region)))))
       (if (or (and (< beg2 beg1) (< beg1 end2))
               (and (< beg1 beg2) (< beg2 end1)))
           (error "Unable to swap overlapping regions")
         (save-excursion
           (insert
            (prog1 (delete-and-extract-region beg2 end2)
              (goto-char beg2)
              (insert
               (delete-and-extract-region beg1 end1))
              (goto-char beg1))))))

     (defun swap-text (str1 str2 beg end)
       "Changes all STR1 to STR2 and all STR2 to STR1 in beg/end region."
       (interactive "sString A: \nsString B: \nr")
       (if mark-active
           (setq deactivate-mark t)
         (setq beg (point-min) end (point-max)))
       (goto-char beg)
       (while (re-search-forward
   	    (concat "\\(?:\\b\\(" (regexp-quote str1) "\\)\\|\\("
   		    (regexp-quote str2) "\\)\\b\\)") end t)
         (if (match-string 1)
   	  (replace-match str2 t t)
           (replace-match str1 t t))))

     (defun forward-delete ( &optional x)
       (interactive "p")
       (or x (setf x 1 ))
       (forward-sexp x )
       (kill-line)
       (next-line)
       (move-beginning-of-line nil))


     (defun switch-equal (begin end )
       (interactive "r" )
       (replace-regexp " *\\(.*\\) *= *\\(.*\\) *;" "\\2 = \\1 ;" nil begin end ))

     (defun dongif (beg end)
       "Changes all STR1 to STR2 and all STR2 to STR1 in beg/end region."
       (interactive "r")
       (if mark-active
           (setq deactivate-mark t)
         (setq beg (point-min) end (point-max)))
       (replace-regexp " *\\([0-9a-zA-Z_]+\\) * \\([=!]\\)= *\\([0-9a-zA-Z_]+\\) *" "\\3 \\2=\\1" nil beg end ))


   #+END_SRC

** tab setting

   #+BEGIN_SRC emacs-lisp

;;;
;;;
;;; ※ 변수 설정
;;;
;;;
(setq tab-stop-list
      '(2 4 8 12 16 20 24 28 32 36 40 44 48 52 56 60 64 68 72 ))
;; 탭을 공백으로 만들 수 있다.
(setq-default indent-tabs-mode nil )
(setq-default tab-width 2 )
   #+END_SRC

** read only function

   #+BEGIN_SRC emacs-lisp
(defun make-buffer-readonly () (read-only-mode 1 ))

(defun global-read-only ( &optional v)
  (interactive
   (list (prefix-numeric-value current-prefix-arg) ))
  (if (= 1 v)
      (progn
        (remove-hook 'find-file-hook #'make-buffer-readonly)
        (add-hook 'find-file-hook #'make-buffer-readonly))
    (remove-hook 'find-file-hook #'make-buffer-readonly)))


   #+END_SRC

** SDD
   #+BEGIN_SRC emacs-lisp

;;SDD;;(defun ib () (interactive)  (insert "default : break; "))
;;SDD;;(defun sdd () (interactive) (insert ( format "//@@@ " )) (kill-new "//@@@\n"))
;;SDD;;
;;SDD;;(global-set-key [f12] 'sdd )
;;SDD;;
;;SDD;;(defun ifsdd ()
;;SDD;;  (interactive)
;;SDD;;  (insert "
;;SDD;;  //@@@ if( ){
;;SDD;;  //@@@   return ;
;;SDD;;  //@@@ }
;;SDD;;"))
;;SDD;;
;;SDD;;(global-set-key [f11] 'ifsdd )

(defun sdd-cmt (start end )
 (interactive "r ")
 (let ((proto (buffer-substring-no-properties start end) ))
  (insert (string-replace-match "[(),]" proto " " t t ))))

(defun sdd-header (start end )
 (interactive "r ")
 (hl-line-mode t )
 (save-excursion
   (save-restriction
     (narrow-to-region start end)
     (replace-string ";" "; //@@@ " nil (point-min) (point-max))
     (set-middle (point-min) (point-max) "//@@@")
     (widen))))

(defun sdd-single ()
 (interactive )
 (insert "//@@@ 클래스의 유일한 인스턴스를 리턴하는 클래스함수 "))

(defun insert-function-table ()
  (interactive)
  (insert "<함수테이블> <내용>" ))

(defun insert-cross-reference ()
  (interactive)
  (insert "# #" ) (backward-char 1))

(defun insert-cdata ()
  (interactive)
  (insert " <![CDATA[]]>" ))

(global-set-key "\C-ct" 'insert-function-table )
(global-set-key "\C-cj" 'insert-cross-reference )


(defun xmltable ()
  (interactive)
  (replace-string "기능	" "")
  (beginning-of-buffer)
  (replace-string "함수명	" "")
  (beginning-of-buffer)
  (replace-string "입력	" "")
  (beginning-of-buffer)
  (replace-string "출력	" "")
  (beginning-of-buffer)
  (replace-string "예외 처리
" "")
  (beginning-of-buffer)
  (replace-string "처리
" "")
  (beginning-of-buffer)
  (replace-string "비고
" ""))


   #+END_SRC

** move , selection, hide

   #+BEGIN_SRC emacs-lisp
     (defun backward-symbol (arg)
       (interactive "p")
       (forward-symbol (* -1 arg )))

     (defun toggle-line-move-visual ()
       "Toggle behavior of up/down arrow key, by visual line vs logical line."
       (interactive)
       (if line-move-visual
           (setq line-move-visual nil)
         (setq line-move-visual t))
       )

     (leaf expand-region :ensure t)

     (leaf mwim
       :ensure t
       :config
       (global-set-key (kbd "<home>") 'mwim-beginning-of-code-or-line)
       (global-set-key (kbd "<end>")  'mwim-end-of-code-or-line))

     (leaf delsel
       :ensure t
       :global-minor-mode delete-selection-mode)

     (require 'hide-region+)

   #+END_SRC

** auto complete

   #+BEGIN_SRC emacs-lisp :tangle no
     ;;; _ AUTO COMPLETE
     (leaf auto-complete
       :ensure t
       :bind ((:ac-completing-map
               ((kbd "C-j") . ac-next)
               ((kbd "C-p") . ac-previous)
               ((kbd "C-o") . ac-expand)))) 
   #+END_SRC

   #+RESULTS:
   : auto-complete

** file change
   #+BEGIN_SRC emacs-lisp

(defun byte-compile-current-buffer ()
  "`byte-compile' current buffer if it's emacs-lisp-mode and compiled file exists."
  (interactive)
  (when (and (eq major-mode 'emacs-lisp-mode)
             (file-exists-p (byte-compile-dest-file buffer-file-name)))
    (byte-compile-file buffer-file-name)))

;;;_ REVERT BUFFER http://www.emacswiki.org/emacs/RevertBuffer
(global-auto-revert-mode 1)

   #+END_SRC




** kill/copy dwim

   #+BEGIN_SRC emacs-lisp
     ;;;
     ;;;
     ;;; ※ 유용한 함수 정의
     ;;;
     ;;;

     (defun get-text-block-positions ()
       "Return a vector [begin end] of text block,
                Return a vector [begin end] that's the begin and end positions of text block the cursor is in.
               Text block is group of lines separated by blank lines.

               URL `http://ergoemacs.org/emacs/elisp_get_text_block.html'
               Version 2020-06-10"
       (interactive)
       (let ($p1 $p2)
         (save-excursion
           (if (re-search-backward "\n[ \t]*\n" nil "move")
               (progn (re-search-forward "\n[ \t]*\n")
                      (setq $p1 (point)))
             (setq $p1 (point)))
           (if (re-search-forward "\n[ \t]*\n" nil "move")
               (progn (re-search-backward "\n[ \t]*\n")
                      (setq $p2 (point)))
             (setq $p2 (point))))
         (message "%s" (vector $p1 $p2))
         (vector $p1 $p2)))

     (defun org-subtree-position ()
       (interactive)
       (org-preserve-local-variables
        (let (beg end (beg0 (point)))

          (org-back-to-heading nil)    ; take what looks like a subtree
          (next-line)
          (setq beg (point))
          (org-end-of-subtree t t)

          ;; Include the end of an inlinetask
          (when (and (featurep 'org-inlinetask)
                     (looking-at-p (concat (org-inlinetask-outline-regexp)
                                           "END[ \t]*$")))
            (end-of-line))
          (setq end (point))
          (goto-char beg0)
          (vector beg end)
          )))


     (defun unindent-dwim (&optional count-arg)
       "Keeps relative spacing in the region.  Unindents to the next multiple of the current tab-width"
       (interactive)
       (let ((deactivate-mark nil)
             (beg (or (and mark-active (region-beginning)) (line-beginning-position)))
             (end (or (and mark-active (region-end)) (line-end-position)))
             (min-indentation)
             (count (or count-arg 1)))
         (save-excursion
           (goto-char beg)
           (while (< (point) end)
             (add-to-list 'min-indentation (current-indentation))
             (forward-line)))
         (if (< 0 count)
             (if (not (< 0 (apply 'min min-indentation)))
                 (error "Can't indent any more.  Try `indent-rigidly` with a negative arg.")))
         (if (> 0 count)
             (indent-rigidly beg end (* (- 0 tab-width) count))
           (let (
                 (indent-amount
                  (apply 'min (mapcar (lambda (x) (- 0 (mod x tab-width))) min-indentation))))
             (indent-rigidly beg end (or
                                      (and (< indent-amount 0) indent-amount)
                                      (* (or count 1) (- 0 tab-width))))))))
     (defun strip-left (beg end)
       "Keeps relative spacing in the region.  Unindents to the next multiple of the current tab-width"
       (interactive (list (point) (mark)))

       (let ((min-indentation)
             (indent 0))
         (save-excursion
           (save-restriction
             (narrow-to-region beg end)
             (goto-char  (point-min))
             (while (< (point) (point-max))
               (add-to-list 'min-indentation (current-indentation))
               (forward-line))
             (setf indent  (apply 'min min-indentation))
             (goto-char  (point-min))
             (while (< (point) (point-max))
               (delete-char indent)
               (forward-line))))))


               ;;; 영역이 있으면 KILL, 아니면 라인카피
     (defun kill-region-dwim (beg end )
       (interactive (list (point) (mark)))
       (if mark-active (kill-region beg end) (dongil/copy-line)))

     (defun copy-region-dwim (beg end )
       (interactive (list (point) (mark)))
       (if mark-active (kill-ring-region beg end) (dongil/copy-line)))

     (defun copy-region-strip-left (beginning end)
       (interactive (list (point) (mark)))
       (let ((buf (current-buffer))
             (indent nil))
         (if mark-active
             (deactivate-mark)
           (let ((block (if (equal major-mode 'org-mode) (org-subtree-position) (get-text-block-positions))))
             (setf beginning (aref block 0))
             (setf end (aref block 1))))
         (with-temp-buffer
           (setq indent-tabs-mode nil)
           (insert-buffer-substring-no-properties buf beginning end)
           (delete-trailing-whitespace)
           (strip-left (point-min) (point-max))
           (kill-new (s-trim-right (buffer-substring-no-properties (point-min) (point-max))))
           )))

     (defun dwim-copy-region-as-kill (beginning end)
       "Like `copy-region-as-kill' or, with prefix arg, `copy-region-unindented'."
       (interactive "P\nr")
       (if pad
           (copy-region-strip-left beginning end)
         (kill-region-dwim beginning end)))

     (global-set-key [remap kill-region] 'dwim-copy-region-as-kill)
   #+END_SRC

   #+RESULTS:
   : dwim-copy-region-as-kill


* coding standard
** header
   #+BEGIN_SRC emacs-lisp

 ;; 삼성탈래스 코딩 스탠다드

 (defun ins-body-header()
   (interactive)
   (insert "/////////////////////////////////////////////////////////////////\n")
   (insert "// Subsystem   :\n" )
   (insert "// Class       :\n")
   (insert (format "// File        : %s\n" (buffer-name)))
   (insert "// Description :\n")
   (insert "// See Also    : \n")
   (insert "// Author      : 김동일\n")
   (insert "// Dept.       : 시스템팀\n")
   (insert (format "// Created     : %s\n" (date-string)))
   (insert "// Version     :\n")
   (insert "// Revision history :\n")
   (insert "// date revised by revised information:\n")
   (insert "// ========== ============ =========================\n")
   (insert "// 2001/12/26\n")
   (insert "///////////////////////////////////////////////////////////////////////\n"))


 (defun ins-inc-header()
   (interactive)
   ( insert "/////////////////////////////////////////////////////////////////\n")
   ( insert "// Subsystem    : \n")
   ( insert "// Class        : \n")
   ( insert (format "// File         : %s\n" (buffer-name)))
   ( insert "// Description  : \n")
   ( insert "// See Also     : \n")
   ( insert "// Author       : 김동일\n")
   ( insert "// Dept.        : 시스템팀\n")
   ( insert (format "// Created      : %s\n" (date-string)))
   ( insert "// Version :\n")
   ( insert "// Revision history : \n")
   ( insert "// date revised by revised information:\n")
   ( insert "// ========== ============ =========================\n")
   ( insert "// 2001/12/26\n")
   ( insert "///////////////////////////////////////////////////////////////////////\n") )

 (defun ins-fun-header()
   (interactive)
   (insert "//////////////////////////////////////////////////////////////////////\n")
   (insert "// Operation       : \n")
   (insert "// Description     : \n")
   (insert "// Pre-conditions  : \n")
   (insert "// Post-conditions : \n")
   (insert "// Exceptions      : \n")
   (insert "//////////////////////////////////////////////////////////////////////\n"))






 ;; ※ Scope Tags
 ;; 인포파일로 확인 할 수 있다.
 ;; +--------------+------------------------------+
 ;; |Scope Tags    |Description                   |
 ;; |              |                              |
 ;; +--------------+------------------------------+
 ;; |g             |Global Scope                  |
 ;; +--------------+------------------------------+
 ;; |gs            |gs Global Static Scope        |
 ;; +--------------+------------------------------+
 ;; |ls            |Local Static Scope            |
 ;; +--------------+------------------------------+
 ;; |z or null     |Auto(Local) Scope ( optional )|
 ;; |              |                              |
 ;; |              |                              |
 ;; +--------------+------------------------------+
 ;;
 ;; ※ Return Type Tags
 ;; +-------------+------------+----------------------------+--------------+
 ;; |category data|normal      |unsigned                    |prointer      |
 ;; |types        |            |                            |              |
 ;; |             |            |                            |              |
 ;; +-------------+------------+----------------------------+--------------+
 ;; |    void     |     v      |             -              |     vp       |
 ;; +-------------+------------+----------------------------+--------------+
 ;; |    int      |     i      |             ui             |     ip       |
 ;; +-------------+------------+----------------------------+--------------+
 ;; |    handle   |     h      |             -              |     hp       |
 ;; +-------------+------------+----------------------------+--------------+
 ;; |    long     |     l      |             ul             |     lp       |
 ;; +-------------+------------+----------------------------+--------------+
 ;; |    float    |     f      |             uf             |     fp       |
 ;; +-------------+------------+----------------------------+--------------+
 ;; |    double   |     d      |             ud             |     dp       |
 ;; +-------------+------------+----------------------------+--------------+
 ;; |    char     |     c      |             uc             |    cp,cpp    |
 ;; +-------------+------------+----------------------------+--------------+
 ;; |    boolean  |     b      |             -              |      n       |
 ;; +-------------+------------+----------------------------+--------------+
 ;; |             |  sz : NULL terminated char string       |              |
 ;; | char string |                                         |              |
 ;; |             +-----------------------------------------+--------------+
 ;; |             |  s : None NULL terminated char string   |              |
 ;; |             |                                         |              |
 ;; +-------------+------------+----------------------------+--------------+
 ;; |    struct   |     st     |              -             |      stp     |
 ;; +-------------+------------+----------------------------+--------------+
 ;; |    union    |     un     |              -             |      unp     |
 ;; +-------------+------------+----------------------------+--------------+
 ;; |    Object   |    obj     |              -             |      objp    |
 ;; +-------------+------------+----------------------------+--------------+
 ;;
 ;; ※ Access Level Control
 ;;
 ;; +-------------+---------------+
 ;; |access level |               |
 ;; |tags         |description    |
 ;; |             |               |
 ;; +-------------+---------------+
 ;; |     b       |   public      |
 ;; +-------------+---------------+
 ;; |     t       |   protected   |
 ;; +-------------+---------------+
 ;; |     p       |   private     |
 ;; +-------------+---------------+
 ;;
 ;; ※ Class Naming Convention
 ;;
 ;; - Naming Convention : <Class Name>[Expt]
 ;; - 위에서 정의한 Class Name은 Default이며, '[Expt]'부분은 Optional
 ;;   부분으로서 만일 해당Class가 ExceptionClass인경우 Class Name 다음에"
 ;;   Expt"라고 명시한다.
 ;; - Class name의 첫글자는 대문자로한다.
 ;; - 여러word로 구성된 ClassName은 각word의 첫글자를 대문자로 나머지는소문자로
 ;;   정의한다.
 ;; - underscore("_")를사용하지않는다.
 ;; - Class name이 약자인 경우에는 모두 대문자로 한다.
 ;;
 ;; ※ Struct Naming Convention
 ;;
 ;;
 ;; - Naming Convention : tag<Struct Name>
 ;; - Struct Name의 첫 글자는 대문자로 한다.
 ;; - 여러 word로 구성된 Struct Name은 각 word의 첫 글자는 대문자로 나머지는 소문자로
 ;;   정의한다.
 ;; - underscore("_")를 사용하지 않는다.
 ;; - Struct Name이 약자인 경우에는 모두 대문자로 한다.
 ;;
 ;; examples) :
 ;; struct tagCustomer
 ;; struct tagOderItem
 ;; struct tagATV
 ;;
 ;; ※ Non-Class Member Function
 ;;
 ;;
 ;; - Naming Convention
 ;;
 ;;   : f_<Return Type Tags><[Debug|Get|Set|Flag|Fact]Funtion Name>
 ;;
 ;; - Debug 관련 Function인 경우 : "Debug"라고 명시한다.
 ;; - Get 관련된 Function인 경우 : "Get"라고 명시한다.
 ;; - Set 관련된 Function인 경우 : "Set"라고 명시한다.
 ;; - Boolean return type의 Function인 경우 : "Flag"라고 명시한다.
 ;; - Factory 관련 Function인 경우 : "Fact"라고 명시한다.
 ;;
 ;; Example :
 ;; f_iGetState(); // int Non-Class Member Function for Get
 ;; f_iSetState(); // int Non-Class Member Function for Set
 ;; f_iDebugState(); // int Non-Class Member Function for Debug
 ;; f_iFactCpuWidget(); // int Non-Class Member Function for Factory
 ;; f_bFlagCpuAlarm(); // boolean Non-Class Member Function
 ;;
 ;; ※ Class Member Function
 ;;
 ;;
 ;; - Naming Convention
 ;;
 ;;   : m_<Return Type Tags><[Debug|Get|Set|Flag|Fact]Funtion Name>
 ;;
 ;; - Debug 관련 Function인 경우 : "Debug"라고 명시한다.
 ;; - Get 관련된 Function인 경우 : "Get"라고 명시한다.
 ;; - Set 관련된 Function인 경우 : "Set"라고 명시한다.
 ;; - Boolean return type의 Function인 경우 : "Flag"라고 명시한다.
 ;; - Factory 관련 Function인 경우 : "Fact"라고 명시한다.
 ;;
 ;; Example :
 ;;
 ;; class NcCPU {
 ;; public :
 ;;     m_iGetState(); // int Class Member Function for Get
 ;;     m_iSetState(); // int Class Member Function for Set
 ;;     m_iDebugState(); // int Class Member Function for Debug
 ;;     m_iFactCpuWidget(); // int Class Member Function for Factory
 ;;     m_bFlagCpuAlarm(); // boolean Class Member Function
 ;; };
 ;;
 ;;
 ;; ※ Non-Class Data Members
 ;;
 ;; - Naming Convention : <Scope Tags>_[k]<Data Type Tags><Data Member Name>
 ;; - 2 단어 이상으로 구성되어 있는 것은 각 word의 첫 글자를 대문자로 하고 나머지는
 ;;    소문자로 구성한다.
 ;; - 만약 Constant인 경우는 "k"라고 명시한다.
 ;;
 ;;
 ;; Example :
 ;;
 ;; int g_iCpuState; // global int Non-Class Data Member
 ;; static int gs_iCpuState; // global static int Non-Class Data Member
 ;; function() {
 ;;     int z_iCpuState;// local int
 ;;     int iCpuValue; // local int
 ;;     const int kiCpuNo = 2; // constant int
 ;; }
 ;;
 ;; ※ Class Data Members
 ;;
 ;; - Naming Convention
 ;;
 ;;     : <Access Level Control Tags>_<Data Type Tags><Data Member Name>
 ;;
 ;; - 2 단어 이상으로 구성되어 있는 것은 각 word의 첫 글자를 대문자로 하고 나머지는
 ;;   소문자로 구성한다.
 ;;
 ;;
 ;; Example :
 ;;
 ;; classNcCpuState : public NcKernelState {
 ;; public :
 ;;     int b_iGetState; // public acccess level & int
 ;; protected :
 ;;     int t_iGetState; // protected access level & int
 ;; private :
 ;;     int p_iGetState; // private access level & int
 ;; }
 ;;
 ;; ※ Object Variables
 ;;
 ;; - Naming Convention : <Scope Tags>_<obj><Class Name>[Expt]
 ;; - 2 단어 이상으로 구성되어 있는 것은 각 word의 첫 글자를 대문자로 하고 나머지는
 ;;   소문자로 구성한다.
 ;; - Exception Class인 경우는 "Expt"라고 명시한다.
 ;;
 ;;
 ;;
 ;;
 ;; Example :
 ;;
 ;; WidgetClass g_objWidgetClass;
 ;; NcNmsExpt g_objNcNmsExpt;
 ;;
 ;; function() {
 ;;     NcCpu z_objNcCpu("RISC","CISC");
 ;; }
 ;;
 ;; ※ Type Defined Structure, Enum Type Definition, Object Variables, Top
 ;;
 ;; - Naming Convention : new<Struct Name>
 ;; ※ Enum Type Definition,  , Type Defined Structure, Top
 ;;
 ;; - Type Naming Convention : en<enum name>
 ;; - Element Naming Convention : E_<element name>
 ;; - enum name : 각 word를 모두 대문자로 구성한다.
 ;; - element name : 각 word를 모두 대문자로 구성하고 "_"로 연결한다.
 ;;
 ;; Example :
 ;;
 ;; enum enSYSTEM_ERROR
 ;; {
 ;;     E_FILE_NOT_FOUND = 0,
 ;;     E_FILE_OPEN_ERROR = 1
 ;; } ;

   #+END_SRC
** comment
   #+BEGIN_SRC emacs-lisp

;;(require 'edom)

(defun find-prototype-region ()
  (interactive)
  (re-search-forward "#include")
  (while (not (equal nil (re-search-forward "^[a-zA-Z]" (point-max) t) ))
    (goto-char (point-at-bol))
    (cmt-fun)))


(defun current-time-stamp ()
  (concat  (format-time-string  "%Y년 %m월 %d일 %V주 %H시 %M분 %S초 ")
           (cadr (assoc  (nth 6  (decode-time (current-time)))
                         '(
                           (0 "일요일")
                           (1 "월요일")
                           (2 "화요일")
                           (3 "수요일")
                           (4 "목요일")
                           (5 "금요일")
                           (6 "토요일"))))))

(defun cmt-fun ()
  (interactive)
  (let* ((min (point-at-bol))
         (max (- (re-search-forward ")") 1 ))
         (str (buffer-substring min max))
         (name (car (s-split "(" str )))
         (args (cadr (s-split "(" str )))
         (rtn "")
         (fname "")
         (keywords '("struct" "enum" "class" "File" "Author:" "E-mail:" "$Rev:" "Limitation" "마지막" "Description:" "Limitation:" "Caution:" "Usagc:" "Copyright" "All"))
         (tstamp (format-time-string  "%Y년 %m월 %d일 %V주 %a 요일 %p %I시 %M분 %S초"))
         ;;(tstamp (current-time-stamp))
         )
    (goto-char min)

    (setf name (s-replace "\n+" " " name ))
    (setf name (s-split " " name))
    (setf args (s-split "," args))

    (case (length name )
      ((1) (setf fname (s-trim (car name ))) (setf rtn "void"))
      ((2 3) (setf fname (s-trim (cadr name ))) (setf rtn (s-trim (car name )))))

    (if (and
         (> 3 (length name))
         (equal nil (member fname keywords))
         (equal nil (member rtn keywords)))

        (progn

          (insert "//|||***************************************************************************") (newline)
          (insert (format "//||| 파일명        : %s" (buffer-name))) (newline)
          (insert (format "//||| 최초 작성일   : %s" tstamp)) (newline)
          (insert (format "//||| 마지막 수정일 : %s" tstamp)) (newline)
          (insert "//||| 최초 작성자   : SW22 김동일") (newline)
          (insert "//||| 마지막 수정자 : SW22 김동일") (newline)
          (insert (format "//||| 함수명        : %s" fname)) (newline)
          (insert "//||| 설명          : ") (newline)

          (if (equal 0 (length args))
              (insert "//||| 입력값        : [IN] 없음\n")
            (insert (format "//||| 입력값        : [IN] %s\n"  (s-trim (car args) ))))

          (mapcar
           (lambda (arg)
             (insert (format "//|||        [IN] %s\n" (s-trim arg))))
           (cdr args))

          (insert "//||| 리턴값        : " (s-trim rtn))(newline)
          (insert "//||| 비고          : ")(newline)
          (insert "//|||***************************************************************************")(newline)))
    (re-search-forward ")")))





(defun cmt-class ()
  (interactive)
  (end-of-buffer)
  (if (not (equal nil (re-search-backward "^class" (point-min) t)))

      (let* ((min (point-at-bol))
             (max (- (re-search-forward "{") 1 ))
             (str (buffer-substring min max))
             (name (car (s-split ":" str )))
             (tstamp (format-time-string  "%Y년 %m월 %d일 %V주 %a요일 %p %I시 %M분 %S초"))
             ;;(tstamp (current-time-stamp))
             (cname (cadr (s-split " " name))))

        (goto-char min)

        (insert "//***************************************************************************") (newline)
        (insert (format "// 파일명        : %s" (buffer-name))) (newline)
        (insert "// 프로젝트명    : FFX LINK11 DLP") (newline)
        (insert (format "// 최초 작성일     : %s" tstamp )) (newline)
        (insert (format "// 마지막 수정일   : %s" tstamp )) (newline)
        (insert "// 최초 작성자   : SW22 김동일") (newline)
        (insert "// 마지막 수정자 : SW22 김동일 ") (newline)
        (insert (format "// 클래스명      : %s" cname)) (newline)
        (insert "// 클래스 설명   :  ") (newline)
        (insert "// 비고          : ") (newline)
        (insert "//***************************************************************************") (newline)
        )))



;;deprecated;;(defun ffx-header ( funname )
;;deprecated;;  (interactive)
;;deprecated;;  (message funname)
;;deprecated;;  (if (symbolp funname) (setf funname (symbol-name funname)))
;;deprecated;;  (macrolet (( with-writable-file
;;deprecated;;               (name &rest body)
;;deprecated;;               `(let ((omodes (file-modes ,name)))
;;deprecated;;                  (set-file-modes ,name (logior omodes 128 ))
;;deprecated;;                  (with-current-buffer (find-file ,name)
;;deprecated;;                    (read-only-mode  -2 )
;;deprecated;;                    ,@body)
;;deprecated;;                  (set-file-modes ,name omodes))))
;;deprecated;;    (with-writable-file funname
;;deprecated;;     (beginning-of-buffer)
;;deprecated;;
;;deprecated;;     (insert (format
;;deprecated;;              "/*****************************************************************************
;;deprecated;;    File namc:    %s
;;deprecated;;    Author:       김동일
;;deprecated;;    E-mail:       di7979.kim@samsung.com
;;deprecated;;
;;deprecated;;    마지막 변경 시각: <>
;;deprecated;;
;;deprecated;;------------------------------------------------------------------------------
;;deprecated;;    Description:
;;deprecated;;        -
;;deprecated;;
;;deprecated;;Limitation:
;;deprecated;;- None
;;deprecated;;
;;deprecated;;Caution:
;;deprecated;;- None
;;deprecated;;
;;deprecated;;------------------------------------------------------------------------------
;;deprecated;;Usagc:
;;deprecated;;
;;deprecated;;------------------------------------------------------------------------------
;;deprecated;;Update History:
;;deprecated;;- 2009년 07월 10일 28주 금요일 오전 10시 24분 56초 헤더생성
;;deprecated;;
;;deprecated;;------------------------------------------------------------------------------
;;deprecated;;Copyright (c) 2006 Samsung Thales Co.,Inc.
;;deprecated;;All Rights Reserved
;;deprecated;;*****************************************************************************/
;;deprecated;;" funname))
;;deprecated;;     (basic-save-buffer)
;;deprecated;;     (kill-this-buffer))))


;;deprecated;;(defun ffx-prototype ( fname )
;;deprecated;;  (interactive)
;;deprecated;;  (if (symbolp fname) (setf fname (symbol-name fname)))
;;deprecated;;  (macrolet (( with-writable-file
;;deprecated;;               (&rest body)
;;deprecated;;               `(let ((omodes (file-modes ,fname)))
;;deprecated;;                  (set-file-modes ,fname (logior omodes 128 ))
;;deprecated;;                  (with-current-buffer (find-file ,fname)
;;deprecated;;                    (read-only-mode  -2 )
;;deprecated;;                    ,@body)
;;deprecated;;                  (set-file-modes ,fname omodes))))
;;deprecated;;    (with-writable-file
;;deprecated;;     (find-prototype-region)
;;deprecated;;     (basic-save-buffer)
;;deprecated;;     (kill-this-buffer))))





(defun count-fun ()
  (interactive)
  (count-matches "^[a-zA-Z]" (re-search-forward "^#") (point-max)))


(defun cmt-py ()
  (interactive)
  (evil-beginning-of-line)
  (evil-forward-word-begin 2)

  (let* ((str (buffer-substring (point) (- (re-search-forward ")") 1 )))
         (name (s-trim  (car (s-split "(" str ))))
         (args (mapcar (lambda (x) (s-trim x)) (s-split "," (cadr (s-split "(" str ))))))
    (save-excursion
      (save-restriction
        (narrow-to-region (point-at-bol ) (point-at-eol))
        (evil-open-below 0) (insert "\"\"\"" ) (evil-open-below 0) (insert "\"\"\"" ) (evil-open-above 0 )
        (insert "기능 : ") (evil-open-below 0)
        (insert (format  "함수명 : %s" name) ) (evil-open-below 0)
        (insert "입력 : ") (evil-open-below 0)

        (string= "abcd" "abcd")
        (mapcar (lambda (arg)
                  (if (string= "self" arg)
                      (insert (format "    %s - 클래스 인스턴스" arg))
                    (insert (format "    %s - " arg)))
                   (evil-open-below 0)) args)
        (insert "출력 : ")    (evil-open-below 0)
        (insert "처리 : ")    (evil-open-below 0)
        (insert "예외처리 : ")(evil-open-below 0)
        (insert "비고 : ")    (evil-open-below 0)

     ))
    (evil-normal-state)))


(defun cmt-xml (b e)

  (interactive "r")
  (save-excursion
    (save-restriction
      (narrow-to-region b e)
      (replace-string "기능 : "      ""             nil (point-min) (point-max))
      (replace-string "함수명 : "    "|"            nil (point-min) (point-max))
      (replace-string "입력 : "      "|MISCDialog.py"    nil (point-min) (point-max))
      (replace-string "출력 : "      "|"            nil (point-min) (point-max))
      (replace-string "예외처리 : "  "|"            nil (point-min) (point-max))
      (replace-string "비고 : "      "|"            nil (point-min) (point-max))

      (goto-char (point-min))
      (re-search-forward "처리 : ")
      (end-of-line)
      (replace-string " " "^" nil (point) (point-max))
      (replace-string "처리 : "      "|"            nil (point-min) (point-max))

(goto-char (point-min))
(insert "
      <함수테이블>
        <클래스>MISDialog</클래스>
        <내용><![CDATA[
")

      (goto-char (point-max))

(insert "
        ]]></내용>
      </함수테이블>
")


))
)

(defun split-line-indent (&optional arg)
  "Split current line, moving portion beyond point vertically down.
If the current line starts with `fill-prefix', insert it on the new
line as well.  With prefix ARG, don't insert `fill-prefix' on new line.

When called from Lisp code, ARG may be a prefix string to copy."
  (interactive "*P")
  (skip-chars-forward " ,;\t")
  (let* ((col (current-column))
	 (pos (point))
	 ;; What prefix should we check for (nil means don't).
	 (prefix (cond ((stringp arg) arg)
		       (arg nil)
		       (t fill-prefix)))
	 ;; Does this line start with it?
	 (have-prfx (and prefix
			 (save-excursion
			   (beginning-of-line)
			   (looking-at (regexp-quote prefix))))))
    (newline-and-indent )
    (if have-prfx (insert-and-inherit prefix))
    (goto-char pos)))

;; (global-set-key [f9] #'cmt-py)
   #+END_SRC

* http
  #+BEGIN_SRC emacs-lisp

    ;;(setq
    ;; browse-url-browser
    ;; browse-url-new-window-flag           t
    ;; browse-url-firefox-new-window-is-tab t)

    ;; webjump 의 내용을 재정의
    (setq
     browse-url-browser-function
     (lambda (url &optional new-window)
       "Ask the Firefox WWW browser to load URL.
    Default to the URL around or before point.  The strings in
    variable `browse-url-firefox-arguments' are also passed to
    Firefox.

    When called interactively, if variable
    `browse-url-new-window-flag' is non-nil, load the document in a
    new Firefox window, otherwise use a random existing one.  A
    non-nil interactive prefix argument reverses the effect of
    `browse-url-new-window-flag'.

    If `browse-url-firefox-new-window-is-tab' is non-nil, then
    whenever a document would otherwise be loaded in a new window, it
    is loaded in a new tab in an existing window instead.

    When called non-interactively, optional second argument
    NEW-WINDOW is used instead of `browse-url-new-window-flag'.

    On MS-Windows systems the optional `new-window' parameter is
    ignored.  Firefox for Windows does not support the \"-remote\"
    command line parameter.  Therefore, the
    `browse-url-new-window-flag' and `browse-url-firefox-new-window-is-tab'
    are ignored as well.  Firefox on Windows will always open the requested
    URL in a new window."
       (setq url (browse-url-encode-url url))
       (apply 'start-process
              (concat "firefox " url) nil
              browse-url-firefox-program
              (append
               browse-url-firefox-arguments
               (list url)
               ))))



    (defun httpcall ()
      (interactive)
      (save-excursion
        (let ((url (read-from-minibuffer "url: " "http://")))
          (set-buffer (get-buffer-create "*httpcall*"))
          (erase-buffer)
          (insert-buffer (url-retrieve-synchronously url))
          (switch-to-buffer "*httpcall*"))))


    (defun httpstring ( url )
      (interactive (list (read-from-minibuffer "url: " "http://")))
      (save-excursion
        (with-temp-buffer
          (insert-buffer (url-retrieve-synchronously url))
          (goto-char (point-min))
          (if (looking-at "^HTTP/1.1 200 OK$")
              (progn
                (forward-line 1)
                (while (looking-at "^.+[:].+$")
                  (forward-line 1))
                (forward-line 1)
                (delete-region (point-min) (point))))
          (buffer-string))))


    (defun httpeval ( url )
      (interactive (list (read-from-minibuffer "url: " "http://")))
      (save-excursion
        (with-temp-buffer
          (insert-buffer (url-retrieve-synchronously url))
          (goto-char (point-min))
          (if (looking-at "^HTTP/1.1 200 OK$")
              (progn
                (forward-line 1)
                (while (looking-at "^.+[:].+$")
                  (forward-line 1))
                (forward-line 1)
                (delete-region (point-min) (point))))
          (eval-current-buffer))))


    ;; 다음과 같이 authentication 을 사용할 수 있다.
    ;; http://stackoverflow.com/questions/1597959/how-does-emacs-url-package-handle-authentication
    ;; http://www.emacswiki.org/emacs/UrlPackage

    ;; M-x mail 을 이용하여 메일을 전송할 수 있다.
    ;;(setq send-mail-function 'sendmail-send-it)
    ;;(setq sendmail-program "C:/usr/local/msmtp/msmtp.exe")
    ;;(setq message-sendmail-extra-arguments '("-a" "gmail"))
    ;;(setq mail-host-address "gmail.com")
    ;;(setq user-full-name "dongce")
    ;;(setq user-mail-address "dongce@gmail.com")
    ;;
    ;;http://kaisyu.springnote.com/pages/575011.xhtml


    ;; post 메시지를 전송할 수 있다.
    (require 'http-post-simple)
    ;; 다음과 같이 메일전송가능
    ;;(http-post-simple
    ;; "http://10.239.12.219/singlemail/send_bitten_result"
    ;; '((title       . "TEST EMACS MAIL")
    ;;   (sender      . "di7979.kim@samsung.com")
    ;;   (recipients  . "di7979.kim@samsung.com" )
    ;;   (txtcontents . "한글을 사용할 수 있다. "))
    ;; 'utf-8)


    ;;; Emacs/W3 설정
    (condition-case () (require 'w3-auto "w3-auto") (error nil))
    (add-hook 'w3-parse-hooks 'w3-tidy-page)
    (defvar w3-fast-parse-tidy-program "tidy")
    (defun w3-tidy-page (&optional buff)
      "Use html tidy to clean up the HTML in the current buffer."
      (save-excursion
        (if buff
            (set-buffer buff)
          (setq buff (current-buffer)))
        (widen)
        (call-process-region (point-min) (point-max)
                             w3-fast-parse-tidy-program
                             t (list buff nil) nil ;nil nil nil;
                             "--show-warnings" "no" "--show-errors" "0" "--force-output" "yes"
                             "-quiet" "-clean" "-bare" "-omit"
                             "--drop-proprietary-attributes" "yes" "--hide-comments" "yes"
                             )))
  #+END_SRC

* web
** intranet
   #+BEGIN_SRC emacs-lisp

     ;; https://github.com/skeeto/skewer-mode


     (leaf httprepl :ensure t)
     (leaf skewer-mode 
       :ensure t
       :config
       ( skewer-setup ))


     (defun httpget (url)
       (interactive "sURL: ")
       (let ((url-request-method "GET")
             ;;(arg-stuff (concat "?query=" (url-hexify-string str)
             ;;                   "&filter=" (url-hexify-string type)))
             )
         (url-retrieve url (lambda (status) (switch-to-buffer (current-buffer))))))






   #+END_SRC
** internet
 #+begin_src emacs-lisp :tangle no
   (leaf  google-contacts
     :ensure t
     :commands google-contacts)

   ;; http://pragmaticemacs.com/emacs/weather-in-emacs/
   (leaf wttrin
     :ensure t
     :commands wttrin
     :custom
     (wttrin-default-cities . '("gumi-si" "Daegu")))
 #+end_src


* jump

** bookmark
   #+BEGIN_SRC emacs-lisp
   ;; ace jump mode 를 사용할 수 있다.


   ;; FUNCTION DEFINITION



   (require 'webjump)
   (global-set-key "\C-cw" 'webjump)

   (setq
   webjump-sites
   (append
   webjump-sites
   '(("emacs"           . "http://www.gnu.org/software/emacs/manual/emacs.html")
   ("elisp-intro"     . "http://www.gnu.org/software/emacs/emacs-lisp-intro/html_mono/emacs-lisp-intro.html")
   ("elisp-reference" . "http://www.gnu.org/software/emacs/elisp-manual/html_mono/elisp.html")
   ("msdn"            . "http://msdn.microsoft.com/library/default.asp")
   ("msdn-forum"      . "http://forums.microsoft.com/msdn/")
   ("iostream"        . "http://www.cplusplus.com/ref/")
   ("stl"             . "http://www.sgi.com/tech/stl/table_of_contents.html")
   ("sgi"             . "http://www.sgi.com/tech/stl/")
   ("tr1"             . "http://www.aristeia.com/EC3E/TR1_info.html")
   ("man"             . "http://www.freebsd.org/cgi/man.cgi")
   ("wikipedia"       . "http://en.wikipedia.org/wiki/Main_Page")
   ("koders"          . "http://www.koders.com")
   ("c++faq"          . "http://www.parashift.com/c++-faq-lite/index.html")
   ("python"          . "http://www.python.org/doc/")
   ("erlang"          . "http://www.erlang.org/doc.html")
   ("sbcl"            . "http://www.sbcl.org/manual/")
   ("java"            . "http://java.sun.com/javase/6/docs/api/")
   ("haskell"         . "http://haskell.org/ghc/docs/latest/html/libraries/")

   ("FFX"             . "http://10.239.12.181/projects/ffx/")
   ("FBUILD"          . "http://10.239.12.134/buildserver")
   ("FFXCODESONAR"    . "http://10.239.12.181/projects/ffxcodesonar/")
   ("IIDS"            . "http://10.239.12.181/projects/iids/")
   ("LST"             . "http://10.239.12.181/projects/lst/")
   ("HILS"            . "http://10.239.12.181/projects/hils/")
   ("MISC"            . "http://10.239.12.181/projects/misc/")
   ("CORESW"          . "http://10.239.12.181/projects/coresw/")

   ("LPX"             . "http://10.239.12.87/projects/lpx/")
   ("bzrsync"         . "http://10.239.12.181/syncbzr/ffx")
   ("CODESONAR"       . "http://10.239.12.219:7340/")
   ("gmail   "        . "http://www.gmail.com")

   ("swankjs"         . "http://localhost:8009/swank-js/test.html")
   ("MDMS"            . "http://10.239.12.87:3000/login/login")
   )))



   ;;Typing the Form Feed Character
   ;;
   ;;In emacs, you can type the char by pressing 【Ctrl+q】 then 【Ctrl+l】. ( Emacs's Key Notations Explained (/r, ^M, C-m, RET, <return>, M-, meta))

   ;; keys for moving to prev/next code section (Form Feed; ^L)
   (global-set-key (kbd "<C-M-prior>") 'backward-page) ; Ctrl+Alt+PageUp
   (global-set-key (kbd "<C-M-next>") 'forward-page)   ; Ctrl+Alt+PageDown





   (setq bm-restore-repository-on-load t)
   (require 'bm)

   ;; bm-bookmart-annotate
   ;;(global-set-key (kbd "<M-f2>") 'bm-toggle)
   ;;(global-set-key (kbd "<f2>")   'bm-next)
   ;;(global-set-key (kbd "<S-f2>") 'bm-previous)

   ;; make bookmarks persistent as default
   (setq-default bm-buffer-persistence t)

   ;; Loading the repository from file when on start up.
   (add-hook' after-init-hook 'bm-repository-load)

   ;; Restoring bookmarks when on file find.
   (add-hook 'find-file-hooks 'bm-buffer-restore)

   ;; Saving bookmark data on killing a buffer
   (add-hook 'kill-buffer-hook 'bm-buffer-save)

   ;; Restore bookmarks when buffer is reverted.
   (add-hook 'after-revert-hook 'bm-buffer-restore)

   ;; Saving the repository to file when on exit.
   ;; kill-buffer-hook is not called when emacs is killed, so we
   ;; must save all bookmarks first.
   (add-hook
   'kill-emacs-hook
   '(lambda nil
   (bm-buffer-save-all)
   (bm-repository-save)))

   ;; STANDARD emacs bookmark
   ;;;; C-x r m   set a bookmark at the current location (e.g. in a file)
   ;;;; C-x r b   jump to a bookmark
   ;;;; C-x r l   list all of your bookmarks
   ;;;; M-x bookmark-delete   delete a bookmark by name

   ;;(require 'bookmark+)
   (global-set-key (kbd "C-*") 'bookmark-bmenu-list)


   (fset 'bmkp-url-target-set-origin #'bmkp-url-target-set)       ;원본버젼

   (defun bmkp-url-target-set (url &optional prefix-only-p name/prefix no-update-p msg-p) ; `C-x p c u'
   "Set a bookmark for a URL.  Return the bookmark.
   Interactively you are prompted for the URL.  Completion is available.
   Use `M-n' to pick up the url at point as the default.

   You are also prompted for the bookmark name.  But with a prefix arg,
   you are prompted only for a bookmark-name prefix.  In that case, the
   bookmark name is the prefix followed by the URL.

   When entering a bookmark name you can use completion against existing
   names.  This completion is lax, so you can easily edit an existing
   name.  See `bookmark-set' for particular keys available during this
   input.

   Non-interactively:
  * Non-nil PREFIX-ONLY-P means NAME/PREFIX is a bookmark-name prefix.
  * NAME/PREFIX is the bookmark name or its prefix (the suffix = URL).
  * Non-nil NO-UPDATE-P means do not refresh/rebuild the bookmark-list
   display.
  * Non-nil MSG-P means display a status message."
   (interactive
   (list (if (require 'ffap nil t)
   (ffap-read-file-or-url "URL: " (or (bmkp-thing-at-point 'url)
   (and (fboundp 'url-get-url-at-point)
   (url-get-url-at-point))))
   (let ((icicle-unpropertize-completion-result-flag  t))
   (read-file-name "URL: " nil (or (bmkp-thing-at-point 'url)
   (and (fboundp 'url-get-url-at-point)
   (url-get-url-at-point))))))
   current-prefix-arg
   (if current-prefix-arg
   (read-string "Prefix for bookmark namc: ")
   (bmkp-completing-read-lax "Bookmark name"))
   nil
   'MSG))
   (unless name/prefix (setq name/prefix  ""))
   ;;usedynamicbinding;;(lexical-let* ((ul                             url)
   (let* ((ul                             url)
   (bookmark-make-record-function  (if (eq major-mode 'w3m-mode)
   'bmkp-make-w3m-record
   (lambda () (bmkp-make-url-browse-record ul))))
   bmk failure)
   (condition-case err
   (setq bmk  (bookmark-store (if prefix-only-p (concat name/prefix url) name/prefix)
   (cdr (bookmark-make-record))  nil  no-update-p  (not msg-p)))
   (error (setq failure  err)))
   (when failure (error "Failed to create bookmark for `%s':\n%s\n" url failure))
   bmk))


   (require 'point-stack)


   #+END_SRC

** ace-link
   #+BEGIN_SRC emacs-lisp
   (ace-link-setup-default)
   #+END_SRC

   #+RESULTS:
   : ace-link-custom

* documentation
  
  #+BEGIN_SRC emacs-lisp

    ;; http://www.gnu.org/software/emacs/manual/html_node/elisp/Building-Emacs.html#Building-Emacs
    (if (> 10 (length build-files))
        (progn
          (require 'f)
          (require 's)
          (setf build-files (mapcar (lambda (x) (f-filename x)) (s-split " " (car  build-files) )))))



    (require 'info+)
    (require 'info-look)

    (info-lookup-add-help
     :mode 'python-mode
     :regexp "[[:alnum:]_]+"
     :doc-spec
     '(("(python)Index" nil "")))

    (global-set-key "\C-h\t" 'info-lookup-symbol)

    ;;(global-set-key (kbd "<kp-home> <kp-0>") (lambda () (interactive) (find-file "~/git/xah_emacs_init/xah_emacs_keybinding.el")))
    ;;(global-set-key (kbd "<kp-home> <kp-1>") (lambda () (interactive) (find-file "~/web/xahlee_info/js/blog.html")))
    ;;(global-set-key (kbd "<kp-home> <kp-2>") (lambda () (interactive) (find-file "~/web/xahlee_info/comp/blog.html")))
    ;;(global-set-key (kbd "<kp-home> <kp-3>") (lambda () (interactive) (find-file "~/web/ergoemacs_org/emacs/blog.html")))
    ;;(global-set-key (kbd "<kp-home> <kp-4>") (lambda () (interactive) (find-file "~/web/xahlee_info/math/blog.html")))


    (setq common-lisp-hyperspec-root
          "filc:U:/usr/local/clisp-2.37/hyperspec/HyperSpec/" )

    (require 'irfc)
    (leaf irfc
      :custom
      (`(irfc-directory . ,(fullpath "../rfcdoc") ) 
       (irfc-assoc-mode . t))
      :config
      (defun rfcsearch ()
        (interactive)
        (browse-url "http://www.ietf.org/rfc.html"))

      (defun rfcindex ()
        (interactive)
        (let ((url-request-method "GET")
              ;; (arg-stuff (concat "?query=" (url-hexify-string str) "&filter=" (url-hexify-string type)))
              )
          (url-retrieve  "http://www.ietf.org/download/rfc-index.txt" (lambda (status) (switch-to-buffer (current-buffer))))))
      )


    ;; know-your-http-well package
    ;; https://github.com/for-GET/know-your-http-well
  #+END_SRC

** CANCELED WINDOW PATH
   - State "CANCELED"   from              [2020-02-27 목 13:27] \\
     LINUX 를 사용한다.
   #+begin_src emacs-lisp :tangle no

  (setq
   woman-manpath
   (mapcar
    (lambda (x)
      (symbol-name x))
    `(
      c:/usr/local/editor/EmacsW32/gnuwin32/man
      c:/usr/local/editor/mumailindexer/share/man
      c:/usr/local/activePERL/man
      c:/usr/local/cmake/man
      c:/usr/local/coreutil/man
      c:/usr/local/ecl/share/man
      c:/usr/local/guile/share/man
      c:/usr/local/mingwdevkit/mingw/man
      c:/usr/local/mingwdevkit/mingw/share/man
      c:/usr/local/python27/share/man
      c:/usr/local/ruby/man
      c:/usr/local/swipl/xpce/man
      c:/usr/local/swipl/xpce/prolog/lib/man
      c:/msys264/usr/share/man
      ,(intern ( fullpath "../../global/share/man/"))
      ,(intern ( fullpath "../../man-pages/"))
  /usr/local/misctools/default/share/man
  /usr/local/emacs/default/share/man
  /usr/local/guile/default/share/man
  /usr/local/git/default/share/man
  /usr/local/git/mandoc
  /usr/local/python27/default/share/man
  /usr/local/subversion/default/share/man
  /usr/local/tcpreplay/default/share/man
    )))


  (setq
   Info-additional-directory-list
   (list
    (fullpath "../../share/info")
    (fullpath "../../doc/info")
    (fullpath "../../mumailindexer/share/info")
    (fullpath "../../global/share/info")
    (format "%s/%s" (getenv "GUILE_HOME") "/share/info" )
    "c:/msys264/usr/share/info"
    "/usr/local/misctools/default/share/info"
  "/usr/local/emacs/default/share/info"
  "/usr/local/guile/default/share/info"
  "/usr/local/git/default/share/info"
  "/usr/local/python27/default/share/info"
  "/usr/local/subversion/default/share/info"
  "/usr/local/tcpreplay/default/share/info"
  ))


   #+end_src

** LINUX PATH
   #+begin_src emacs-lisp
     (setq
      woman-manpath
      (mapcar
       (lambda (x)
         (symbol-name x))
       `(
         /usr/share/man
         /opt/anaconda3/man
         /opt/anaconda3/pkgs/bzip2-1.0.8-h7b6447c_0/man
         /opt/anaconda3/pkgs/expat-2.2.6-he6710b0_0/share/man
         /opt/anaconda3/pkgs/freetype-2.9.1-h8a8886c_1/share/man
         /opt/anaconda3/pkgs/icu-58.2-h9c2bf20_1/share/man
         /opt/anaconda3/pkgs/ipython-7.8.0-py37h39e3cac_0/share/man
         /opt/anaconda3/pkgs/jpeg-9b-h024ee3a_2/share/man
         /opt/anaconda3/pkgs/krb5-1.16.1-h173b8e3_7/share/man
         /opt/anaconda3/pkgs/libarchive-3.3.3-h5d8350f_5/share/man
         /opt/anaconda3/pkgs/libedit-3.1.20181209-hc058e9b_0/share/man
         /opt/anaconda3/pkgs/libffi-3.2.1-hd88cf55_4/share/man
         /opt/anaconda3/pkgs/libpng-1.6.37-hbc83047_0/share/man
         /opt/anaconda3/pkgs/libssh2-1.8.2-h1ba5d50_0/share/man
         /opt/anaconda3/pkgs/libtool-2.4.6-h7b6447c_5/share/man
         /opt/anaconda3/pkgs/libxml2-2.9.9-hea5a465_1/share/man
         /opt/anaconda3/pkgs/libxslt-1.1.33-h7d1a2b0_0/share/man
         /opt/anaconda3/pkgs/lz4-c-1.8.1.2-h14c3975_0/share/man
         /opt/anaconda3/pkgs/pango-1.42.4-h049681c_0/share/man
         /opt/anaconda3/pkgs/patchelf-0.9-he6710b0_3/share/man
         /opt/anaconda3/pkgs/python-3.7.4-h265db76_1/share/man
         /opt/anaconda3/pkgs/readline-7.0-h7b6447c_5/share/man
         /opt/anaconda3/pkgs/sympy-1.4-py37_0/share/man
         /opt/anaconda3/pkgs/unixodbc-2.3.7-h14c3975_0/share/man
         /opt/anaconda3/pkgs/xz-5.2.4-h14c3975_4/share/man
         /opt/anaconda3/pkgs/zeromq-4.3.1-he6710b0_3/share/man
         /opt/anaconda3/pkgs/zstd-1.3.7-h0b5b093_0/share/man
         /opt/anaconda3/share/man
         /opt/emacs27/share/man
         /opt/GNAT/2019/libexec/spark/share/man
         /opt/GNAT/2019/share/gdb-8.3/python-2.7.16/share/man
         /opt/GNAT/2019/share/man
         /opt/local/share/man
         /opt/rh/gcc-toolset-9/root/usr/local/share/man
         /opt/rh/gcc-toolset-9/root/usr/share/man
         )))


     (setq
      Info-additional-directory-list
      (mapcar
       (lambda (x)
         (symbol-name x))
       `(
     /opt/anaconda3/pkgs/alabaster-0.7.12-py37_0/info
     /opt/anaconda3/pkgs/anaconda-2019.10-py37_0/info
     /opt/anaconda3/pkgs/anaconda-client-1.7.2-py37_0/info
     /opt/anaconda3/pkgs/anaconda-navigator-1.9.7-py37_0/info
     /opt/anaconda3/pkgs/anaconda-project-0.8.3-py_0/info
     /opt/anaconda3/pkgs/asn1crypto-1.0.1-py37_0/info
     /opt/anaconda3/pkgs/astroid-2.3.1-py37_0/info
     /opt/anaconda3/pkgs/astropy-3.2.2-py37h7b6447c_0/info
     /opt/anaconda3/pkgs/atomicwrites-1.3.0-py37_1/info
     /opt/anaconda3/pkgs/attrs-19.2.0-py_0/info
     /opt/anaconda3/pkgs/babel-2.7.0-py_0/info
     /opt/anaconda3/pkgs/backcall-0.1.0-py37_0/info
     /opt/anaconda3/pkgs/backports-1.0-py_2/info
     /opt/anaconda3/pkgs/backports.functools_lru_cache-1.5-py_2/info
     /opt/anaconda3/pkgs/backports.os-0.1.1-py37_0/info
     /opt/anaconda3/pkgs/backports.shutil_get_terminal_size-1.0.0-py37_2/info
     /opt/anaconda3/pkgs/backports.tempfile-1.0-py_1/info
     /opt/anaconda3/pkgs/backports.weakref-1.0.post1-py_1/info
     /opt/anaconda3/pkgs/beautifulsoup4-4.8.0-py37_0/info
     /opt/anaconda3/pkgs/bitarray-1.0.1-py37h7b6447c_0/info
     /opt/anaconda3/pkgs/bkcharts-0.2-py37_0/info
     /opt/anaconda3/pkgs/blas-1.0-mkl/info
     /opt/anaconda3/pkgs/bleach-3.1.0-py37_0/info
     /opt/anaconda3/pkgs/blosc-1.16.3-hd408876_0/info
     /opt/anaconda3/pkgs/bokeh-1.3.4-py37_0/info
     /opt/anaconda3/pkgs/boto-2.49.0-py37_0/info
     /opt/anaconda3/pkgs/bottleneck-1.2.1-py37h035aef0_1/info
     /opt/anaconda3/pkgs/bzip2-1.0.8-h7b6447c_0/info
     /opt/anaconda3/pkgs/ca-certificates-2019.8.28-0/info
     /opt/anaconda3/pkgs/cairo-1.14.12-h8948797_3/info
     /opt/anaconda3/pkgs/certifi-2019.9.11-py37_0/info
     /opt/anaconda3/pkgs/cffi-1.12.3-py37h2e261b9_0/info
     /opt/anaconda3/pkgs/chardet-3.0.4-py37_1003/info
     /opt/anaconda3/pkgs/click-7.0-py37_0/info
     /opt/anaconda3/pkgs/cloudpickle-1.2.2-py_0/info
     /opt/anaconda3/pkgs/clyent-1.2.2-py37_1/info
     /opt/anaconda3/pkgs/colorama-0.4.1-py37_0/info
     /opt/anaconda3/pkgs/conda-4.7.12-py37_0/info
     /opt/anaconda3/pkgs/conda-build-3.18.9-py37_3/info
     /opt/anaconda3/pkgs/conda-env-2.6.0-1/info
     /opt/anaconda3/pkgs/conda-package-handling-1.6.0-py37h7b6447c_0/info
     /opt/anaconda3/pkgs/conda-package-handling-1.6.0-py37h7b6447c_0/info/test/tests/data/mock-2.0.0-py37_1000/info
     /opt/anaconda3/pkgs/conda-verify-3.4.2-py_1/info
     /opt/anaconda3/pkgs/contextlib2-0.6.0-py_0/info
     /opt/anaconda3/pkgs/cryptography-2.7-py37h1ba5d50_0/info
     /opt/anaconda3/pkgs/curl-7.65.3-hbc83047_0/info
     /opt/anaconda3/pkgs/cycler-0.10.0-py37_0/info
     /opt/anaconda3/pkgs/cython-0.29.13-py37he6710b0_0/info
     /opt/anaconda3/pkgs/cytoolz-0.10.0-py37h7b6447c_0/info
     /opt/anaconda3/pkgs/dask-2.5.2-py_0/info
     /opt/anaconda3/pkgs/dask-core-2.5.2-py_0/info
     /opt/anaconda3/pkgs/dbus-1.13.6-h746ee38_0/info
     /opt/anaconda3/pkgs/decorator-4.4.0-py37_1/info
     /opt/anaconda3/pkgs/defusedxml-0.6.0-py_0/info
     /opt/anaconda3/pkgs/distributed-2.5.2-py_0/info
     /opt/anaconda3/pkgs/docutils-0.15.2-py37_0/info
     /opt/anaconda3/pkgs/entrypoints-0.3-py37_0/info
     /opt/anaconda3/pkgs/et_xmlfile-1.0.1-py37_0/info
     /opt/anaconda3/pkgs/expat-2.2.6-he6710b0_0/info
     /opt/anaconda3/pkgs/fastcache-1.1.0-py37h7b6447c_0/info
     /opt/anaconda3/pkgs/filelock-3.0.12-py_0/info
     /opt/anaconda3/pkgs/flask-1.1.1-py_0/info
     /opt/anaconda3/pkgs/fontconfig-2.13.0-h9420a91_0/info
     /opt/anaconda3/pkgs/freetype-2.9.1-h8a8886c_1/info
     /opt/anaconda3/pkgs/fribidi-1.0.5-h7b6447c_0/info
     /opt/anaconda3/pkgs/fsspec-0.5.2-py_0/info
     /opt/anaconda3/pkgs/future-0.17.1-py37_0/info
     /opt/anaconda3/pkgs/get_terminal_size-1.0.0-haa9412d_0/info
     /opt/anaconda3/pkgs/gevent-1.4.0-py37h7b6447c_0/info
     /opt/anaconda3/pkgs/glib-2.56.2-hd408876_0/info
     /opt/anaconda3/pkgs/glob2-0.7-py_0/info
     /opt/anaconda3/pkgs/gmp-6.1.2-h6c8ec71_1/info
     /opt/anaconda3/pkgs/gmp-6.1.2-h6c8ec71_1/share/info
     /opt/anaconda3/pkgs/gmpy2-2.0.8-py37h10f8cd9_2/info
     /opt/anaconda3/pkgs/graphite2-1.3.13-h23475e2_0/info
     /opt/anaconda3/pkgs/greenlet-0.4.15-py37h7b6447c_0/info
     /opt/anaconda3/pkgs/gst-plugins-base-1.14.0-hbbd80ab_1/info
     /opt/anaconda3/pkgs/gstreamer-1.14.0-hb453b48_1/info
     /opt/anaconda3/pkgs/h5py-2.9.0-py37h7918eee_0/info
     /opt/anaconda3/pkgs/harfbuzz-1.8.8-hffaf4a1_0/info
     /opt/anaconda3/pkgs/hdf5-1.10.4-hb1b8bf9_0/info
     /opt/anaconda3/pkgs/heapdict-1.0.1-py_0/info
     /opt/anaconda3/pkgs/html5lib-1.0.1-py37_0/info
     /opt/anaconda3/pkgs/icu-58.2-h9c2bf20_1/info
     /opt/anaconda3/pkgs/idna-2.8-py37_0/info
     /opt/anaconda3/pkgs/imageio-2.6.0-py37_0/info
     /opt/anaconda3/pkgs/imagesize-1.1.0-py37_0/info
     /opt/anaconda3/pkgs/importlib_metadata-0.23-py37_0/info
     /opt/anaconda3/pkgs/intel-openmp-2019.4-243/info
     /opt/anaconda3/pkgs/ipykernel-5.1.2-py37h39e3cac_0/info
     /opt/anaconda3/pkgs/ipython-7.8.0-py37h39e3cac_0/info
     /opt/anaconda3/pkgs/ipython_genutils-0.2.0-py37_0/info
     /opt/anaconda3/pkgs/ipywidgets-7.5.1-py_0/info
     /opt/anaconda3/pkgs/isort-4.3.21-py37_0/info
     /opt/anaconda3/pkgs/itsdangerous-1.1.0-py37_0/info
     /opt/anaconda3/pkgs/jbig-2.1-hdba287a_0/info
     /opt/anaconda3/pkgs/jdcal-1.4.1-py_0/info
     /opt/anaconda3/pkgs/jedi-0.15.1-py37_0/info
     /opt/anaconda3/pkgs/jeepney-0.4.1-py_0/info
     /opt/anaconda3/pkgs/jinja2-2.10.3-py_0/info
     /opt/anaconda3/pkgs/joblib-0.13.2-py37_0/info
     /opt/anaconda3/pkgs/jpeg-9b-h024ee3a_2/info
     /opt/anaconda3/pkgs/json5-0.8.5-py_0/info
     /opt/anaconda3/pkgs/jsonschema-3.0.2-py37_0/info
     /opt/anaconda3/pkgs/jupyter-1.0.0-py37_7/info
     /opt/anaconda3/pkgs/jupyterlab-1.1.4-pyhf63ae98_0/info
     /opt/anaconda3/pkgs/jupyterlab_server-1.0.6-py_0/info
     /opt/anaconda3/pkgs/jupyter_client-5.3.3-py37_1/info
     /opt/anaconda3/pkgs/jupyter_console-6.0.0-py37_0/info
     /opt/anaconda3/pkgs/jupyter_core-4.5.0-py_0/info
     /opt/anaconda3/pkgs/keyring-18.0.0-py37_0/info
     /opt/anaconda3/pkgs/kiwisolver-1.1.0-py37he6710b0_0/info
     /opt/anaconda3/pkgs/krb5-1.16.1-h173b8e3_7/info
     /opt/anaconda3/pkgs/lazy-object-proxy-1.4.2-py37h7b6447c_0/info
     /opt/anaconda3/pkgs/libarchive-3.3.3-h5d8350f_5/info
     /opt/anaconda3/pkgs/libcurl-7.65.3-h20c2e04_0/info
     /opt/anaconda3/pkgs/libedit-3.1.20181209-hc058e9b_0/info
     /opt/anaconda3/pkgs/libffi-3.2.1-hd88cf55_4/info
     /opt/anaconda3/pkgs/libffi-3.2.1-hd88cf55_4/share/info
     /opt/anaconda3/pkgs/libgcc-ng-9.1.0-hdf63c60_0/info
     /opt/anaconda3/pkgs/libgcc-ng-9.1.0-hdf63c60_0/share/info
     /opt/anaconda3/pkgs/libgfortran-ng-7.3.0-hdf63c60_0/info
     /opt/anaconda3/pkgs/liblief-0.9.0-h7725739_2/info
     /opt/anaconda3/pkgs/libpng-1.6.37-hbc83047_0/info
     /opt/anaconda3/pkgs/libsodium-1.0.16-h1bed415_0/info
     /opt/anaconda3/pkgs/libssh2-1.8.2-h1ba5d50_0/info
     /opt/anaconda3/pkgs/libstdcxx-ng-9.1.0-hdf63c60_0/info
     /opt/anaconda3/pkgs/libtiff-4.0.10-h2733197_2/info
     /opt/anaconda3/pkgs/libtool-2.4.6-h7b6447c_5/info
     /opt/anaconda3/pkgs/libtool-2.4.6-h7b6447c_5/share/info
     /opt/anaconda3/pkgs/libuuid-1.0.3-h1bed415_2/info
     /opt/anaconda3/pkgs/libxcb-1.13-h1bed415_1/info
     /opt/anaconda3/pkgs/libxml2-2.9.9-hea5a465_1/info
     /opt/anaconda3/pkgs/libxslt-1.1.33-h7d1a2b0_0/info
     /opt/anaconda3/pkgs/llvmlite-0.29.0-py37hd408876_0/info
     /opt/anaconda3/pkgs/locket-0.2.0-py37_1/info
     /opt/anaconda3/pkgs/lxml-4.4.1-py37hefd8a0e_0/info
     /opt/anaconda3/pkgs/lz4-c-1.8.1.2-h14c3975_0/info
     /opt/anaconda3/pkgs/lzo-2.10-h49e0be7_2/info
     /opt/anaconda3/pkgs/markupsafe-1.1.1-py37h7b6447c_0/info
     /opt/anaconda3/pkgs/matplotlib-3.1.1-py37h5429711_0/info
     /opt/anaconda3/pkgs/mccabe-0.6.1-py37_1/info
     /opt/anaconda3/pkgs/mistune-0.8.4-py37h7b6447c_0/info
     /opt/anaconda3/pkgs/mkl-2019.4-243/info
     /opt/anaconda3/pkgs/mkl-service-2.3.0-py37he904b0f_0/info
     /opt/anaconda3/pkgs/mkl_fft-1.0.14-py37ha843d7b_0/info
     /opt/anaconda3/pkgs/mkl_random-1.1.0-py37hd6b4f25_0/info
     /opt/anaconda3/pkgs/mock-3.0.5-py37_0/info
     /opt/anaconda3/pkgs/more-itertools-7.2.0-py37_0/info
     /opt/anaconda3/pkgs/mpc-1.1.0-h10f8cd9_1/info
     /opt/anaconda3/pkgs/mpc-1.1.0-h10f8cd9_1/share/info
     /opt/anaconda3/pkgs/mpfr-4.0.1-hdf1c602_3/info
     /opt/anaconda3/pkgs/mpfr-4.0.1-hdf1c602_3/share/info
     /opt/anaconda3/pkgs/mpmath-1.1.0-py37_0/info
     /opt/anaconda3/pkgs/msgpack-python-0.6.1-py37hfd86e86_1/info
     /opt/anaconda3/pkgs/multipledispatch-0.6.0-py37_0/info
     /opt/anaconda3/pkgs/navigator-updater-0.2.1-py37_0/info
     /opt/anaconda3/pkgs/nbconvert-5.6.0-py37_1/info
     /opt/anaconda3/pkgs/nbformat-4.4.0-py37_0/info
     /opt/anaconda3/pkgs/ncurses-6.1-he6710b0_1/info
     /opt/anaconda3/pkgs/networkx-2.3-py_0/info
     /opt/anaconda3/pkgs/nltk-3.4.5-py37_0/info
     /opt/anaconda3/pkgs/nose-1.3.7-py37_2/info
     /opt/anaconda3/pkgs/notebook-6.0.1-py37_0/info
     /opt/anaconda3/pkgs/numba-0.45.1-py37h962f231_0/info
     /opt/anaconda3/pkgs/numexpr-2.7.0-py37h9e4a6bb_0/info
     /opt/anaconda3/pkgs/numpy-1.17.2-py37haad9e8e_0/info
     /opt/anaconda3/pkgs/numpy-base-1.17.2-py37hde5b4d6_0/info
     /opt/anaconda3/pkgs/numpydoc-0.9.1-py_0/info
     /opt/anaconda3/pkgs/olefile-0.46-py37_0/info
     /opt/anaconda3/pkgs/openpyxl-3.0.0-py_0/info
     /opt/anaconda3/pkgs/openssl-1.1.1d-h7b6447c_2/info
     /opt/anaconda3/pkgs/packaging-19.2-py_0/info
     /opt/anaconda3/pkgs/pandas-0.25.1-py37he6710b0_0/info
     /opt/anaconda3/pkgs/pandoc-2.2.3.2-0/info
     /opt/anaconda3/pkgs/pandocfilters-1.4.2-py37_1/info
     /opt/anaconda3/pkgs/pango-1.42.4-h049681c_0/info
     /opt/anaconda3/pkgs/parso-0.5.1-py_0/info
     /opt/anaconda3/pkgs/partd-1.0.0-py_0/info
     /opt/anaconda3/pkgs/patchelf-0.9-he6710b0_3/info
     /opt/anaconda3/pkgs/path.py-12.0.1-py_0/info
     /opt/anaconda3/pkgs/pathlib2-2.3.5-py37_0/info
     /opt/anaconda3/pkgs/patsy-0.5.1-py37_0/info
     /opt/anaconda3/pkgs/pcre-8.43-he6710b0_0/info
     /opt/anaconda3/pkgs/pep8-1.7.1-py37_0/info
     /opt/anaconda3/pkgs/pexpect-4.7.0-py37_0/info
     /opt/anaconda3/pkgs/pickleshare-0.7.5-py37_0/info
     /opt/anaconda3/pkgs/pillow-6.2.0-py37h34e0f95_0/info
     /opt/anaconda3/pkgs/pip-19.2.3-py37_0/info
     /opt/anaconda3/pkgs/pixman-0.38.0-h7b6447c_0/info
     /opt/anaconda3/pkgs/pkginfo-1.5.0.1-py37_0/info
     /opt/anaconda3/pkgs/pluggy-0.13.0-py37_0/info
     /opt/anaconda3/pkgs/ply-3.11-py37_0/info
     /opt/anaconda3/pkgs/prometheus_client-0.7.1-py_0/info
     /opt/anaconda3/pkgs/prompt_toolkit-2.0.10-py_0/info
     /opt/anaconda3/pkgs/psutil-5.6.3-py37h7b6447c_0/info
     /opt/anaconda3/pkgs/ptyprocess-0.6.0-py37_0/info
     /opt/anaconda3/pkgs/py-1.8.0-py37_0/info
     /opt/anaconda3/pkgs/py-lief-0.9.0-py37h7725739_2/info
     /opt/anaconda3/pkgs/pycodestyle-2.5.0-py37_0/info
     /opt/anaconda3/pkgs/pycosat-0.6.3-py37h14c3975_0/info
     /opt/anaconda3/pkgs/pycparser-2.19-py37_0/info
     /opt/anaconda3/pkgs/pycrypto-2.6.1-py37h14c3975_9/info
     /opt/anaconda3/pkgs/pycurl-7.43.0.3-py37h1ba5d50_0/info
     /opt/anaconda3/pkgs/pyflakes-2.1.1-py37_0/info
     /opt/anaconda3/pkgs/pygments-2.4.2-py_0/info
     /opt/anaconda3/pkgs/pylint-2.4.2-py37_0/info
     /opt/anaconda3/pkgs/pyodbc-4.0.27-py37he6710b0_0/info
     /opt/anaconda3/pkgs/pyopenssl-19.0.0-py37_0/info
     /opt/anaconda3/pkgs/pyparsing-2.4.2-py_0/info
     /opt/anaconda3/pkgs/pyqt-5.9.2-py37h05f1152_2/info
     /opt/anaconda3/pkgs/pyrsistent-0.15.4-py37h7b6447c_0/info
     /opt/anaconda3/pkgs/pysocks-1.7.1-py37_0/info
     /opt/anaconda3/pkgs/pytables-3.5.2-py37h71ec239_1/info
     /opt/anaconda3/pkgs/pytest-5.2.1-py37_0/info
     /opt/anaconda3/pkgs/pytest-arraydiff-0.3-py37h39e3cac_0/info
     /opt/anaconda3/pkgs/pytest-astropy-0.5.0-py37_0/info
     /opt/anaconda3/pkgs/pytest-doctestplus-0.4.0-py_0/info
     /opt/anaconda3/pkgs/pytest-openfiles-0.4.0-py_0/info
     /opt/anaconda3/pkgs/pytest-remotedata-0.3.2-py37_0/info
     /opt/anaconda3/pkgs/python-3.7.4-h265db76_1/info
     /opt/anaconda3/pkgs/python-dateutil-2.8.0-py37_0/info
     /opt/anaconda3/pkgs/python-libarchive-c-2.8-py37_13/info
     /opt/anaconda3/pkgs/pytz-2019.3-py_0/info
     /opt/anaconda3/pkgs/pywavelets-1.0.3-py37hdd07704_1/info
     /opt/anaconda3/pkgs/pyyaml-5.1.2-py37h7b6447c_0/info
     /opt/anaconda3/pkgs/pyzmq-18.1.0-py37he6710b0_0/info
     /opt/anaconda3/pkgs/qt-5.9.7-h5867ecd_1/info
     /opt/anaconda3/pkgs/qtawesome-0.6.0-py_0/info
     /opt/anaconda3/pkgs/qtconsole-4.5.5-py_0/info
     /opt/anaconda3/pkgs/qtpy-1.9.0-py_0/info
     /opt/anaconda3/pkgs/readline-7.0-h7b6447c_5/info
     /opt/anaconda3/pkgs/readline-7.0-h7b6447c_5/share/info
     /opt/anaconda3/pkgs/requests-2.22.0-py37_0/info
     /opt/anaconda3/pkgs/ripgrep-0.10.0-hc07d326_0/info
     /opt/anaconda3/pkgs/rope-0.14.0-py_0/info
     /opt/anaconda3/pkgs/ruamel_yaml-0.15.46-py37h14c3975_0/info
     /opt/anaconda3/pkgs/scikit-image-0.15.0-py37he6710b0_0/info
     /opt/anaconda3/pkgs/scikit-learn-0.21.3-py37hd81dba3_0/info
     /opt/anaconda3/pkgs/scipy-1.3.1-py37h7c811a0_0/info
     /opt/anaconda3/pkgs/seaborn-0.9.0-py37_0/info
     /opt/anaconda3/pkgs/secretstorage-3.1.1-py37_0/info
     /opt/anaconda3/pkgs/send2trash-1.5.0-py37_0/info
     /opt/anaconda3/pkgs/setuptools-41.4.0-py37_0/info
     /opt/anaconda3/pkgs/simplegeneric-0.8.1-py37_2/info
     /opt/anaconda3/pkgs/singledispatch-3.4.0.3-py37_0/info
     /opt/anaconda3/pkgs/sip-4.19.8-py37hf484d3e_0/info
     /opt/anaconda3/pkgs/six-1.12.0-py37_0/info
     /opt/anaconda3/pkgs/snappy-1.1.7-hbae5bb6_3/info
     /opt/anaconda3/pkgs/snowballstemmer-2.0.0-py_0/info
     /opt/anaconda3/pkgs/sortedcollections-1.1.2-py37_0/info
     /opt/anaconda3/pkgs/sortedcontainers-2.1.0-py37_0/info
     /opt/anaconda3/pkgs/soupsieve-1.9.3-py37_0/info
     /opt/anaconda3/pkgs/sphinx-2.2.0-py_0/info
     /opt/anaconda3/pkgs/sphinxcontrib-1.0-py37_1/info
     /opt/anaconda3/pkgs/sphinxcontrib-applehelp-1.0.1-py_0/info
     /opt/anaconda3/pkgs/sphinxcontrib-devhelp-1.0.1-py_0/info
     /opt/anaconda3/pkgs/sphinxcontrib-htmlhelp-1.0.2-py_0/info
     /opt/anaconda3/pkgs/sphinxcontrib-jsmath-1.0.1-py_0/info
     /opt/anaconda3/pkgs/sphinxcontrib-qthelp-1.0.2-py_0/info
     /opt/anaconda3/pkgs/sphinxcontrib-serializinghtml-1.1.3-py_0/info
     /opt/anaconda3/pkgs/sphinxcontrib-websupport-1.1.2-py_0/info
     /opt/anaconda3/pkgs/spyder-3.3.6-py37_0/info
     /opt/anaconda3/pkgs/spyder-kernels-0.5.2-py37_0/info
     /opt/anaconda3/pkgs/sqlalchemy-1.3.9-py37h7b6447c_0/info
     /opt/anaconda3/pkgs/sqlite-3.30.0-h7b6447c_0/info
     /opt/anaconda3/pkgs/statsmodels-0.10.1-py37hdd07704_0/info
     /opt/anaconda3/pkgs/sympy-1.4-py37_0/info
     /opt/anaconda3/pkgs/tbb-2019.4-hfd86e86_0/info
     /opt/anaconda3/pkgs/tblib-1.4.0-py_0/info
     /opt/anaconda3/pkgs/terminado-0.8.2-py37_0/info
     /opt/anaconda3/pkgs/testpath-0.4.2-py37_0/info
     /opt/anaconda3/pkgs/tk-8.6.8-hbc83047_0/info
     /opt/anaconda3/pkgs/toolz-0.10.0-py_0/info
     /opt/anaconda3/pkgs/tornado-6.0.3-py37h7b6447c_0/info
     /opt/anaconda3/pkgs/tqdm-4.36.1-py_0/info
     /opt/anaconda3/pkgs/traitlets-4.3.3-py37_0/info
     /opt/anaconda3/pkgs/unicodecsv-0.14.1-py37_0/info
     /opt/anaconda3/pkgs/unixodbc-2.3.7-h14c3975_0/info
     /opt/anaconda3/pkgs/urllib3-1.24.2-py37_0/info
     /opt/anaconda3/pkgs/wcwidth-0.1.7-py37_0/info
     /opt/anaconda3/pkgs/webencodings-0.5.1-py37_1/info
     /opt/anaconda3/pkgs/werkzeug-0.16.0-py_0/info
     /opt/anaconda3/pkgs/wheel-0.33.6-py37_0/info
     /opt/anaconda3/pkgs/widgetsnbextension-3.5.1-py37_0/info
     /opt/anaconda3/pkgs/wrapt-1.11.2-py37h7b6447c_0/info
     /opt/anaconda3/pkgs/wurlitzer-1.0.3-py37_0/info
     /opt/anaconda3/pkgs/xlrd-1.2.0-py37_0/info
     /opt/anaconda3/pkgs/xlsxwriter-1.2.1-py_0/info
     /opt/anaconda3/pkgs/xlwt-1.3.0-py37_0/info
     /opt/anaconda3/pkgs/xz-5.2.4-h14c3975_4/info
     /opt/anaconda3/pkgs/yaml-0.1.7-had09818_2/info
     /opt/anaconda3/pkgs/zeromq-4.3.1-he6710b0_3/info
     /opt/anaconda3/pkgs/zict-1.0.0-py_0/info
     /opt/anaconda3/pkgs/zipp-0.6.0-py_0/info
     /opt/anaconda3/pkgs/zlib-1.2.11-h7b6447c_3/info
     /opt/anaconda3/pkgs/zstd-1.3.7-h0b5b093_0/info
     /opt/anaconda3/pkgs/_ipyw_jlab_nb_ext_conf-0.1.0-py37_0/info
     /opt/anaconda3/pkgs/_libgcc_mutex-0.1-main/info
     /opt/anaconda3/share/info
     /opt/emacs27/share/info
     /opt/GNAT/2019/libexec/spark/share/info
     /opt/GNAT/2019/share/doc/aunit/info
     /opt/GNAT/2019/share/doc/gnat/info
     /opt/GNAT/2019/share/doc/gprbuild/info
     /opt/GNAT/2019/share/info
     /opt/local/share/info
     /opt/rh/gcc-toolset-9/root/usr/local/share/info
     /opt/rh/gcc-toolset-9/root/usr/share/info
     /opt/site-lisp/thirdparty/i-iterate/info
       )))


   #+end_src
* backward compatable
  #+BEGIN_SRC emacs-lisp
(fset 'shell-quote-argument-origin #'shell-quote-argument)       ;원본버젼 )
(defun shell-quote-argument (argument)
  "Quote ARGUMENT for passing as argument to an inferior shell."
  (cond
   ((or (eq system-type 'ms-dos) (and (eq system-type 'windows-nt) (w32-shell-dos-semantics)));;(eq system-type 'ms-dos)

    ;; Quote using double quotes, but escape any existing quotes in
    ;; the argument with backslashes.
    (let ((result "")
          (start 0)
          end)
      (if (or (null (string-match "[^\"]" argument))
              (< (match-end 0) (length argument)))
          (while (string-match "[\"]" argument start)
            (setq end (match-beginning 0)
                  result (concat result (substring argument start end)
                                 "\\" (substring argument end (1+ end)))
                  start (1+ end))))
      (concat "\"" result (substring argument start) "\"")))

   ((and (eq system-type 'windows-nt) (w32-shell-dos-semantics))

    ;; First, quote argument so that CommandLineToArgvW will
    ;; understand it.  See
    ;; http://msdn.microsoft.com/en-us/library/17w5ykft%28v=vs.85%29.aspx
    ;; After we perform that level of quoting, escape shell
    ;; metacharacters so that cmd won't mangle our argument.  If the
    ;; argument contains no double quote characters, we can just
    ;; surround it with double quotes.  Otherwise, we need to prefix
    ;; each shell metacharacter with a caret.

    (setq argument
          ;; escape backslashes at end of string
          (replace-regexp-in-string
           "\\(\\\\*\\)$"
           "\\1\\1"
           ;; escape backslashes and quotes in string body
           (replace-regexp-in-string
            "\\(\\\\*\\)\""
            "\\1\\1\\\\\""
            argument)))

    (if (string-match "[%!\"]" argument)
        (concat
         "^\""
         (replace-regexp-in-string
          "\\([%!()\"<>&|^]\\)"
          "^\\1"
          argument)
         "^\"")
      (concat "\"" argument "\"")))

   (t
    (if (equal argument "")
        "''"
      ;; Quote everything except POSIX filename characters.
      ;; This should be safe enough even for really weird shells.
      (replace-regexp-in-string
       "\n" "'\n'"
       (replace-regexp-in-string "[^-0-9a-zA-Z_./\n]" "\\\\\\&" argument))))
   ))


(if (not (fboundp 'read-only-mode))
    (defalias 'read-only-mode 'toggle-read-only))
  #+END_SRC

* CSV
#+BEGIN_SRC emacs-lisp
(defun csv-sort-date-fields (field beg end)
  "Sort lines in region numerically by the ARGth field of each line.
If not set, the region defaults to the CSV records around point.
Fields are separated by `csv-separators'.
Null fields are allowed anywhere and sort as zeros.
Field indices increase from 1 on the left or decrease from -1 on the right.
A prefix argument specifies a single field, otherwise prompt for field index.
Specified non-null field must contain a number in each line of the region,
which may begin with \"0x\" or \"0\" for hexadecimal and octal values.
Otherwise, the number is interpreted according to sort-numeric-base.
Ignore blank and comment lines.
When called non-interactively, FIELD is a single field index\;
BEG and END specify the region to sort."
  ;; (interactive "*P\nr")
  (interactive (csv-interactive-args 'single))
  (barf-if-buffer-read-only)
  (csv-sort-fields-1 field beg end
		 (lambda ()
		   (csv-sort-skip-fields field)
       (float-time (date-to-time (buffer-substring-no-properties (point) (progn (csv-end-of-field) (point))))))
		 nil))

#+END_SRC
* hydra

** undo
   #+BEGIN_SRC emacs-lisp
     (defhydra hydra-undo-tree (:color yellow :hint nil)
"
_p_: undo
_n_: redo
_s_: save
_l_: load
"
       ("p"   undo-tree-undo)
       ("n"   undo-tree-redo)
       ("s"   undo-tree-save-history)
       ("l"   undo-tree-load-history)
       ("u"   undo-tree-visualize "visualize" :color blue)
       ("q"   nil "quit" :color blue))

   #+END_SRC

   #+RESULTS:
   : hydra-undo-tree/body
* xref backend
  #+BEGIN_SRC emacs-lisp
  (add-to-list 'xref-backend-functions #'gxref-xref-backend)
  #+END_SRC

  #+RESULTS:
  | gxref-xref-backend | etags--xref-backend |
* find-file
  #+BEGIN_SRC emacs-lisp
    (defun openfile ()
      (interactive)
      (find-file (buffer-substring-no-properties (point) (point-at-eol))))
  #+END_SRC

  #+RESULTS:
  : openfile
* password file
  #+BEGIN_SRC emacs-lisp
  (setq espy-password-file "/mnt/develop/orgdir/password.org.gpg")
  #+END_SRC

  #+RESULTS:
  : /mnt/develop/orgdir/password.org.gpg
* SDCV dictionary

  #+begin_src emacs-lisp
    (leaf sdcv
      :ensure t
      :custom (
               (sdcv-dictionary-simple-list  .      ;; a simple dictionary list
                                             '(
                                               "quick_english-korean"
                                               ))
               (sdcv-dictionary-complete-list  .    ;; a complete dictionary list
                                               '(
                                                 "Concise Oxford English Dictionary (En-En)"
                                                 "Concise Oxford Thesaurus 2nd Ed. (Eng-Eng)"
                                                 "Korean Medical Dic"
                                                 "quick_english-korean"
                                                 "Hanja(Korean Hanzi) Dic"
                                                 "Korean Animal Medical Dic"
                                                 "Korean Dic"
                                                 "Korean-English Dic"
                                                 "Korean Law Dic"
                                                 "Kor-Eng Dictionary"
                                                 )))
      :config
      ;; 패키지 내부에 있는 함수 변경
      (defun sdcv-pronounce-word (&optional word)
        "Pronounce `WORD' after querying."
        (apply
         #'async-start-process
         "espeak"
         sdcv-word-pronounce-command
         (lambda (proc ) (delete-process proc ))
         (cons (shell-quote-argument word) (s-split " " sdcv-word-pronounce-command-args)))
        ;;(call-process-shell-command
        ;; sdcv-word-pronounce-command
        ;; nil nil nil
        ;; sdcv-word-pronounce-command-args
        ;; (shell-quote-argument word))
        ))


  #+end_src

  #+RESULTS:
  : sdcv

* plantuml
  #+begin_src emacs-lisp

(require 'iimage)
(autoload 'iimage-mode "iimage" "Support Inline image minor mode." t)
(autoload 'turn-on-iimage-mode "iimage" "Turn on Inline image minor mode." t)
(add-to-list 'iimage-mode-image-regex-alist '("@startuml\s+\\(.+\\)" . 1))

;; Rendering plantuml
(defun plantuml-render-buffer ()
  (interactive)
  (message "PLANTUML Start rendering")
  (shell-command (concat "java -jar ~/Downloads/plantuml.jar "
                         buffer-file-name))
  (message (concat "PLANTUML Rendered:  " (buffer-name))))

;; Image reloading
(defun reload-image-at-point ()
  (interactive)
  (message "reloading image at point in the current buffer...")
  (image-refresh (get-text-property (point) 'display)))

;; Image resizing and reloading
(defun resize-image-at-point ()
  (interactive)
  (message "resizing image at point in the current buffer123...")
  (let* ((image-spec (get-text-property (point) 'display))
         (file (cadr (member :file image-spec))))
    (message (concat "resizing image..." file))
    (shell-command (format "convert -resize %d %s %s "
                           (* (window-width (selected-window)) (frame-char-width))
                           file file))
    (reload-image-at-point)))
  #+end_src
