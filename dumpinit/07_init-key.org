# -*- coding: utf-8; -*-


* key


** window key          
 #+BEGIN_SRC emacs-lisp :tangle no

   ;;;_ hyper key 
   ;; hyper super key define
   ;; setting the PC keyboard's various keys to
   ;; Super or Hyper, for emacs running on Windows.
   ;; super 및 hyper 키 사용하기 
   (setq w32-pass-lwindow-to-system nil 
         w32-pass-rwindow-to-system nil 
         w32-pass-apps-to-system nil 
         w32-lwindow-modifier nil ;;'super ; Left Windows key 
         w32-rwindow-modifier nil ;;'super ; Right Windows key 
         w32-apps-modifier 'nil) ; Menu key

   (when-os 'windows-nt (global-set-key [rwindow] 'counsel-M-x))
   (when-os 'windows-nt 
     (global-set-key [apps] 'dired-jump)
     (global-set-key [S-apps] 'dired))

   ;;hyper super define;;(global-set-key (kbd "H-b") 'backward-word) ; H is for hyper
   ;;hyper super define;;(global-set-key (kbd "s-b") 'backward-word) ; lower case “s” is for super
   ;;hyper super define;;(global-set-key (kbd "M-H-b") 'backward-word) ; Meta+Hyper+b
   ;;hyper super define;;(global-set-key (kbd "M-s-b") 'backward-word) ; Meta+Super+b
   ;;hyper super define;;
   ;;hyper super define;;;; type parens in pairs with Hyper and right hands's home-row
   ;;hyper super define;;(global-set-key (kbd "H-j") (lambda () (interactive) (insert "{}") (backward-char 1)))
   ;;hyper super define;;(global-set-key (kbd "H-k") (lambda () (interactive) (insert "()") (backward-char 1)))
   ;;hyper super define;;(global-set-key (kbd "H-l") (lambda () (interactive) (insert "[]") (backward-char 1)))

#+END_SRC

** mouse scroll
   #+BEGIN_SRC emacs-lisp
   
   ;;(require 'smooth-scroll)
   (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
   (setq mouse-wheel-progressive-speed t) ;;  accelerate scrolling
   (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
   (setq scroll-step 1) ;; keyboard scroll one line at
   #+END_SRC

** esdf                                                         :deprecated:
   #+BEGIN_SRC emacs-lisp :tangle no
   

   ;;;_ esdf-mode

   ;;I use this hack to let me use my left hand more often, which in turn
   ;;lightens the load on my right hand. I started with the more common
   ;;“wasd” but I quickly noticed that “esdf” is much more convenient
   ;;from the home position.  

   (defun esdf-pre-command-hook ()
     "This hook turns OFF `esdf-mode` if you hit
         \(i\) ENTER or
        \(ii\) BACKSPACE or,
       \(iii\) an ASCII character other than esdf (case-insensitive)."
     (let ((k (elt (this-command-keys-vector) 0)))
       (when (or (memq k '(13 backspace))
               (and (numberp k) (>= k 32) (<= k 126)
                      (not (memq k '(?e ?E ?s ?S ?d ?D ?f ?F)))))
         (esdf-mode 0))))

   (define-minor-mode esdf-mode
     "If enabled, esdf will behave exactly like the arrow keys in an inverted-T."
     :global t
     :init-value nil
     :lighter " esdf "
     :keymaps '(([4] . (lambda () (interactive) (esdf-mode 0)))
             ("e" . [up]) ("E" . [S-up])
             ("s" . [left]) ("S" . [S-left])
             ("d" . [down]) ("D" . [S-down])
             ("f" . [right]) ("F" . [S-right]))
     (if esdf-mode (add-hook 'pre-command-hook 'esdf-pre-command-hook)
       (remove-hook 'pre-command-hook 'esdf-pre-command-hook))
     (message "esdf-mode turned %s" (if esdf-mode "ON" "OFF")))

   ;;I use the following bindings to start this minor mode. Mouse-3 is
   ;;the right mouse button on my laptop and it sits right under the
   ;;space-bar. 

   ;;(global-set-key [mouse-3] 'esdf-mode)
   ;;(global-set-key [escape ?e] (lambda () (interactive) (esdf-mode) (previous-line)))
   ;;(global-set-key [escape ?s] (lambda () (interactive) (esdf-mode) (backward-char)))
   ;;(global-set-key [escape ?d] (lambda () (interactive) (esdf-mode) (next-line)))
   ;;(global-set-key [escape ?f] (lambda () (interactive) (esdf-mode) (forward-char)))

   ;;Tested on Emacs 23.2 on Windows.
   ;;
   ;;P.S. In practice I bind the unshifted keys in the keymap to actual
   ;;functions like previous-line and next-line so that Accelerate can
   ;;pick them up. 

#+END_SRC

** fold-dwim                                                    :deprecated:
#+BEGIN_SRC emacs-lisp :tangle no

   ;;;_ fold-dwim
   (require 'fold-dwim)
   ;; more …
   ;;deprecated;;(define-prefix-command 'xah-numpad-keymap)
   ;;deprecated;;(global-set-key (kbd "<kp-home>") 'xah-numpad-keymap)
   ;;deprecated;;(global-set-key (kbd "<kp-home> <kp-home>")      'ibuffer)
   ;;deprecated;;(global-set-key (kbd "<kp-home> <kp-up>")        'bookmark-bmenu-list)
   ;;deprecated;;(global-set-key (kbd "<kp-home> <kp-divide>")    'recentf-open-files)
   ;;deprecated;;(global-set-key (kbd "<kp-home> <kp-multiply>")  'recentf-open-most-recent-file)
   ;;deprecated;;
   ;;deprecated;;(global-set-key (kbd "<kp-home> <kp-end>")    'keyboard-escape-quit)
   ;;deprecated;;(global-set-key (kbd "<kp-home> <kp-add>")      'kill-ring-save)
   ;;deprecated;;(global-set-key (kbd "<kp-home> <kp-enter>")    'yank)
   ;;deprecated;;(global-set-key (kbd "<kp-home> <kp-delete>")   'kill-buffer)
   ;;deprecated;;
   ;;deprecated;;(global-set-key (kbd "<kp-home> <kp-left>")  'fold-dwim-hide-all)
   ;;deprecated;;;;(global-set-key (kbd "<kp-home> <kp-space>") 'fold-dwim-toggle)
   ;;deprecated;;(global-set-key (kbd "<kp-home> <kp-space>") 'kmacro-end-and-call-macro)
   ;;deprecated;;(global-set-key (kbd "<kp-home> <kp-right>") 'fold-dwim-show-all)
   ;;deprecated;;
   ;;deprecated;;(global-set-key (kbd "<kp-home> <kp-down>") 'win-switch-dispatch)
   ;;deprecated;;(global-set-key (kbd "<kp-home> <kp-subtract>") 'kill-line)
   ;;deprecated;;
   ;;deprecated;;(global-set-key (kbd "<kp-home> <kp-insert>") 'projectile-switch-to-buffer)
   ;;deprecated;;

   ;;DEPRECATEDBY-WINSWITH//(global-set-key [M-up] '(lambda ( arg ) (interactive "p" ) ( other-window (* -1 arg) t )))
   ;;DEPRECATEDBY-WINSWITH//(global-set-key [M-down] 'other-window)



   ;; http://www.emacswiki.org/emacs/WinSwitch

   ;;(require 'windcycle)
   ;;windcycle;;(global-set-key (kbd "C-x x") 'delete-other-windows)
   ;;windcycle;;(global-set-key (kbd "C-x c") 'delete-window)
#+END_SRC


** misc
#+BEGIN_SRC emacs-lisp


  (general-define-key
   [S-pause] 'revert-buffer
   [C-f12] 'revert-buffer

   [(f4)] 'next-error
   [(shift f4)] 'previous-error

   [f5] 'repeat
   [f6] 'ff-find-other-file
   [f7] 'isearch-forward-regexp
   [f8] 'isearch-backward-regexp
   [S-f7] 'isearch-forward
   [S-f8] 'isearch-backward

   [S-f10] 'xah-copy-to-register
   [f10] 'xah-append-to-register
   [f11] 'xah-paste-from-register
   [S-f11] 'xah-clear-register
   [f20] 'xah-append-to-register
   [f21] 'xah-clear-register
   ;;donotuseivy;;[f15] 'ivy-resume
   ;;donotuseivy;;[S-f5] 'ivy-resume
   [mouse-8] 'resume

   (kbd "<M-return>") 'imenu
   "M-o" 'other-window
   [remap toggle-input-method] #'toggle-korean-input-method
   )

  (general-define-key
   :keymaps 'isearch-mode-map
   [f7] 'isearch-repeat-forward
   [f8] 'isearch-repeat-backward )

  ;;VERY LITTILE USED;;(global-set-key [f11] 'cscope-find-global-definition )
  ;;VERY LITTILE USED;;(global-set-key [f12] 'cscope-pop-mark )




  ;; (global-unset-key "\M-o" ) 
  ;; (global-set-key "\M-o" 'other-window)
  ;; facemenu-keymap  [[file:35_init-evil.org::*enriched mode][enriched mode]]

#+END_SRC

#+RESULTS:

** package gdb/helm etc
   
#+BEGIN_SRC emacs-lisp

  ;;(leaf counsel-descbinds :ensure t)
  (leaf proced
    :require t
    :bind ((:proced-mode-map
            (";" . proced-gdb)))
    :config 
    (defun proced-gdb ()
      (interactive)
      (let ((pid (proced-pid-at-point)))
        ;; (gdb  (format "gdb -i=mi /proc/%d/exe %d" pid pid))))
        (gdb  (format "/usr/bin/gdb -i=mi /proc/%d/exe %d" pid pid)))))



  (leaf gdb-mi
    :ensure t
    :bind ((:gud-minor-mode-map
            ([left-margin mouse-1] . gdb-mouse-toggle-breakpoint-margin)
            ([left-fringe mouse-1] . gdb-mouse-toggle-breakpoint-fringe)))

    :config
    (defun gud-key ()
      (interactive)
      (general-define-key
       [f5] 'gud-cont
       [f15] 'gud-stop-subjob
       [f9] 'gud-break
       [f19] 'gud-remove
       [f10] 'gud-next
       [C-f10] 'gud-finish
       [f20] 'gud-until
       [f11] 'gud-step
       [f14] 'gdb-restore-windows
       [f12] 'emamux:send-dwim)) 

    (defvar gud-overlay
      (let* ((ov (make-overlay (point-min) (point-min))))
        (overlay-put ov 'face 'dvc-highlight );;secondary-selection 
        ov)
      "Overlay variable for GUD highlighting.")

    (defadvice gud-display-line (after my-gud-highlight act)
      "Highlight current line."
      (let* ((ov gud-overlay)
             (bf (gud-find-file true-file)))
        (save-excursion
          (set-buffer bf)
          (move-overlay ov (line-beginning-position) (line-end-position)
                        (current-buffer)))))

    (defun gud-kill-buffer ()
      (if (eq major-mode 'gud-mode)
          (delete-overlay gud-overlay)))

    (add-hook 'kill-buffer-hook 'gud-kill-buffer)


    ;; (defadvice pop-to-buffer (before cancel-other-window first)
    ;;   (ad-set-arg 1 nil))

    ;; (ad-activate 'pop-to-buffer)


    (defun gdb-inferior-filter (proc string)
      ;;(unless (string-equal string "")
      ;;  (gdb-display-buffer (gdb-get-buffer-create 'gdb-inferior-io)))
      (with-current-buffer (gdb-get-buffer-create 'gdb-inferior-io)
        (comint-output-filter proc string)))


    (if (not gdb-non-stop-setting)
        (defun gud-stop-subjob ()
          (interactive)
          (with-current-buffer gud-comint-buffer
            (cond ((string-equal gud-target-name "emacs")
                   (comint-stop-subjob))
                  ((eq gud-minor-mode 'jdb)
                   (gud-call "suspend"))
                  ;;use-comint;;((eq gud-minor-mode 'gdbmi)
                  ;;use-comint;; (gud-call (gdb-gud-context-command "-exec-interrupt")))
                  (t
                   (comint-interrupt-subjob)))))))
#+END_SRC

#+RESULTS:
: gdb-mi

** xah isearch
#+BEGIN_SRC emacs-lisp
  ;; http://ergoemacs.org/emacs/emacs_isearch_by_arrow_keys.html

  ;; set arrow keys in isearch. left/right is backward/forward, up/down is history. press Return to exit
  (general-define-key
   :keymaps 'isearch-mode-map
   (kbd "<up>") 'isearch-ring-retreat 
   (kbd "<down>") 'isearch-ring-advance 
   (kbd "<left>") 'isearch-repeat-backward
   (kbd "<right>") 'isearch-repeat-forward)

  (general-define-key
   :keymaps 'minibuffer-local-isearch-map
   (kbd "<left>") 'isearch-reverse-exit-minibuffer
   (kbd "<right>") 'isearch-forward-exit-minibuffer)
 #+END_SRC
** repeat-complex command
#+BEGIN_SRC emacs-lisp
  (defun repeat-complex-command-noprompt (arg)
    "Edit and re-evaluate last complex command, or ARGth from last.
  A complex command is one which used the minibuffer.
  The command is placed in the minibuffer as a Lisp form for editing.
  The result is executed, repeating the command as changed.
  If the command has been changed or is not the most recent previous
  command it is added to the front of the command history.
  You can use the minibuffer history commands \
  \\<minibuffer-local-map>\\[next-history-element] and \\[previous-history-element]
  to get different commands to edit and resubmit."
    (interactive "p")
    (let ((elt (nth (1- arg) command-history))
          newcmd)
      (if elt
          (progn
            (setq newcmd elt)

            ;; If command to be redone does not match front of history,
            ;; add it to the history.
            (or (equal newcmd (car command-history))
                (setq command-history (cons newcmd command-history)))
            (apply #'funcall-interactively
                   (car newcmd)
                   (mapcar (lambda (e) (eval e t)) (cdr newcmd))))
        (if command-history
            (error "Argument %d is beyond length of command history" arg)
          (error "There are no previous complex commands to repeat")))))




  (global-set-key [(meta f5)] #'repeat-complex-command) 
  (global-set-key [(shift f5)] #'repeat-complex-command-noprompt) 
#+END_SRC

#+RESULTS:
: repeat-complex-command-noprompt


** ace-link
   #+BEGIN_SRC emacs-lisp
   (ace-link-setup-default)
   #+END_SRC
** toggle maximize-buffer :deprecated:
#+begin_src emacs-lisp :tangle on 

  (global-set-key [f14] 'spacemacs/toggle-maximize-buffer)
  (global-set-key [S-f14] (lambda () (interactive) (save-mark-and-excursion (switch-to-buffer-other-window "*Occur*") (other-window 1))))
  (global-set-key [M-f14] (lambda () (interactive) (save-mark-and-excursion (switch-to-buffer-other-window "*Grep*") (other-window 1))))
  (global-set-key [f9] 'other-window)
  (global-set-key [insert] 'counsel-M-x)

#+end_src
