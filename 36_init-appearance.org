# -*- coding: utf-8; -*-

* header
#+BEGIN_SRC emacs-lisp
;; -*-mode: emacs-lisp; coding: utf-8; buffer-read-only: t;-*-

#+END_SRC
* theme
#+BEGIN_SRC emacs-lisp

;;(require 'color-theme)
;;(color-theme-initialize )
;;(color-theme-blue2)
;;(color-theme-dark-blue2-noitalic)
;;(color-theme-emacs-21)
;;(color-theme-blue)
;;(color-theme-jonadabian)
;;(color-theme-jacobian)
;; outlinemode 를 대체합니다. 
;;(color-theme-vim-colors)
;;(color-theme-emacs-nw)
;;(color-theme-gtk-ide)

;;(require 'zenburn)
;;;;(require 'color-theme-zenburn)
;;;;(require 'color-theme)
;;(color-theme-zenburn)
;; (load-theme 'hc-zenburn)
;; (load-theme 'zenburn)

;;(require 'color-theme)

;; (load-theme 'zenburn)
;;; 둘을 더한 것이 더 좋은 결과를 가져온다. 
;;thisisgood;;(color-theme-sanityinc-solarized-dark)
;;(load-theme 'misterioso)

;; (ignore-errors
;;   (color-theme-sanityinc-solarized-dark)
;;   (add-to-list 'custom-theme-load-path "~/.emacs.d/")
;;   (load-theme 'misterioso-no-modeline t))

;;deprecated;;(add-to-list 'custom-theme-load-path (fullpath "../elpa/moe-theme-20131105.213"))
;;deprecated;;(load-theme 'moe-dark t )



;; (load-theme 'solarized-dark)
;;(load-theme 'solarized-light)
;;(load-theme 'tango)
;; (load-theme 'ample)

(tool-bar-mode 0 )
(menu-bar-mode 0 )
(if (fboundp 'scroll-bar-mode)
    (scroll-bar-mode -1 ))

(defun transparent(alpha-level no-focus-alpha-level)
  "Let's you make the window transparent"
  (interactive "nAlpha level (0-100): \nnNo focus alpha level (0-100): ")
  (set-frame-parameter (selected-frame) 'alpha (list alpha-level no-focus-alpha-level))
  (add-to-list 'default-frame-alist `(alpha ,alpha-level)))

;; three window 
(defun split-window-4()
 "Splite window into 4 sub-window"
 (interactive)
 (if (= 1 (length (window-list)))
     (progn (split-window-vertically)
	    (split-window-horizontally)
	    (other-window 2)
	    (split-window-horizontally)
	    )
   )
)

(defun change-split-type (split-fn &optional arg)
  "Change 3 window style from horizontal to vertical and vice-versa"
  (let ((bufList (mapcar 'window-buffer (window-list))))
    (select-window (get-largest-window))
    (funcall split-fn arg)
    (mapcar* 'set-window-buffer (window-list) bufList)))

(defun change-split-type-2 (&optional arg)
  "Changes splitting from vertical to horizontal and vice-versa"
  (interactive "P")
  (let ((split-type (lambda (&optional arg)
                      (delete-other-windows-internal)
                      (if arg (split-window-vertically)
                        (split-window-horizontally)))))
    (change-split-type split-type arg)))

(defun change-split-type-3-v (&optional arg)
  "change 3 window style from horizon to vertical"
  (interactive "P")
  (change-split-type 'split-window-3-horizontally arg))

(defun change-split-type-3-h (&optional arg)
  "change 3 window style from vertical to horizon"
  (interactive "P")
  (change-split-type 'split-window-3-vertically arg))

(defun split-window-3-horizontally (&optional arg)
  "Split window into 3 while largest one is in horizon"
;  (interactive "P")
  (delete-other-windows)
  (split-window-horizontally)
  (if arg (other-window 1))
  (split-window-vertically))

(defun split-window-3-vertically (&optional arg)
  "Split window into 3 while largest one is in vertical"
;  (interactive "P")
  (delete-other-windows)
  (split-window-vertically)
  (if arg (other-window 1))
  (split-window-horizontally))

;;deprecated;;;; paren
;;deprecated;;;; http://emacswiki.org/emacs/ShowParenMode
;;deprecated;;(require 'mic-paren)
;;deprecated;;(paren-activate)
;;deprecated;;(show-paren-mode t)

;;option(setq show-paren-delay 0)           ; how long to wait?
;;option(show-paren-mode t)                 ; turn paren-mode on
;;option(setq show-paren-style 'expression) ; alternatives are 'parenthesis' and 'mixed'
;;option(setq show-paren-style 'parenthesis)
;;option(setq show-paren-style 'mixed)

(require 'frame-cmds)
(define-key global-map "\C-xt." 'save-frame-config)
(define-key global-map "\C-xt," 'jump-to-frame-config-register)

;;(require 'autofit-frame)


(defun toggle-frame-split ()
  "If the frame is split vertically, split it horizontally or vice versa.
Assumes that the frame is only split into two."
  (interactive)
  (unless (= (length (window-list)) 2) (error "Can only toggle a frame split in two"))
  (let ((split-vertically-p (window-combined-p)))
    (delete-window) ; closes current window
    (if split-vertically-p
        (split-window-horizontally)
      (split-window-vertically)) ; gives us a split with the other window twice
    (switch-to-buffer nil))) ; restore the original window in this part of the frame

;; I don't use the default binding of 'C-x 5', so use toggle-frame-split instead

;;; (global-set-key (kbd "C-x 5") 'toggle-frame-split)


;;; modeline 
;; http://emacs-fu.blogspot.kr/2010/05/cleaning-up-mode-line.html



;;And the major-modes, for example for Emacs Lisp mode:
;;
;;(add-hook 'emacs-lisp-mode-hook 
;;  (lambda()
;;    (setq mode-name "el")))
(require 'whitespace)
(setq whitespace-line-column 80) ;; limit line length
(setq whitespace-style '(face lines-tail))


;;customize;; (add-hook 'prog-mode-hook 'whitespace-mode)
;;customize;; (global-whitespace-mode +1)

(winner-mode t )

;; (with-package* (smart-mode-line) (sml-modeline-mode))

(use-package diminish
  :config
  (diminish 'company-mode "Cmp")
  (diminish 'abbrev-mode "Ab")
  (diminish 'yas/minor-mode "Y")
  (diminish 'yas/minor-mode "Y")
  (diminish 'undo-tree-mode "ut")
  (diminish 'paredit-mode "pe")
  (diminish 'emacs-lisp-mode "EL")
  (diminish 'elisp-mode "el")
  (diminish 'evil-org-mode ))

;;deprecated;;(use-package sml-modeline
;;deprecated;;  :config
;;deprecated;;  (sml-modeline-mode))

;;conflictwithhelm;;(with-package* (modeline-posn)
;;conflictwithhelm;;  (size-indication-mode t))

;;deprecated;;(defun update-diff-colors ()
;;deprecated;;  "update the colors for diff faces"
;;deprecated;;  (set-face-attribute 'diff-added nil
;;deprecated;;                      :foreground "white" :background "blue")
;;deprecated;;  (set-face-attribute 'diff-removed nil
;;deprecated;;                      :foreground "white" :background "red3")
;;deprecated;;  (set-face-attribute 'diff-changed nil
;;deprecated;;                      :foreground "white" :background "purple"))
;;deprecated;;;;(eval-after-load "diff-mode" '(update-diff-colors))



;; https://github.com/Bruce-Connor/smart-mode-line

;;deprecated;;(require 'smart-mode-line)
;;deprecated;;(if after-init-time (sml/setup)
;;deprecated;;  (add-hook 'after-init-hook 'sml/setup))


(with-package* (fringe-current-line)
  (global-fringe-current-line-mode t)
)


;; http://ergoemacs.org/emacs/emacs_pretty_lambda.html
(setq prettify-symbols-alist
      '(
        ("lambda" . 955) ; λ
        ("->" . 8594)    ; →
        ("=>" . 8658)    ; ⇒
        ("map" . 8614)    ; ↦
        ))


;;(defun my-add-pretty-lambda ()
;;  "make some word or string show as pretty Unicode symbols"
;;  (setq prettify-symbols-alist
;;        '(
;;          ("lambda" . 955) ; λ
;;          ("->" . 8594)    ; →
;;          ("=>" . 8658)    ; ⇒
;;          ("map" . 8614)   ; ↦
;;          )))
;;
;;(add-hook 'clojure-mode-hook 'my-add-pretty-lambda)
;;(add-hook 'haskell-mode-hook 'my-add-pretty-lambda)
;;(add-hook 'shen-mode-hook 'my-add-pretty-lambda)
;;(add-hook 'tex-mode-hook 'my-add-pretty-lambda)


(add-hook 'python-mode-hook 'prettify-symbols-mode )
(add-hook 'emacs-lisp-mode-hook 'prettify-symbols-mode)
(add-hook 'scheme-mode-hook 'prettify-symbols-mode)

;;(add-hook 'c++-mode-hook        'pretty-symbols-mode)

(use-package modern-cpp-font-lock
  :config
  (modern-c++-font-lock-global-mode t))
;;; http://www.reddit.com/r/emacs/comments/1huhsg/i_need_help_with_adding_keywords_for_syntax/
;; font lock 설정 
(global-font-lock-mode 1)                     ; for all buffers
#+END_SRC
* font
#+BEGIN_SRC emacs-lisp
(defun* cycle-font (num &optional (hangul nil))
  "Change font in current frame.
Each time this is called, font cycles thru a predefined set of fonts.
If NUM is 1, cycle forward.
If NUM is -1, cycle backward.
Warning: tested on Windows Vista only."
  (interactive "p")
  ;; this function sets a property “state”. It is a integer. Possible values are any index to the fontList.
  (let (fontList hanFontList fontToUse currentState nextState )
    (setq fontList (list
                    "Courier New-10" 
                    "DejaVu Sans Mono-9" 
                    "Lucida Console-10"
                    "DejaVu Sans-10" 
                    "Lucida Sans Unicode-10" 
                    "Arial Unicode MS-10" 
                    "Consolas-10"
                    "Inconsolata-10"
                    "Monaco-9"
                    ))
    (setq hanFontList (list
                       '("돋움체" . "unicode-bmp")
                       '("새굴림" . "unicode-bmp")
                       '("나눔고딕_코딩" . "unicode-bmp")
                       '("맑은 고딕" . "unicode-bmp")
                       '("나눔고딕코딩" . "unicode-bmp")
                    ))
    ;; fixed-width "Courier New" "Unifont"  "FixedsysTTF" "Miriam Fixed" "Lucida Console" "Lucida Sans Typewriter"
    ;; variable-width "Code2000"
    
    (if hangul
        (progn
          (setq currentState (if (get 'cycle-font 'hanstate) (get 'cycle-font 'hanstate) 0))
          (setq nextState (% (+ currentState (length hanFontList) num) (length hanFontList)))
          (setq fontToUse (nth nextState hanFontList))
          (set-fontset-font "fontset-default" 'hangul fontToUse)
          (redraw-frame (selected-frame))
          (message "Current font is: %s" (car fontToUse ))
          (put 'cycle-font 'hanstate nextState)
          )
      (progn
        (setq currentState (if (get 'cycle-font 'state) (get 'cycle-font 'state) 0))
        (setq nextState (% (+ currentState (length fontList) num) (length fontList)))
        (setq fontToUse (nth nextState fontList))
        ;;(set-frame-parameter nil 'font fontToUse)
        (set-face-font 'default fontToUse)
        (redraw-frame (selected-frame))
        (message "Current font is: %s" fontToUse )
        (put 'cycle-font 'state nextState)
        )
      )))

(defun cycle-font-forward (&optional hangul)
  "Switch to the next font, in the current frame.
See `cycle-font'."
  (interactive "P")
  (if hangul
      (cycle-font 1 t)
    (cycle-font 1 nil)
  ))

(defun cycle-font-backward(&optional hangul)
  "Switch to the previous font, in the current frame.
See `cycle-font'."
  (interactive "P")
  (if hangul
      (cycle-font -1 t)
    (cycle-font -1 nil)
  ))

;; https://github.com/rolandwalker/unicode-fonts
;; (with-package* (unicode-fonts)
;;   (unicode-fonts-setup))

;; (with-package* (dynamic-fonts)
;;   (dynamic-fonts-setup))


(defvar fontsize 16)
(defvar symbolsize 20)


(let ((defaultfont (find-if 
                    (lambda (x) (font-utils-exists-p x)) 
                    '(
                      "Ubuntu Mono"
                      ;; "Bitstream Vera Sans Mono"
                      ;; "DejaVu Sans Mono"
                      ;; "Consolas"
                      ;; "Inconsolata"
                      ;; "Source Code Pro"
                      ;; "Menlo"
                      ))))
  (if (stringp  defaultfont)
      (set-fontset-font "fontset-default" 'latin (font-spec :name defaultfont :size 17) )))


(let ((symbolfont (find-if 
                    (lambda (x) (font-utils-exists-p x)) 
                    '( "StixGeneral"))))
  (if (stringp  symbolfont) 
      (dolist (x '(symbol greek mathematical (9089 . 9090)))
       (set-fontset-font "fontset-default" x (font-spec :name symbolfont :size symbolsize ))))) 



(let ((emojifont (find-if 
                    (lambda (x) (font-utils-exists-p x)) 
                    '( "Noto Emoji"))))
  (if (stringp  emojifont) 
      (progn 
        (set-fontset-font "fontset-default" (cons #x1F004 #xFE4EE) (font-spec :name "Noto Emoji"  :size symbolsize)  ) 
        )))


(let ((hangulfont (find-if 
                    (lambda (x) (font-utils-exists-p x)) 
                    '( "맑은 고딕" "돋움체" "나눔고딕코딩"))))
  (if (stringp  hangulfont) 
      (progn 
        (set-fontset-font "fontset-default" 'hangul          (font-spec :name  hangulfont  :size fontsize) )
        (set-fontset-font "fontset-default" '(8251 . 8252)   (font-spec :name  hangulfont  :size fontsize) )
        (set-fontset-font "fontset-default" '(61548 . 61549) (font-spec :name  hangulfont  :size fontsize) ))))


(let ((fallbackfont (find-if 
                    (lambda (x) (font-utils-exists-p x)) 
                    '(  "Symbola"  "StixGeneral"  ))))
  (if (stringp  fallbackfont) 
      (set-fontset-font "fontset-default" nil (font-spec :name fallbackfont :size fontsize))))


;; https://www.emacswiki.org/emacs/FontSets
(set-face-font 'default "fontset-default")



(setq 
 font-lock-maximum-decoration 
 '(
   (c-mode . t)
   ;;(c++-mode . 1)
   (c++-mode . 2)
   (t . t)
   ))

;; (use-package unicode-fonts
;;   :config
;;   (unicode-fonts-setup))

;;(setq font-lock-support-mode 'fast-lock-mode ; lazy-lock-mode jit-lock-mode
;;      fast-lock-cache-directories '("~/.emacs-flc"))

;; 모드별로 키워드 추가가 가능하다. 
;; http://www.emacswiki.org/emacs/AddKeywords
;;FONT-LOCK;;(defvar font-lock-comment-face		'font-lock-comment-face
;;FONT-LOCK;;  "Face name to use for comments.")

;;customize;;(font-lock-add-keywords 'python-mode
;;customize;;  '(("\\btry\\b" . font-lock-keyword-face)
;;customize;;    ("\\bfinally\\b" . font-lock-keyword-face)
;;customize;;    ("\\bwith\\b" . font-lock-keyword-face)
;;customize;;    ("\\bas\\b" . font-lock-keyword-face)
;;customize;;    ))




;; https://en.wikipedia.org/wiki/Unicode_block
;; https://www.gnu.org/software/emacs/manual/html_node/emacs/Modifying-Fontsets.html


;;; 22.15 Modifying Fontsets
;;; 
;;; Fontsets do not always have to be created from scratch. If only minor changes are required it may be easier to modify an existing fontset. Modifying ‘fontset-default’ will also affect other fontsets that use it as a fallback, so can be an effective way of fixing problems with the fonts that Emacs chooses for a particular script.
;;; 
;;; Fontsets can be modified using the function set-fontset-font, specifying a character, a charset, a script, or a range of characters to modify the font for, and a font specification for the font to be used. Some examples are:
;;; 
;;; ;; Use Liberation Mono for latin-3 charset.
;;; (set-fontset-font "fontset-default" 'iso-8859-3
;;;                   "Liberation Mono")
;;; 
;;; ;; Prefer a big5 font for han characters
;;; (set-fontset-font "fontset-default"
;;;                   'han (font-spec :registry "big5")
;;;                   nil 'prepend)
;;; 
;;; ;; Use DejaVu Sans Mono as a fallback in fontset-startup
;;; ;; before resorting to fontset-default.
;;; (set-fontset-font "fontset-startup" nil "DejaVu Sans Mono"
;;;                   nil 'append)
;;; 
;;; ;; Use MyPrivateFont for the Unicode private use area.
;;; (set-fontset-font "fontset-default"  '(#xe000 . #xf8ff)
;;;                   "MyPrivateFont")

#+END_SRC

#+RESULTS:
: ((c-mode . t) (c++-mode . 2) (t . t))


** check
   #+BEGIN_SRC emacs-lisp :tangle no
     (dolist (x
     '(
     #x1F004
     #x1F0CF
     #x1F170
     #x1F171
     #x1F17E
     #x1F17F
     #x1F18E
     #x1F191
     #x1F192
     #x1F193
     #x1F194
     #x1F195
     #x1F196
     #x1F197
     #x1F198
     #x1F199
     #x1F19A
     #x1F1E6
     #x1F1E7
     #x1F1E8
     #x1F1E9
     #x1F1EA
     #x1F1EB
     #x1F1EC
     #x1F1ED
     #x1F1EE
     #x1F1EF
     #x1F1F0
     #x1F1F1
     #x1F1F2
     #x1F1F3
     #x1F1F4
     #x1F1F5
     #x1F1F6
     #x1F1F7
     #x1F1F8
     #x1F1F9
     #x1F1FA
     #x1F1FB
     #x1F1FC
     #x1F1FD
     #x1F1FE
     #x1F1FF
     #x1F201
     #x1F202
     #x1F21A
     #x1F22F
     #x1F232
     #x1F233
     #x1F234
     #x1F235
     #x1F236
     #x1F237
     #x1F238
     #x1F239
     #x1F23A
     #x1F250
     #x1F251
     #x1F300
     #x1F301
     #x1F302
     #x1F303
     #x1F304
     #x1F305
     #x1F306
     #x1F307
     #x1F308
     #x1F309
     #x1F30A
     #x1F30B
     #x1F30C
     #x1F30D
     #x1F30E
     #x1F30F
     #x1F310
     #x1F311
     #x1F312
     #x1F313
     #x1F314
     #x1F315
     #x1F316
     #x1F317
     #x1F318
     #x1F319
     #x1F31A
     #x1F31B
     #x1F31C
     #x1F31D
     #x1F31E
     #x1F31F
     #x1F320
     #x1F330
     #x1F331
     #x1F332
     #x1F333
     #x1F334
     #x1F335
     #x1F337
     #x1F338
     #x1F339
     #x1F33A
     #x1F33B
     #x1F33C
     #x1F33D
     #x1F33E
     #x1F33F
     #x1F340
     #x1F341
     #x1F342
     #x1F343
     #x1F344
     #x1F345
     #x1F346
     #x1F347
     #x1F348
     #x1F349
     #x1F34A
     #x1F34B
     #x1F34C
     #x1F34D
     #x1F34E
     #x1F34F
     #x1F350
     #x1F351
     #x1F352
     #x1F353
     #x1F354
     #x1F355
     #x1F356
     #x1F357
     #x1F358
     #x1F359
     #x1F35A
     #x1F35B
     #x1F35C
     #x1F35D
     #x1F35E
     #x1F35F
     #x1F360
     #x1F361
     #x1F362
     #x1F363
     #x1F364
     #x1F365
     #x1F366
     #x1F367
     #x1F368
     #x1F369
     #x1F36A
     #x1F36B
     #x1F36C
     #x1F36D
     #x1F36E
     #x1F36F
     #x1F370
     #x1F371
     #x1F372
     #x1F373
     #x1F374
     #x1F375
     #x1F376
     #x1F377
     #x1F378
     #x1F379
     #x1F37A
     #x1F37B
     #x1F37C
     #x1F380
     #x1F381
     #x1F382
     #x1F383
     #x1F384
     #x1F385
     #x1F386
     #x1F387
     #x1F388
     #x1F389
     #x1F38A
     #x1F38B
     #x1F38C
     #x1F38D
     #x1F38E
     #x1F38F
     #x1F390
     #x1F391
     #x1F392
     #x1F393
     #x1F3A0
     #x1F3A1
     #x1F3A2
     #x1F3A3
     #x1F3A4
     #x1F3A5
     #x1F3A6
     #x1F3A7
     #x1F3A8
     #x1F3A9
     #x1F3AA
     #x1F3AB
     #x1F3AC
     #x1F3AD
     #x1F3AE
     #x1F3AF
     #x1F3B0
     #x1F3B1
     #x1F3B2
     #x1F3B3
     #x1F3B4
     #x1F3B5
     #x1F3B6
     #x1F3B7
     #x1F3B8
     #x1F3B9
     #x1F3BA
     #x1F3BB
     #x1F3BC
     #x1F3BD
     #x1F3BE
     #x1F3BF
     #x1F3C0
     #x1F3C1
     #x1F3C2
     #x1F3C3
     #x1F3C4
     #x1F3C6
     #x1F3C7
     #x1F3C8
     #x1F3C9
     #x1F3CA
     #x1F3E0
     #x1F3E1
     #x1F3E2
     #x1F3E3
     #x1F3E4
     #x1F3E5
     #x1F3E6
     #x1F3E7
     #x1F3E8
     #x1F3E9
     #x1F3EA
     #x1F3EB
     #x1F3EC
     #x1F3ED
     #x1F3EE
     #x1F3EF
     #x1F3F0
     #x1F400
     #x1F401
     #x1F402
     #x1F403
     #x1F404
     #x1F405
     #x1F406
     #x1F407
     #x1F408
     #x1F409
     #x1F40A
     #x1F40B
     #x1F40C
     #x1F40D
     #x1F40E
     #x1F40F
     #x1F410
     #x1F411
     #x1F412
     #x1F413
     #x1F414
     #x1F415
     #x1F416
     #x1F417
     #x1F418
     #x1F419
     #x1F41A
     #x1F41B
     #x1F41C
     #x1F41D
     #x1F41E
     #x1F41F
     #x1F420
     #x1F421
     #x1F422
     #x1F423
     #x1F424
     #x1F425
     #x1F426
     #x1F427
     #x1F428
     #x1F429
     #x1F42B
     #x1F42C
     #x1F42D
     #x1F42E
     #x1F42F
     #x1F430
     #x1F431
     #x1F432
     #x1F433
     #x1F434
     #x1F435
     #x1F436
     #x1F437
     #x1F438
     #x1F439
     #x1F43A
     #x1F43B
     #x1F43C
     #x1F43D
     #x1F43E
     #x1F440
     #x1F442
     #x1F443
     #x1F444
     #x1F445
     #x1F446
     #x1F447
     #x1F448
     #x1F449
     #x1F44A
     #x1F44B
     #x1F44C
     #x1F44D
     #x1F44E
     #x1F44F
     #x1F450
     #x1F451
     #x1F452
     #x1F453
     #x1F454
     #x1F455
     #x1F456
     #x1F457
     #x1F458
     #x1F459
     #x1F45A
     #x1F45B
     #x1F45C
     #x1F45D
     #x1F45E
     #x1F45F
     #x1F460
     #x1F461
     #x1F462
     #x1F463
     #x1F464
     #x1F465
     #x1F466
     #x1F467
     #x1F468
     #x1F469
     #x1F46A
     #x1F46B
     #x1F46C
     #x1F46D
     #x1F46E
     #x1F46F
     #x1F470
     #x1F471
     #x1F472
     #x1F473
     #x1F474
     #x1F475
     #x1F476
     #x1F477
     #x1F478
     #x1F479
     #x1F47A
     #x1F47B
     #x1F47C
     #x1F47D
     #x1F47E
     #x1F47F
     #x1F480
     #x1F481
     #x1F482
     #x1F483
     #x1F484
     #x1F485
     #x1F486
     #x1F487
     #x1F488
     #x1F489
     #x1F48A
     #x1F48B
     #x1F48C
     #x1F48D
     #x1F48E
     #x1F48F
     #x1F490
     #x1F491
     #x1F492
     #x1F493
     #x1F494
     #x1F495
     #x1F496
     #x1F497
     #x1F498
     #x1F499
     #x1F49A
     #x1F49B
     #x1F49C
     #x1F49D
     #x1F49E
     #x1F49F
     #x1F4A0
     #x1F4A1
     #x1F4A2
     #x1F4A3
     #x1F4A4
     #x1F4A5
     #x1F4A6
     #x1F4A7
     #x1F4A8
     #x1F4A9
     #x1F4AA
     #x1F4AB
     #x1F4AC
     #x1F4AD
     #x1F4AE
     #x1F4AF
     #x1F4B0
     #x1F4B1
     #x1F4B2
     #x1F4B3
     #x1F4B4
     #x1F4B5
     #x1F4B6
     #x1F4B7
     #x1F4B8
     #x1F4B9
     #x1F4BA
     #x1F4BB
     #x1F4BC
     #x1F4BD
     #x1F4BE
     #x1F4BF
     #x1F4C0
     #x1F4C1
     #x1F4C2
     #x1F4C3
     #x1F4C4
     #x1F4C5
     #x1F4C6
     #x1F4C7
     #x1F4C8
     #x1F4C9
     #x1F4CA
     #x1F4CB
     #x1F4CC
     #x1F4CD
     #x1F4CE
     #x1F4CF
     #x1F4D0
     #x1F4D1
     #x1F4D2
     #x1F4D3
     #x1F4D4
     #x1F4D5
     #x1F4D6
     #x1F4D7
     #x1F4D8
     #x1F4D9
     #x1F4DA
     #x1F4DB
     #x1F4DC
     #x1F4DD
     #x1F4DE
     #x1F4DF
     #x1F4E0
     #x1F4E1
     #x1F4E2
     #x1F4E3
     #x1F4E4
     #x1F4E5
     #x1F4E6
     #x1F4E7
     #x1F4E8
     #x1F4E9
     #x1F4EA
     #x1F4EB
     #x1F4EC
     #x1F4ED
     #x1F4EE
     #x1F4EF
     #x1F4F0
     #x1F4F1
     #x1F4F2
     #x1F4F3
     #x1F4F4
     #x1F4F5
     #x1F4F6
     #x1F4F7
     #x1F4F9
     #x1F4FA
     #x1F4FB
     #x1F4FC
     #x1F500
     #x1F501
     #x1F502
     #x1F503
     #x1F504
     #x1F505
     #x1F506
     #x1F507
     #x1F508
     #x1F509
     #x1F50A
     #x1F50B
     #x1F50C
     #x1F50D
     #x1F50E
     #x1F50F
     #x1F510
     #x1F511
     #x1F512
     #x1F513
     #x1F514
     #x1F515
     #x1F516
     #x1F517
     #x1F518
     #x1F519
     #x1F51A
     #x1F51B
     #x1F51C
     #x1F51D
     #x1F51E
     #x1F51F
     #x1F520
     #x1F521
     #x1F522
     #x1F523
     #x1F524
     #x1F525
     #x1F526
     #x1F527
     #x1F528
     #x1F529
     #x1F52A
     #x1F52B
     #x1F52C
     #x1F52D
     #x1F52E
     #x1F52F
     #x1F530
     #x1F531
     #x1F532
     #x1F533
     #x1F534
     #x1F535
     #x1F536
     #x1F537
     #x1F538
     #x1F539
     #x1F53A
     #x1F53B
     #x1F53C
     #x1F53D
     #x1F550
     #x1F551
     #x1F552
     #x1F553
     #x1F554
     #x1F555
     #x1F556
     #x1F557
     #x1F558
     #x1F559
     #x1F55A
     #x1F55B
     #x1F55C
     #x1F55D
     #x1F55E
     #x1F55F
     #x1F560
     #x1F561
     #x1F562
     #x1F563
     #x1F564
     #x1F565
     #x1F566
     #x1F567
     #x1F5FB
     #x1F5FC
     #x1F5FD
     #x1F5FE
     #x1F5FF
     #x1F600
     #x1F601
     #x1F602
     #x1F603
     #x1F604
     #x1F605
     #x1F606
     #x1F607
     #x1F608
     #x1F609
     #x1F60A
     #x1F60B
     #x1F60C
     #x1F60D
     #x1F60E
     #x1F60F
     #x1F610
     #x1F611
     #x1F612
     #x1F613
     #x1F614
     #x1F615
     #x1F616
     #x1F617
     #x1F618
     #x1F619
     #x1F61A
     #x1F61B
     #x1F61C
     #x1F61D
     #x1F61E
     #x1F61F
     #x1F620
     #x1F621
     #x1F622
     #x1F623
     #x1F624
     #x1F625
     #x1F626
     #x1F627
     #x1F628
     #x1F629
     #x1F62A
     #x1F62B
     #x1F62C
     #x1F62D
     #x1F62E
     #x1F62F
     #x1F630
     #x1F631
     #x1F632
     #x1F633
     #x1F634
     #x1F635
     #x1F636
     #x1F637
     #x1F638
     #x1F639
     #x1F63A
     #x1F63B
     #x1F63C
     #x1F63D
     #x1F63E
     #x1F63F
     #x1F640
     #x1F645
     #x1F646
     #x1F647
     #x1F648
     #x1F649
     #x1F64A
     #x1F64B
     #x1F64C
     #x1F64D
     #x1F64E
     #x1F64F
     #x1F680
     #x1F681
     #x1F682
     #x1F683
     #x1F684
     #x1F685
     #x1F686
     #x1F687
     #x1F688
     #x1F689
     #x1F68A
     #x1F68B
     #x1F68C
     #x1F68D
     #x1F68E
     #x1F68F
     #x1F690
     #x1F691
     #x1F692
     #x1F693
     #x1F694
     #x1F695
     #x1F696
     #x1F697
     #x1F699
     #x1F69A
     #x1F69B
     #x1F69C
     #x1F69D
     #x1F69E
     #x1F69F
     #x1F6A0
     #x1F6A1
     #x1F6A2
     #x1F6A3
     #x1F6A4
     #x1F6A5
     #x1F6A6
     #x1F6A7
     #x1F6A8
     #x1F6A9
     #x1F6AA
     #x1F6AB
     #x1F6AC
     #x1F6AD
     #x1F6AE
     #x1F6AF
     #x1F6B0
     #x1F6B1
     #x1F6B2
     #x1F6B3
     #x1F6B4
     #x1F6B5
     #x1F6B6
     #x1F6B7
     #x1F6B8
     #x1F6B9
     #x1F6BA
     #x1F6BB
     #x1F6BC
     #x1F6BD
     #x1F6BE
     #x1F6BF
     #x1F6C0
     #x1F6C1
     #x1F6C2
     #x1F6C3
     #x1F6C4
     #x1F6C5
     #xFE4E5
     #xFE4E6
     #xFE4E7
     #xFE4E8
     #xFE4E9
     #xFE4EA
     #xFE4EB
     #xFE4EC
     #xFE4ED
     #xFE4EE))
     (insert "\n")
     (insert-char x)
     )

   #+END_SRC
