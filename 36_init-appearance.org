# -*- coding: utf-8; -*-

* header
#+BEGIN_SRC emacs-lisp
;; -*-mode: emacs-lisp; coding: utf-8; buffer-read-only: t;-*-

#+END_SRC
* theme
#+BEGIN_SRC emacs-lisp

;;(require 'color-theme)
;;(color-theme-initialize )
;;(color-theme-blue2)
;;(color-theme-dark-blue2-noitalic)
;;(color-theme-emacs-21)
;;(color-theme-blue)
;;(color-theme-jonadabian)
;;(color-theme-jacobian)
;; outlinemode 를 대체합니다. 
;;(color-theme-vim-colors)
;;(color-theme-emacs-nw)
;;(color-theme-gtk-ide)

;;(require 'zenburn)
;;;;(require 'color-theme-zenburn)
;;;;(require 'color-theme)
;;(color-theme-zenburn)
;; (load-theme 'hc-zenburn)
;; (load-theme 'zenburn)

;;(require 'color-theme)

;; (load-theme 'zenburn)
;;; 둘을 더한 것이 더 좋은 결과를 가져온다. 
;;thisisgood;;(color-theme-sanityinc-solarized-dark)
;;(load-theme 'misterioso)

;; (ignore-errors
;;   (color-theme-sanityinc-solarized-dark)
;;   (add-to-list 'custom-theme-load-path "~/.emacs.d/")
;;   (load-theme 'misterioso-no-modeline t))

;;deprecated;;(add-to-list 'custom-theme-load-path (fullpath "../elpa/moe-theme-20131105.213"))
;;deprecated;;(load-theme 'moe-dark t )



;; (load-theme 'solarized-dark)
;;(load-theme 'solarized-light)
;;(load-theme 'tango)
;; (load-theme 'ample)

(tool-bar-mode 0 )
(menu-bar-mode 0 )
(if (fboundp 'scroll-bar-mode)
    (scroll-bar-mode -1 ))

(defun transparent(alpha-level no-focus-alpha-level)
  "Let's you make the window transparent"
  (interactive "nAlpha level (0-100): \nnNo focus alpha level (0-100): ")
  (set-frame-parameter (selected-frame) 'alpha (list alpha-level no-focus-alpha-level))
  (add-to-list 'default-frame-alist `(alpha ,alpha-level)))

;; three window 
(defun split-window-4()
 "Splite window into 4 sub-window"
 (interactive)
 (if (= 1 (length (window-list)))
     (progn (split-window-vertically)
	    (split-window-horizontally)
	    (other-window 2)
	    (split-window-horizontally)
	    )
   )
)

(defun change-split-type (split-fn &optional arg)
  "Change 3 window style from horizontal to vertical and vice-versa"
  (let ((bufList (mapcar 'window-buffer (window-list))))
    (select-window (get-largest-window))
    (funcall split-fn arg)
    (mapcar* 'set-window-buffer (window-list) bufList)))

(defun change-split-type-2 (&optional arg)
  "Changes splitting from vertical to horizontal and vice-versa"
  (interactive "P")
  (let ((split-type (lambda (&optional arg)
                      (delete-other-windows-internal)
                      (if arg (split-window-vertically)
                        (split-window-horizontally)))))
    (change-split-type split-type arg)))

(defun change-split-type-3-v (&optional arg)
  "change 3 window style from horizon to vertical"
  (interactive "P")
  (change-split-type 'split-window-3-horizontally arg))

(defun change-split-type-3-h (&optional arg)
  "change 3 window style from vertical to horizon"
  (interactive "P")
  (change-split-type 'split-window-3-vertically arg))

(defun split-window-3-horizontally (&optional arg)
  "Split window into 3 while largest one is in horizon"
;  (interactive "P")
  (delete-other-windows)
  (split-window-horizontally)
  (if arg (other-window 1))
  (split-window-vertically))

(defun split-window-3-vertically (&optional arg)
  "Split window into 3 while largest one is in vertical"
;  (interactive "P")
  (delete-other-windows)
  (split-window-vertically)
  (if arg (other-window 1))
  (split-window-horizontally))

;;deprecated;;;; paren
;;deprecated;;;; http://emacswiki.org/emacs/ShowParenMode
;;deprecated;;(require 'mic-paren)
;;deprecated;;(paren-activate)
;;deprecated;;(show-paren-mode t)

;;option(setq show-paren-delay 0)           ; how long to wait?
;;option(show-paren-mode t)                 ; turn paren-mode on
;;option(setq show-paren-style 'expression) ; alternatives are 'parenthesis' and 'mixed'
;;option(setq show-paren-style 'parenthesis)
;;option(setq show-paren-style 'mixed)

(require 'frame-cmds)
(define-key global-map "\C-xt." 'save-frame-config)
(define-key global-map "\C-xt," 'jump-to-frame-config-register)

;;(require 'autofit-frame)


(defun toggle-frame-split ()
  "If the frame is split vertically, split it horizontally or vice versa.
Assumes that the frame is only split into two."
  (interactive)
  (unless (= (length (window-list)) 2) (error "Can only toggle a frame split in two"))
  (let ((split-vertically-p (window-combined-p)))
    (delete-window) ; closes current window
    (if split-vertically-p
        (split-window-horizontally)
      (split-window-vertically)) ; gives us a split with the other window twice
    (switch-to-buffer nil))) ; restore the original window in this part of the frame

;; I don't use the default binding of 'C-x 5', so use toggle-frame-split instead

;;; (global-set-key (kbd "C-x 5") 'toggle-frame-split)


;;; modeline 
;; http://emacs-fu.blogspot.kr/2010/05/cleaning-up-mode-line.html



;;And the major-modes, for example for Emacs Lisp mode:
;;
;;(add-hook 'emacs-lisp-mode-hook 
;;  (lambda()
;;    (setq mode-name "el")))
(require 'whitespace)
(setq whitespace-line-column 80) ;; limit line length
(setq whitespace-style '(face lines-tail))


;;customize;; (add-hook 'prog-mode-hook 'whitespace-mode)
;;customize;; (global-whitespace-mode +1)

(winner-mode t )

;; (with-package* (smart-mode-line) (sml-modeline-mode))

(use-package diminish
  :config
  (diminish 'company-mode "Cmp")
  (diminish 'abbrev-mode "Ab")
  (diminish 'yas/minor-mode "Y")
  (diminish 'yas/minor-mode "Y")
  (diminish 'undo-tree-mode "ut")
  (diminish 'paredit-mode "pe")
  (diminish 'emacs-lisp-mode "EL")
  (diminish 'elisp-mode "el")
  (diminish 'evil-org-mode ))

;;deprecated;;(use-package sml-modeline
;;deprecated;;  :config
;;deprecated;;  (sml-modeline-mode))

;;conflictwithhelm;;(with-package* (modeline-posn)
;;conflictwithhelm;;  (size-indication-mode t))

;;deprecated;;(defun update-diff-colors ()
;;deprecated;;  "update the colors for diff faces"
;;deprecated;;  (set-face-attribute 'diff-added nil
;;deprecated;;                      :foreground "white" :background "blue")
;;deprecated;;  (set-face-attribute 'diff-removed nil
;;deprecated;;                      :foreground "white" :background "red3")
;;deprecated;;  (set-face-attribute 'diff-changed nil
;;deprecated;;                      :foreground "white" :background "purple"))
;;deprecated;;;;(eval-after-load "diff-mode" '(update-diff-colors))



;; https://github.com/Bruce-Connor/smart-mode-line

;;deprecated;;(require 'smart-mode-line)
;;deprecated;;(if after-init-time (sml/setup)
;;deprecated;;  (add-hook 'after-init-hook 'sml/setup))


(with-package* (fringe-current-line)
  (global-fringe-current-line-mode t)
)


;; http://ergoemacs.org/emacs/emacs_pretty_lambda.html
(setq prettify-symbols-alist
      '(
        ("lambda" . 955) ; λ
        ("->" . 8594)    ; →
        ("=>" . 8658)    ; ⇒
        ("map" . 8614)    ; ↦
        ))


;;(defun my-add-pretty-lambda ()
;;  "make some word or string show as pretty Unicode symbols"
;;  (setq prettify-symbols-alist
;;        '(
;;          ("lambda" . 955) ; λ
;;          ("->" . 8594)    ; →
;;          ("=>" . 8658)    ; ⇒
;;          ("map" . 8614)   ; ↦
;;          )))
;;
;;(add-hook 'clojure-mode-hook 'my-add-pretty-lambda)
;;(add-hook 'haskell-mode-hook 'my-add-pretty-lambda)
;;(add-hook 'shen-mode-hook 'my-add-pretty-lambda)
;;(add-hook 'tex-mode-hook 'my-add-pretty-lambda)


(add-hook 'python-mode-hook 'prettify-symbols-mode )
(add-hook 'emacs-lisp-mode-hook 'prettify-symbols-mode)
(add-hook 'scheme-mode-hook 'prettify-symbols-mode)

;;(add-hook 'c++-mode-hook        'pretty-symbols-mode)

(use-package modern-cpp-font-lock
  :config
  (modern-c++-font-lock-global-mode t))
;;; http://www.reddit.com/r/emacs/comments/1huhsg/i_need_help_with_adding_keywords_for_syntax/
;; font lock 설정 
(global-font-lock-mode 1)                     ; for all buffers
#+END_SRC
* font
#+BEGIN_SRC emacs-lisp
(defun* cycle-font (num &optional (hangul nil))
  "Change font in current frame.
Each time this is called, font cycles thru a predefined set of fonts.
If NUM is 1, cycle forward.
If NUM is -1, cycle backward.
Warning: tested on Windows Vista only."
  (interactive "p")
  ;; this function sets a property “state”. It is a integer. Possible values are any index to the fontList.
  (let (fontList hanFontList fontToUse currentState nextState )
    (setq fontList (list
                    "Courier New-10" 
                    "DejaVu Sans Mono-9" 
                    "Lucida Console-10"
                    "DejaVu Sans-10" 
                    "Lucida Sans Unicode-10" 
                    "Arial Unicode MS-10" 
                    "Consolas-10"
                    "Inconsolata-10"
                    "Monaco-9"
                    ))
    (setq hanFontList (list
                       '("돋움체" . "unicode-bmp")
                       '("새굴림" . "unicode-bmp")
                       '("나눔고딕_코딩" . "unicode-bmp")
                       '("맑은 고딕" . "unicode-bmp")
                       '("나눔고딕코딩" . "unicode-bmp")
                    ))
    ;; fixed-width "Courier New" "Unifont"  "FixedsysTTF" "Miriam Fixed" "Lucida Console" "Lucida Sans Typewriter"
    ;; variable-width "Code2000"
    
    (if hangul
        (progn
          (setq currentState (if (get 'cycle-font 'hanstate) (get 'cycle-font 'hanstate) 0))
          (setq nextState (% (+ currentState (length hanFontList) num) (length hanFontList)))
          (setq fontToUse (nth nextState hanFontList))
          (set-fontset-font "fontset-default" 'hangul fontToUse)
          (redraw-frame (selected-frame))
          (message "Current font is: %s" (car fontToUse ))
          (put 'cycle-font 'hanstate nextState)
          )
      (progn
        (setq currentState (if (get 'cycle-font 'state) (get 'cycle-font 'state) 0))
        (setq nextState (% (+ currentState (length fontList) num) (length fontList)))
        (setq fontToUse (nth nextState fontList))
        ;;(set-frame-parameter nil 'font fontToUse)
        (set-face-font 'default fontToUse)
        (redraw-frame (selected-frame))
        (message "Current font is: %s" fontToUse )
        (put 'cycle-font 'state nextState)
        )
      )))

(defun cycle-font-forward (&optional hangul)
  "Switch to the next font, in the current frame.
See `cycle-font'."
  (interactive "P")
  (if hangul
      (cycle-font 1 t)
    (cycle-font 1 nil)
  ))

(defun cycle-font-backward(&optional hangul)
  "Switch to the previous font, in the current frame.
See `cycle-font'."
  (interactive "P")
  (if hangul
      (cycle-font -1 t)
    (cycle-font -1 nil)
  ))

;; https://github.com/rolandwalker/unicode-fonts
;; (with-package* (unicode-fonts)
;;   (unicode-fonts-setup))

;; (with-package* (dynamic-fonts)
;;   (dynamic-fonts-setup))


(defvar fontsize 16)



(let ((defaultfont (find-if 
                    (lambda (x) (font-utils-exists-p x)) 
                    '(
                      "Ubuntu Mono"
                      ;; "Bitstream Vera Sans Mono"
                      ;; "DejaVu Sans Mono"
                      ;; "Consolas"
                      ;; "Inconsolata"
                      ;; "Source Code Pro"
                      ;; "Menlo"
                      ))))
  (if (stringp  defaultfont)
      (set-fontset-font "fontset-default" 'latin (font-spec :name defaultfont :size 17) )))


(let ((symbolfont (find-if 
                    (lambda (x) (font-utils-exists-p x)) 
                    '( "StixGeneral"))))
  (if (stringp  symbolfont) 
      (dolist (x '(symbol greek mathematical (9089 . 9090)))
       (set-fontset-font "fontset-default" x (font-spec :name symbolfont :size fontsize))))) 


(let ((hangulfont (find-if 
                    (lambda (x) (font-utils-exists-p x)) 
                    '( "맑은 고딕" "돋움체" "나눔고딕코딩"))))
  (if (stringp  hangulfont) 
      (progn 
        (set-fontset-font "fontset-default" 'hangul (cons hangulfont  "unicode-bmp") )
        (set-fontset-font "fontset-default" '(8251 . 8252) (cons hangulfont  "unicode-bmp") )
        (set-fontset-font "fontset-default" '(61548 . 61549) (cons hangulfont  "unicode-bmp") ))))

(let ((fallbackfont (find-if 
                    (lambda (x) (font-utils-exists-p x)) 
                    '( "Symbola" "StixGeneral"  ))))
  (if (stringp  fallbackfont) 
      (set-fontset-font "fontset-default" nil (font-spec :name fallbackfont :size fontsize))))


;; https://www.emacswiki.org/emacs/FontSets
(set-face-font 'default "fontset-default")



(setq 
 font-lock-maximum-decoration 
 '(
   (c-mode . t)
   ;;(c++-mode . 1)
   (c++-mode . 2)
   (t . t)
   ))

;; (use-package unicode-fonts
;;   :config
;;   (unicode-fonts-setup))

;;(setq font-lock-support-mode 'fast-lock-mode ; lazy-lock-mode jit-lock-mode
;;      fast-lock-cache-directories '("~/.emacs-flc"))

;; 모드별로 키워드 추가가 가능하다. 
;; http://www.emacswiki.org/emacs/AddKeywords
;;FONT-LOCK;;(defvar font-lock-comment-face		'font-lock-comment-face
;;FONT-LOCK;;  "Face name to use for comments.")

;;customize;;(font-lock-add-keywords 'python-mode
;;customize;;  '(("\\btry\\b" . font-lock-keyword-face)
;;customize;;    ("\\bfinally\\b" . font-lock-keyword-face)
;;customize;;    ("\\bwith\\b" . font-lock-keyword-face)
;;customize;;    ("\\bas\\b" . font-lock-keyword-face)
;;customize;;    ))




;; https://en.wikipedia.org/wiki/Unicode_block
;; https://www.gnu.org/software/emacs/manual/html_node/emacs/Modifying-Fontsets.html


;;; 22.15 Modifying Fontsets
;;; 
;;; Fontsets do not always have to be created from scratch. If only minor changes are required it may be easier to modify an existing fontset. Modifying ‘fontset-default’ will also affect other fontsets that use it as a fallback, so can be an effective way of fixing problems with the fonts that Emacs chooses for a particular script.
;;; 
;;; Fontsets can be modified using the function set-fontset-font, specifying a character, a charset, a script, or a range of characters to modify the font for, and a font specification for the font to be used. Some examples are:
;;; 
;;; ;; Use Liberation Mono for latin-3 charset.
;;; (set-fontset-font "fontset-default" 'iso-8859-3
;;;                   "Liberation Mono")
;;; 
;;; ;; Prefer a big5 font for han characters
;;; (set-fontset-font "fontset-default"
;;;                   'han (font-spec :registry "big5")
;;;                   nil 'prepend)
;;; 
;;; ;; Use DejaVu Sans Mono as a fallback in fontset-startup
;;; ;; before resorting to fontset-default.
;;; (set-fontset-font "fontset-startup" nil "DejaVu Sans Mono"
;;;                   nil 'append)
;;; 
;;; ;; Use MyPrivateFont for the Unicode private use area.
;;; (set-fontset-font "fontset-default"  '(#xe000 . #xf8ff)
;;;                   "MyPrivateFont")

#+END_SRC
