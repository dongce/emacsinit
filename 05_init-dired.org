# -*-modc: org; coding: utf-8; buffer-read-only: t;-*-

* header
  #+BEGIN_SRC emacs-lisp
    ;; -*-modc: emacs-lisp; coding: utf-8; buffer-read-only: t;-*-
  #+END_SRC
* dired
** serveral macro 
 #+BEGIN_SRC emacs-lisp
   (defun 2zip ()
     "Zip the current file/dir in `dired'.
     If multiple files are marked, only zip the first one.
     Require unix zip commandline tool."
     (interactive)
     (require 'dired)
     (let ( (fileName (elt (dired-get-marked-files) 0))  )
       (shell-command (format "zip -r '%s.zip' '%s'" (file-relative-name fileName) (file-relative-name fileName)))
       ))


   (defun upward-find-file (filename &optional startdir)
     "Move up directories until we find a certain filename. If we
       manage to find it, return the containing directory. Else if we
       get to the toplevel directory and still can't find it, return
       nil. Start at startdir or . if startdir not given"

     (let ((dirname (expand-file-name
                     (if startdir startdir ".")))
           (found nil) ; found is set as a flag to leave loop if we find it
           (top nil))  ; top is set when we get
                                           ; to / so that we only check it once

                                           ; While we've neither been at the top last time nor have we found
                                           ; the file.
       (while (not (or found top))
                                           ; If we're at / set top flag.
         (if (string= (expand-file-name dirname) "/")
             (setq top t))
      
                                           ; Check for the file
         (if (file-exists-p (expand-file-name filename dirname))
             (setq found t)
                                           ; If not, move up a directory
           (setq dirname (expand-file-name ".." dirname))))
                                           ; return statement
       (if found dirname nil)))

   (use-package dired
     :config
     (define-key dired-mode-map ":c" 'clip-file)
     (define-key dired-mode-map ":p" 'clip-paste)
     (define-key dired-mode-map ":;" 'revert-buffer)
     (define-key dired-mode-map ":i" 'clip-image))

   (defun 2-zip ()
     "Zip the current file/dir in `dired'.
     If multiple files are marked, only zip the first one.
     Require unix zip commandline tool."
     (interactive)
     (require 'dired)
     (let ( (fileName (elt (dired-get-marked-files) 0))  )
       (shell-command (format "zip -r '%s.zip' '%s'" (file-relative-name fileName) (file-relative-name fileName)))
       ))



   (defun unzip(fileList)
     "Zip the current file/dir in `dired'.
     If multiple files are marked, only zip the first one.
     Require unix zip commandline tool."
     (interactive (list (dired-get-marked-files) ))
     (require 'dired)
     (mapc
      (lambda (ξf)
        (let ( newName cmdStr )
          (setq newName (file-name-sans-extension ξf))
          (while (file-exists-p newName)
            (setq newName (concat (file-name-sans-extension newName) "-2" (file-name-extension newName t))) )

          ;; (async-shell-command cmdStr)
          ;;deprecated;;(async-shell-command 
          ;;deprecated;; (format "convert -rotate 180 \"%s\" \"%s\""   (file-relative-name ξf) (file-relative-name newName)) )
          (message (format "7za x  \"%s\"  -o\"%s\"  "  ξf newName))
          (async-shell-command
           (format "7za x  \"%s\"  -o\"%s\"  "  ξf newName))))
      fileList ))

   (defun unzipcur(fileList)
     "Zip the current file/dir in `dired'.
     If multiple files are marked, only zip the first one.
     Require unix zip commandline tool."
     (interactive (list (dired-get-marked-files) ))
     (require 'dired)
     (mapc
      (lambda (ξf)
        (let ( newName cmdStr )
          (setq newName (file-name-sans-extension ξf))
          (while (file-exists-p newName)
            (setq newName (concat (file-name-sans-extension newName) "-2" (file-name-extension newName t))) )

          ;; (async-shell-command cmdStr)
          ;;deprecated;;(async-shell-command 
          ;;deprecated;; (format "convert -rotate 180 \"%s\" \"%s\""   (file-relative-name ξf) (file-relative-name newName)) )
          (message (format "7za x  \"%s\"  -o\"%s\"  "  ξf (file-name-directory newName)))
          (async-shell-command
           (format "7za x  \"%s\"  -o\"%s\"  "  ξf (file-name-directory newName)))))
      fileList ))


   (defun 2-7zip ()
     "Zip the current file/dir in `dired'.
     If multiple files are marked, only zip the first one.
     Require unix zip commandline tool."
     (interactive)
     (require 'dired)
     (let ( (fileName (elt (dired-get-marked-files) 0))  )
       (async-shell-command (format "7za a \"%s.7z\" \"%s\"" (file-relative-name fileName) (file-relative-name fileName)))
       ))



   (defcustom pyclip (fullpath "../misc/pyclip3.py") "python clip")



   (defun copy-image-file (file)
     "Display Windows context menu on selected files"
     (interactive)

     (if (eq system-type 'windows-nt)
      
         ;; http://www.gnu.org/software/emacs/manual/html_node/elisp/Calling-Functions.html
         (async-start-process ;;impossible;;-reuse-buffer 
          "clip-image" 
          "python.exe"
          (lambda (p) (message "이미지 복사 완료"))
          pyclip
          "--image"
          file)))

   (defun copy-files (&rest files)
     "Display Windows context menu on selected files"
     (interactive)
     (if (eq system-type 'windows-nt)
      
         (apply
          #'async-start-process  ;;impossible;;-reuse-buffer 
          "clip-file" 
          "c:/anaconda43/python.exe"
          (lambda (p) (message "파일복사 완료"))
          pyclip
          files)))


   (defun clip-file ()
     "Display Windows context menu on selected files"
     (interactive)

     (if (eq system-type 'windows-nt)
         (let* ((files (dired-get-marked-files))
                (files (if (null files)
                           (list (dired-current-directory) )
                         files)))
           ;; http://www.gnu.org/software/emacs/manual/html_node/elisp/Calling-Functions.html
           (apply #'copy-files files))))

   (defun clip-image ()
     "Display Windows context menu on selected files"
     (interactive)

     (if (eq system-type 'windows-nt)
         (let* ((files (dired-get-marked-files))
                (files (if (null files)
                           (list (dired-current-directory) )
                         files)))
           ;; http://www.gnu.org/software/emacs/manual/html_node/elisp/Calling-Functions.html
           (copy-image-file (car files)))))

 #+END_SRC

 #+RESULTS:
 : clip-image

** helm-dired-history                                           :deprecated:
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package helm-dired-history
    :config
    (add-to-list 'savehist-additional-variables 'helm-dired-history-variable))
#+END_SRC

* WINDOW dired
#+BEGIN_SRC emacs-lisp
  (when-os 'windows-nt
   ;; 윈도우 시스템의 경우
   ;; emacs 에서 FIND 가능
   ;;(color-theme-parus)
    ;;  (color-theme-vim-colors)
    ;;  (color-theme-blue2)
    ;;  (color-theme-emacs-21)
    (require 'find-dired )
    (require 'w32-find-dired )
    (require 'w32-winprint )
    (let ((lisp-dir (expand-file-name (concat emacsw32-home "/EmacsW32/lisp/"))))
      (unless (file-accessible-directory-p lisp-dir)
        (lwarn "Can't find %s" lisp-dir)
        (sit-for 10))
      (when (file-accessible-directory-p lisp-dir)
        (message "Adding %s to load-path" lisp-dir)
        (add-to-list 'load-path lisp-dir))
      (require 'emacsw32 nil t)
      (unless (featurep 'emacsw32)
        (lwarn '(emacsw32) :error "Could not find emacsw32.el")))


    ;; 프린팅 관련 변수
    (define-key dired-mode-map "o" 'w32-dired-open-explorer)
    (define-key dired-mode-map "," 'w32-dired-open-explorer-marked)
    (define-key dired-mode-map "\\" 'w32-dired-copy-file-name)
    ;;(define-key dired-mode-map "["  'w32shell-cmd-here)
    ;; 윈도우에서 유용하게 사용할 수 있는 방법
    (defun w32open (fname)
      (let ((file-name (replace-regexp-in-string "/" "\\"  fname nil t)))
        ;;(message (replace-regexp-in-string "/" "\\" file-name nil t) )
        (if (file-exists-p file-name)
            (w32-shell-execute nil  file-name nil 1))))
    (defun w32-dired-open-explorer ()
      "Open a file in dired mode by explorer.exe as you double click it."
      (interactive)
      (w32open (dired-get-file-for-visit) )
      )

    (defun w32-dired-print ()
      "Open a file in dired mode by explorer.exe as you double click it."
      (interactive)
      (let ((file-name (replace-regexp-in-string "/" "\\" (dired-get-file-for-visit) nil t)))
        ;;(message (replace-regexp-in-string "/" "\\" file-name nil t) )
        (if (file-exists-p file-name)
            (w32-shell-execute "print"  file-name nil 1))))

    (defun w32-dired-open-explorer-marked()
      "Open a file in dired mode by explorer.exe as you double click it."
      (interactive)
      (let ((file-names (dired-get-marked-files)))
        (mapcar
         (lambda ( x )
           (if (file-exists-p x )
               (w32-shell-execute nil x nil 1)))
         file-names )))

    (defun w32-execute-line ()
      (interactive)
      (w32-shell-execute nil (buffer-substring (point) (point-at-eol)) nil 1))

    (defun w32-dired-copy-file-name(&optional arg)
      "Open a file in dired mode by explorer.exe as you double click it."
      (interactive "P")
      ;;emacs와 상관없이 동작 ;;(w32-set-clipboard-data (replace-regexp-in-string "/" "\\" (file-truename (dired-get-filename nil t))nil t)))
      (let ((pathname (file-truename (dired-get-filename nil t))))
        (if arg
            (kill-new pathname)
          (kill-new (replace-regexp-in-string "/" "\\" pathname nil t))
          )))

    (defvar nircmdexe 
      (concat (getenv "GUILE_HOME") "/nircmd/nircmd.exe"))

    (defun nircmd (cmd) 
      (interactive "MCmd " cmd) 
      (w32-shell-execute nil nircmdexe cmd))

    (defun cdeject () 
      "Eject the cd in drive d:" 
      (interactive) (nircmd "cdrom open z:"))


    (defun screensaver () 
      "Start the default screensaver" 
      (interactive) (nircmd "screensaver"))

    (defun lock () 
      "Lock the workstation" 
      (interactive) (nircmd "lockws"))


    (defun prkill (p)
      (interactive "M프로세스 : " p)
      (nircmd (concat "killprocess "  p)))




    ;;각종윈도우프로그램;;* Component Services: %windir%/system32/comexp.msc
    ;;각종윈도우프로그램;;* Computer Management: %windir%/system32/compmgmt.msc /s
    ;;각종윈도우프로그램;;* Data Sources (ODBC): %windir%/system32/odbcad32.exe
    ;;각종윈도우프로그램;;* Event Viewer: %windir%/system32/eventvwr.msc /s
    ;;각종윈도우프로그램;;* iSCSI Initiator: %windir%/system32/iscsicpl.exe
    ;;각종윈도우프로그램;;* Performance Monitor: %windir%/system32/perfmon.msc /s
    ;;각종윈도우프로그램;;* Services: %windir%/system32/services.msc
    ;;각종윈도우프로그램;;* System Configuration: %windir%/system32/msconfig.exe
    ;;각종윈도우프로그램;;* Task Scheduler: %windir%/system32/taskschd.msc /s
    ;;각종윈도우프로그램;;* Windows Firewall with Advanced Security: %windir%/system32/WF.msc
    ;;각종윈도우프로그램;;* Windows Memory Diagnostic: %windir%/system32/MdSched.exe
    ;;각종윈도우프로그램;;* Windows PowerShell Modules: %SystemRoot%/system32/WindowsPowerShell/v1.0/powershell.exe -NoExit -ImportSystemModules

    (setf static-winexe-cmdlist 
          `(
            (cap ,(fullpath "../../iview441_x64/i_view64.exe") "/capture=5")
            (wcap "c:/windows/system32/SnippingTool.exe")
            (dev "devmgmt.msc")
            (snipp "c:/windows/system32/SnippingTool.exe")
            (squid ,(fullpath  "../../conemul/conemu64.exe") "-reuse -dir \"c:\\squid\\sbin\" -cmd .\\squid.exe -D")
            (tscproxy ,(fullpath  "../../conemul/conemu64.exe")
                      "-reuse -dir \"t:\\misc\\pytcpproxy\" -cmd c:\\anaconda43\\python.exe tscproxy.py")
            (msys2conemul ,(fullpath  "../../conemul/conemu64.exe")
                          "-reuse -dir \"%home%\" -cmd set TERM=cygwin&& set MSYSTEM=MINGW64&&c:\\msys264\\usr\\bin\\sh --login -i")

            (msys2term ,(fullpath  "../../conemul/conemu64.exe")
                       "-reuse -dir \"%home%\" -run set MSYSTEM=MINGW64&&c:\\msys264\\usr\\bin\\conemu-msys2-64.exe")

            (conemul ,(fullpath  "../../conemul/conemu64.exe") "-reuse")
            (conemul2 ( ,(fullpath  "../../conemul/conemu64.exe") "-reuse")
                     (,(fullpath  "../../conemul/conemu64.exe")
                      "-reuse -dir \"%home%\" -cmd set TERM=cygwin&& set MSYSTEM=MINGW64&&c:\\msys264\\usr\\bin\\sh --login -i"))

            (minttyconemul ,(fullpath  "../../conemul/conemu64.exe")
                           "-reuse -dir \"%home%\" -cmd  c:\\msys264\\usr\\bin\\mintty /bin/bash -l")

            (filezilla  "t:/usr/local/FileZilla-3.7.1.1/filezilla.exe") 
            (processhacker ,(fullpath  "../../processhacker/x64/ProcessHacker.exe"))
            (processexplorer ,(fullpath  "../../processhacker/procexp.exe"))
            (apt ,(fullpath  "../../advpsterm/apt.exe"))
            (picpick ,(fullpath  "../../../../picpick/picpick.exe"))
            (opencapture "d:/usr/local/opencapture/pOpenCapture.exe")
            (qdir        "t:/usr/local/qdir/Q-Dir.exe")
            (explorer    "c:/WINDOWS/explorer.exe")
            (msys2       "c:/msys264/mingw64_shell.bat")
            ;;(mingw       "t:/usr/local/mingwDevKit/msys.bat")
            (mintty          "c:/msys264/usr/bin/mintty"                      "/bin/bash -l"                           )
            (mingw          "c:/mingw/msys/1.0/msys.bat"                           )
            (ComponentServices     "c:/windows/system32/comexp.msc"                                                          )
            (ComputerManagement    "c:/windows/system32/compmgmt.msc"                "/s"                                    )
            (DataSources           "c:/windows/system32/odbcad32.exe"                                                        )
            (EventViewer           "c:/windows/system32/eventvwr.msc"                "/s"                                    )
            (iSCSIInitiator        "c:/windows/system32/iscsicpl.exe"                                                        )
            (PerformanceMonitor    "c:/windows/system32/perfmon.msc"                 "/s"                                    )
            (Services              "c:/windows/system32/services.msc"                                                        )
            (SystemConfiguration   "c:/windows/system32/msconfig.exe"                                                        )
            (msconfig              "c:/windows/system32/msconfig.exe"                                                        )
            (TaskScheduler         "c:/windows/system32/taskschd.msc"                 "/s"                                   )
            (WindowsFirewall       "c:/windows/system32/WF.msc"                                                              )
            (WindowsMemory         "c:/windows/system32/MdSched.exe"                                                         )
            (rhapsody              "c:/usr/IBM/rhapsody76/rhapsody.exe"             "-lang=cpp"                            )
            (WindowsPowerShell     "c:/windows/system32/WindowsPowerShell/v1.0/powershell.exe" "-NoExit -ImportSystemModules")
            (FileSystem     "c:/windows/system32/fsmgmt.msc"                                                          )
            (mstsc     "C:/Windows/System32/mstsc.exe")
            (msconfig     "C:/Windows/System32/msconfig.exe")
            (dkw2005   ,(fullpath "../../cmdutils/dkwVS2005.vbs"))
            (dkw2008   ,(fullpath "../../cmdutils/dkwVS2008.vbs"))
            (dkwGUILE   ,(fullpath "../../cmdutils/dkwguile.vbs"))
            (dkwtor    ,(fullpath "../../cmdutils/dkwTORARDO.vbs"))
            (tops      ,(fullpath "../../cmdutils/tops.vbs"))
            (alzip "c:/usr/local/altools/alzip/ALZip.exe")
            (alcapture "c:/usr/local/altools/alcapture/ALCapture.exe")
            (virtualbox "c:/usr/local/virtualbox/VirtualBox.exe")
            (ftp "t:/usr/local/FileZilla-3.7.1.1/filezilla.exe")
            (gimp  "t:/usr/local/gimp2/bin/gimp-2.8.exe")
            (xming  "t:/usr/local/editor/emacsW32/cmdutils/LPXDEVENV.xlaunch")
            (dtterm   "t:/MISC/telnetcmd/tcmd.pyw" )
            (depends "t:/usr/local/depends/depends.exe")
            (magicdisc"c:/usr/local/magicdisc/MagicDisc.exe")
            (foxit  "t:/usr/local/foxit/FoxitReader.exe")
            (vimtut  "t:/usr/local/editor/emacsW32/doc/image/vi-vim-cheat-sheet.gif")
            (jsonview  "t:/usr/local/editor/emacsW32/JsonViewerPackage/JsonView/JsonView.exe")    
            (sourcetree  "t:/usr/local/sourcetree/SourceTree.exe")
            (vncviewer ,(fullpath "../../cmdutils/vncviewer.exe  "))
            (fax  "d:/kicom/e2fax/Fax2006.exe")
            (zeal  "t:/usr/local/editor/emacsW32/zeal-20131109/zeal.exe" )
            (gitk  ,(fullpath "../../cmdutils/gitk.vbs"))
            (wxdemo "c:/usr/local/python27/pythonw.exe" "\"C:/Program Files/wxPython2.9 Docs and Demos/demo/demo.pyw\"")
            (epydoc "c:/usr/local/python27/pythonw.exe" "c:/usr/local/python27/Scripts/epydocgui")
            (pinta "c:/Program Files/Pinta/Pinta.exe")
            (putty "t:/usr/local/editor/emacsW32/iputty/putty.exe")
            (eclipsejee "t:/usr/local/eclipsejee/eclipse.exe")
            (vs2005 "C:/usr/microsoft/vs2005/IDE/Common7/IDE/devenv.exe")

            (filesplit   "t:/usr/local/filesplitter/Free-File-Splitter-v5.0.1189.exe")))
    (defun winexe ()
      (interactive)
      (let* ((winexe-cmdlist (cons `(gitbash  "t:/usr/local/msysgit/msys.bat" ,default-directory) static-winexe-cmdlist))
             (cmd 
              (ido-completing-read 
               "명령을 입력하세요: "
               ;;completing-read;;(mapcar (function (lambda (x) (list (car x) t))) winexe-cmdlist)
               (mapcar (lambda (x) (symbol-name (car x))) winexe-cmdlist)
               nil t nil nil 'qdir)))
        (let ((args (cdr (assoc (intern cmd) winexe-cmdlist))))
          (if (stringp (car args))
              (apply 
               'w32-shell-execute 
               (cons nil args  ))
            (mapcar
             (lambda (x)
               (apply 
                'w32-shell-execute 
                (cons nil x  )
                )
                (sleep-for 5)
               ) args))))) 

    (global-set-key "\C-cx" 'winexe)

    (defun opencapture ()
      (interactive)
      (w32-shell-execute nil "d:/usr/local/opencapture/pOpenCapture.exe" nil))

    (defun qdir ()
      (interactive)
      (w32-shell-execute nil "c:/usr/local/qdir/Q-Dir.exe" nil))

    (defun mingw ()
      (interactive)
      (w32-shell-execute nil "c:/usr/local/mingwDevKit/msys.bat" nil))

    ;;deprecatedbynext;;(defun toggle-full-screen () 
    ;;deprecatedbynext;;  (interactive) 
    ;;deprecatedbynext;;  (shell-command "emacs_fullscreen.exe"))

    ;; (toggle-frame-fullscreen)
    ;; (toggle-frame-maximized)


    (defun run-current-file ()
      "Execute or compile the current file.
  For example, if the current buffer is the file x.pl,
  then it'll call “perl x.pl” in a shell.
  The file can be PHP, Perl, Python, Ruby, javascript, Bash, ocaml, vb, elisp.
  File suffix is used to determine what program to run."
      (interactive)
      (let (suffixMap fName suffix progName cmdStr)

        ;; a keyed list of file suffix to comand-line program path/name
        (setq suffixMap 
              '(
                ("php" . "php")
                ("pl" . "perl")
                ("py" . "python")
                ("rb" . "ruby")
                ("js" . "js")
                ("sh" . "bash")
                ("ml" . "ocaml")
                ("vbs" . "cscript")
                ("bat" . "cmd /c"))
              )

        (setq fName (buffer-file-name))
        (setq suffix (file-name-extension fName))
        (setq progName (cdr (assoc suffix suffixMap)))
        (setq cmdStr (concat progName " \""   fName "\""))

        (if (string-equal suffix "el") ; special case for emacs lisp
            (load-file fName) 
          (if progName
              (progn
                (message "Running…")
                (shell-command cmdStr "*run-current-file output*" )
                )
            (message "No recognized program file suffix for this file.")
            )
          )))

    (defun msys-shell (&optional arg)
      "Run MSYS shell (sh.exe).  It's like a Unix Shell in Windows.
  A numeric prefix arg switches to the specified session, creating
  it if necessary."
      (interactive "P")
      (let ((buf-name (cond ((numberp arg)
                             (format "*msys<%d>*" arg))
                            (arg
                             (generate-new-buffer-name "*msys*"))
                            (t
                             "*msys*")))
            (explicit-shell-file-name "c:/usr/local/mingwDevKit/bin/bash.exe"))
        (shell buf-name)))


    (with-package* (async))



    (add-to-list 'load-path (fullpath  "../../wincontextmenu/lisp/"))

    (load "wincontextmenu.el")

    (setq win-context-menu-program (fullpath  "../../wincontextmenu/bin/wincontextmenu.exe"))

    (require 'w32-browser)

    ;; redefine M-!
    ;;(require 'execute)
    ;;(define-key dired-mode-map "\M-;" 'execute-program)

    (defun assocemacs ( ext) 
      (interactive "M확장자 :")

      ;;(shell-command "ftype EmacsFile=emacsclientw.exe -na runemacs.exe \"\%1\"" )
      (shell-command (format "assoc %s=EmacsFile" ext)))

   )
#+END_SRC

#+RESULTS:
: assocemacs

* linux dired

#+BEGIN_SRC emacs-lisp
;; 23 버젼 관련 설정입니다.
(when-os 'gnu/linux
(setq ls-lisp-verbosity '(uid)))
#+END_SRC

* dired command 
#+BEGIN_SRC emacs-lisp
(defun mrc-dired-do-command (command)
  "Run COMMAND on marked files. Any files not already open will be opened.
After this command has been run, any buffers it's modified will remain
open and unsaved."
  (interactive "CRun on marked files M-x ")
  (save-window-excursion
    (mapc (lambda (filename)
            (find-file filename)
            (call-interactively command))
          (dired-get-marked-files))))
#+END_SRC

* dired buffer setting                                          :deprecated:
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package dired+
    :config
    (toggle-diredp-find-file-reuse-dir 1)
    ;;(define-key dired-mode-map (kbd "RET") 'dired-find-alternate-file) ; was dired-advertised-find-file
    ;;(define-key dired-mode-map (kbd "^") (lambda () (interactive) (find-alternate-file "..")))  ; was dired-up-directory
  )
  ;; writable-dired
  ;;【Ctrl+x Ctrl+q】 (emacs 23.1)  wdired-change-to-wdired-mode  Start rename by editing
  ;;【Ctrl+c Ctrl+c】 wdired-finish-edit  Commit changes
  ;;【Ctrl+c Esc】  wdired-abort-changes  Abort changes

  ;;(with-package* (tramp)
  ;;  (setq tramp-default-method "ftp")
  ;;  (setq ange-ftp-default-user "user1")
  ;;  ;; (setq ange-ftp-ftp-program-name "ftp.exe")
  ;;  (setq ange-ftp-ftp-program-name (fullpath "../../EmacsW32/gnuwin32/bin/ftp.exe")) ;ftp passive mode 
  ;;  )
#+END_SRC

* appearance
#+BEGIN_SRC emacs-lisp
(use-package hl-line+
  :config
  (add-hook 'dired-mode-hook (lambda () (interactive) (hl-line-mode t))))
#+END_SRC

* dired menu
#+BEGIN_SRC emacs-lisp
;; (use-package dired-quick-sort
;;   :config
;;   (dired-quick-sort-setup))
#+END_SRC
* image
#+BEGIN_SRC emacs-lisp

  (use-package thumbs
    :commands thumbs  ;;"Preview images in a directory." t
    :config
    (add-hook 'image-mode-hook 'eimp-mode))
#+END_SRC
* recentf
** helm, ido                                                    :deprecated:
   #+BEGIN_SRC emacs-lisp :tangle no
     (defun ido-choose-from-recentf ()
       "Use ido to select a recently opened file from the `recentf-list'"
       (interactive)
       (let ((home (expand-file-name (getenv "HOME"))))
         (find-file
          (ido-completing-read "Recentf open: "
                               (mapcar (lambda (path)
                                         (replace-regexp-in-string home "~/" path))
                                       recentf-list)
                               nil t))))

     (defun helm-choose-from-recentf ()
       "Use helm to select a recently opened file from the `recentf-list'"
       (interactive)
       (let ((home (expand-file-name (getenv "HOME"))))
         (find-file
          (helm-comp-read 
           "파일명을 입력하세요 : "
           (mapcar (lambda (path)
                     (replace-regexp-in-string home "~/" path))
                   recentf-list)
           ))))

     (defun helm-goto-recent-directory ()
       "Open recent directory with dired"
       (interactive)
       (let ((home (expand-file-name (getenv "HOME"))))
         (find-file
          (helm-comp-read 
           "폴더명을 입력하세요 : "

           (mapcar (lambda (path)
                     (replace-regexp-in-string home "~/" path))
                     (append (mapcar 'file-name-directory recentf-list)
                       ;; fasd history
                       ;;(if (executable-find "fasd")
                       ;;    (split-string (shell-command-to-string "fasd -ld") "\n" t))
                       ))))))

   #+END_SRC

   #+RESULTS:
   : helm-goto-recent-directory

** ivy
 #+BEGIN_SRC emacs-lisp :tangle no
     (defun counsel-goto-recent-directory ()
       "Open recent directory with dired"
       (interactive)
       (unless recentf-mode (recentf-mode 1))
       (let ((collection
              (delete-dups
               (append (mapcar 'file-name-directory recentf-list)
                       ;; fasd history
                       ;;(if (executable-find "fasd")
                       ;;    (split-string (shell-command-to-string "fasd -ld") "\n" t))
                       ))))
         (ivy-read "directories:" collection :action 'dired)))



   (defun counsel-choose-from-recentf ()
     "Use helm to select a recently opened file from the `recentf-list'"
     (interactive)
       (interactive)
       (unless recentf-mode (recentf-mode 1))
       (let* ((home (expand-file-name (getenv "HOME")))
             (collection
              (delete-dups
               (mapcar (lambda (path)
                         (replace-regexp-in-string home "~/" path))
                       recentf-list))))
         (ivy-read "최근 파일:" collection :action 'find-file)))


 #+END_SRC

 #+BEGIN_SRC emacs-lisp
 
   (defun counsel-recentf-directory ()
     "Find a file on `recentf-list'."
     (interactive)
     (require 'recentf)
     (recentf-mode)
     (ivy-read "Recentf: "
               (delete-dups
                (append (mapcar 'file-name-directory recentf-list)
                        ;; fasd history
                        ;;(if (executable-find "fasd")
                        ;;    (split-string (shell-command-to-string "fasd -ld") "\n" t))
                        ))
               :action (lambda (f)
                         (with-ivy-window
                          (find-file f)))
               :caller 'counsel-recentf))
   (ivy-set-actions
    'counsel-recentf-directory
    '(("j" find-file-other-window "other-window")
      ("x" counsel-find-file-extern "open externally")))
 #+END_SRC
 #+RESULTS:
 | ivy-switch-buffer | ((k (lambda (x) (kill-buffer x) (ivy--reset-state ivy-last)) kill) (j ivy--switch-buffer-other-window-action other window) (r ivy--rename-buffer-action rename)) | counsel-describe-variable | ((i counsel-info-lookup-symbol info) (d counsel--find-symbol definition)) | counsel-describe-function | ((i counsel-info-lookup-symbol info) (d counsel--find-symbol definition)) | counsel-M-x | ((d counsel--find-symbol definition) (h (lambda (x) (describe-function (intern x))) help)) | counsel-descbinds | ((d counsel-descbinds-action-find definition) (i counsel-descbinds-action-info info)) | counsel-git | ((j find-file-other-window other)) | counsel-find-file | ((f find-file-other-frame other frame) (w find-file-other-window other window) (v spacemacs/find-file-vsplit in vertical split) (s spacemacs/find-file-split in horizontal split) (l find-file-literally literally) (d spacemacs/delete-file delete file) (r spacemacs/rename-file rename file)) | counsel-recentf | ((j find-file-other-window other-window) (x counsel-find-file-extern open externally)) | counsel-locate | ((x counsel-locate-action-extern xdg-open) (d counsel-locate-action-dired dired)) | counsel-linux-app | ((f counsel-linux-app-action-file run on a file)) | spacemacs/ivy-spacemacs-layouts | ((c persp-kill-without-buffers Close layout(s)) (k persp-kill Kill layout(s))) | counsel-recentf-directory | ((j find-file-other-window other-window) (x counsel-find-file-extern open externally)) |

** exclude
#+BEGIN_SRC emacs-lisp
(setq recentf-exclude 
'("^/var/folders\\.*"
"COMMIT_EDITMSG\\'"
".*-autoloads\\.el\\'"
"[/\\]\\.elpa/"))

#+END_SRC
* dired-x omit files

#+BEGIN_SRC emacs-lisp 
  (use-package dired-x
    :config
    (progn
      (setq dired-omit-verbose nil)
      ;; toggle `dired-omit-mode' with C-x M-o
      (add-hook 'dired-mode-hook #'dired-omit-mode)
      (setq dired-omit-files
            (concat dired-omit-files "\\|^.~$\\|^.projectile$"))))
#+END_SRC

#+RESULTS:
: t

* sorting
  #+BEGIN_SRC emacs-lisp
    (use-package dired-quick-sort
      :config
      (dired-quick-sort-setup)) 
  #+END_SRC

  #+RESULTS:
  : t
