# -*- coding: utf-8; -*-


* top level 
** header
   #+BEGIN_SRC emacs-lisp
; -*- coding: utf-8; -*-
   #+END_SRC
** smerge
   #+BEGIN_SRC emacs-lisp

 (require 'smerge-mode)
   #+END_SRC 

** excommand
   #+BEGIN_SRC emacs-lisp

     ;; http://d.hatena.ne.jp/tarao/20130304/evil_config



     (defun evil-replace-word-selection()
       (interactive)
       (if (use-region-p)
           (let (
                 (selection (buffer-substring-no-properties (region-beginning) (region-end))))
             (if (= (length selection) 0)
                 (message "empty string")
               (evil-ex (concat "'<,'>s/" selection "/"))
               ))
         (evil-ex (concat "%s/" (thing-at-point 'word) "/"))))

     (evil-ex-define-cmd "[sc]ratch" #'tmpscratch)
   #+END_SRC
** leader

*** myown
    #+BEGIN_SRC emacs-lisp
    
      (spacemacs/set-leader-keys 
        "<backtab>" #'back-to-indentation
        "<backspace>" #'twin
        "%" 'evil-virep-replace-regexp
        "ak" 'kproc
        "a[" 'w32shell-cmd-here
        "yi" 'yankpad-insert
        "ye" 'yankpad-edit
        "ym" 'yankpad-map
        "yc" 'yankpad-set-category
        "oj" 'open-junk-file
        "obi" 'ido-switch-buffer-other-frame
        "oba" 'ivy-push-view
        "obA" 'ivy-pop-view
        "obb" 'ivy-switch-buffer-other-window
        "obB" 'ivy-switch-buffer
        "bb"  'switch-to-buffer
        "ob[" 'evil-prev-buffer
        "obk" 'kill-this-buffer
        "ob]" 'evil-next-buffer
        "obn" 'narrow-to-region
        "obN" 'narrow-to-defun
        "obw" 'widen
        "obs" 'save-buffer
        "obS" 'save-some-buffers
        "obm" 'boomark-set
        "obj" 'boomark-jump
        "obM" 'bookmark-bmenu-list
        "obl" 'xah-open-last-closed
        "obf" 'prelude-copy-file-name-to-clipboard
        "obh" 'mark-whole-buffer
        "obr" 'revert-buffer
        "obc" 'xah-close-current-buffer
        "of"   'helm-resume
        "<home>" 'ibuffer
        "<end>" 'tmpscratch

        "<prior>" 'beginning-of-defun
        "<next>" 'end-of-defun

        "," 'smex
        "." 'embrace-commander
        "/" 'evil-replace-word-selection
        "\\" 'xah-copy-file-path
        "-" 'xah-copy-file-name
        "osL" 'loccur
        "oo" 'occur
        "osn" 'smartscan-symbol-go-forward
        "osp" 'smartscan-symbol-go-backward
        "osc" 'xah-lookup-cppreference
        "os." 'gtags-find-tag
        "os," 'gtags-pop-stack
        "os_" 'isearch-forward-symbol
        "os-" 'isearch-forward-at-point
        "osm" 'grep-word
        "ost" 'xah-find-text
        "osT" 'xah-find-text-regex

        "ou"  'hydra-undo-tree/body
        "op" 'pandoc-main-hydra/body

        "S" smerge-basic-map

        "u" 'counsel-recentf;;helm-choose-from-recentf  ;;'string-rectangle ;;'recentf-open-most-recent-file
        "U" 'counsel-recentf-directory ;;helm-goto-recent-directory ;;counsel-goto-recent-directory ;;;;'string-rectangle ;;'recentf-open-most-recent-file
        ";" 'evilnc-comment-or-uncomment-lines

        "oCw" #'wcopy ;;deprecated;;'evilnc-copy-and-comment-lines
        "oCx" #'crux-open-with
        "oCO" #'crux-smart-open-line-above
        "oCo" #'crux-smart-open-line
        "oCs" #'crux-cleanup-buffer-or-region
        "oCr" #'crux-recentf-ido-find-file
        "oCv" #'crux-view-url
        "oCe" #'crux-eval-and-replace
        "oCt" #'crux-transpose-windows
        "oCD" #'crux-delete-file-and-buffer
        "oCl" #'crux-duplicate-current-line-or-region
        "oCL" #'crux-duplicate-and-comment-current-line-or-region
        "oCR" #'crux-rename-file-and-buffer
        "oCn" #'crux-visit-term-buffer
        "oC1" #'crux-kill-other-buffers
        "oCi" #'crux-indent-defun
        "oCI" #'crux-indent-rigidly-and-copy-to-clipboard
        "oC." #'crux-find-user-init-file
        "oCs" #'crux-find-shell-init-file
        "oCj" #'crux-top-join-lines
        "oCk" #'crux-kill-whole-line
        "oCK" #'crux-kill-line-backwards
        "oCa" #'crux-ispell-word-then-abbrev




        "O" 'win-switch-next-window
        "o]" 'exit-recursive-edit
        "ov" 'evil-scroll-down
        "oV" 'evil-scroll-up

        "G" 'keyboard-quit
        "ee" 'eval-last-sexp
        "E"  mu4e-main-mode-map
        "Eu" 'mu4e-update-mail-and-index


        "W" 'read-only-mode
        "oww" 'read-only-mode
        "owk" 'win-switch-up
        "owj" 'win-switch-down
        "owh" 'win-switch-left
        "owl" 'win-switch-right
        "ow1" 'delete-other-windows
        "ow2" 'split-window-below
        "ow3" 'split-window-right
        "ow0" 'delete-window
        "owo" 'win-switch-dispatch
        "owd" 'delete-blank-lines
        "ows" 'resize-window
        "owj"      'winner-undo
        "owk"      'winner-redo

        "as" 'twin
        "aw" 'winexe
        ;;deprecattion;;"+" #'evil-numbers/inc-at-pt
        ;;deprecattion;;"-" #'evil-numbers/dec-at-pt
        ;;deprecattion;;"M" #'pop-to-mark-command ;;'evil-scroll-down
        ;;deprecattion;;"m" #'er/expand-region ;;#'extend-selection
        ;;deprecattion;;"S-m" #'mark-line ;;#'extend-selection
        ;;deprecattion;;"<" #'loccur
        ;;deprecattion;;"0" #'delete-window
        ;;deprecattion;;"1" #'delete-other-windows
        ;;deprecattion;;"2" #'split-window-below
        ;;deprecattion;;"3" #'split-window-right
        ;;deprecattion;;"(" #'kmacro-start-macro
        ;;deprecattion;;")" #'kmacro-end-macro
        ;;deprecattion;;"xx"  #'kmacro-end-and-call-macro
        ;;deprecattion;;"xi"  #'string-inflection-all-cycle
        ;;deprecattion;;"D" #'toggle-current-window-dedication
        ;;deprecattion;;"kb" 'kill-buffer
        ;;deprecattion;;"op"  (cdar (cddr  (cadr  projectile-mode-map)))
        ;;deprecattion;;"opw"  'purpose-load-window-layout
        ;;deprecattion;;"opW"  'purpose-save-window-layout
        ;;deprecattion;;"opE"  'project-explorer-open
        ;;deprecattion;;"opC"  'project-explorer-close
        ;;deprecattion;;"op/"  'projectile-grep
        ;;deprecattion;;"<SPC>" #'smex

        "ohz" 'zeal-at-point
        "ohh"      'helm-mini
        "oha"      'helm-apropos
        "ohB"      'helm-buffers-list
        "ohb"      'helm-descbindings
        "ohy"      'helm-show-kill-ring
        "ohx"      'helm-M-x
        "oho"     'helm-occur
        "ohs"     'helm-swoop
        "ohy"     'helm-yas-complete
        "ohY"     'helm-yas-create-snippet-on-region
        "ohr" 'helm-all-mark-rings
        "ohm" 'helm-smex
        "ohM" 'helm-smex-major-mode-commands
        "od"  'counsel-goto-recent-directory

        "om" 'orgmail
        "oS" 'tmpscratch
        "oI" 'ibuffer
        "ox" 'winexe
        "or" 'org-capture
        "oa" 'org-agenda
        "ol" 'org-store-link
        "oc" 'org-cliplink
        "oG"  'gxref-set-project-dir
        "ogd" 'gxref-set-project-dir
        "ogc" 'gxref-clear-project-dir
        "ogu" 'gxref-update-db
        "[" 'ivy-push-view 
        "]" 'ivy-pop-view 
        )
    #+END_SRC

    #+RESULTS:

*** expand spacemacs
**** global
     #+BEGIN_SRC emacs-lisp

       (spacemacs/set-leader-keys
         ;; xl from spacemacs 
         "xll" 'sort-lines-length
         "xlU" 'uniq-region
         "xlS" 'sort-lines
         "&"   'org-mark-ring-goto
         "nx"  'zz-narrow-repeat
         "nz"  narrow-map
         )
     #+END_SRC

     #+RESULTS:

**** for major mode
     #+BEGIN_SRC emacs-lisp
       (spacemacs/set-leader-keys-for-major-mode 'org-mode
         "v" 'org-copy-visible)

       (spacemacs/set-leader-keys-for-major-mode 'mu4e-view-mode
         "&" 'org-mark-ring-goto)

       (spacemacs/set-leader-keys-for-major-mode 'mu4e-headers-mode
         "&" 'org-mark-ring-goto)

         (spacemacs/set-leader-keys-for-major-mode 'org-mode "os" ",',sb,c") 

     #+END_SRC

     #+RESULTS:

** evil mode line 
   #+BEGIN_SRC emacs-lisp :tangle no
     (if (eq window-system nil)
         (use-package powerline-evil
           :config
           (defpowerline powerline-lcl current-input-method-title)

           (setq-default 
            mode-line-format
            '("%e"
              (:eval
               (let* ((active (powerline-selected-window-active))
                      (mode-line (if active 'mode-line 'mode-line-inactive))
                      (face1 (if active 'powerline-active1 'powerline-inactive1))
                      (face2 (if active 'powerline-active2 'powerline-inactive2))
                      (separator-left (intern (format "powerline-%s-%s"
                                                      powerline-default-separator
                                                      (car powerline-default-separator-dir))))
                      (separator-right (intern (format "powerline-%s-%s"
                                                       powerline-default-separator
                                                       (cdr powerline-default-separator-dir))))
                      (lhs (list 
                            (powerline-lcl mode-line)
                            ;; (powerline-raw "≡ " mode-line) 
                            (powerline-raw "『" mode-line) 
                            (powerline-raw  (window-numbering-get-number-string))
                            (powerline-raw "』" mode-line) 

                            (let ((evil-face (powerline-evil-face)))
                              (if evil-mode
                                  (powerline-raw (powerline-evil-tag) evil-face)))
                            (when (buffer-modified-p) (powerline-raw "[+]" mode-line))
                            (when buffer-read-only (powerline-raw "[RO]" mode-line))
                            (powerline-buffer-id `(mode-line-buffer-id ,mode-line) 'l)
                            (powerline-raw "[" mode-line 'l)
                            (powerline-major-mode mode-line)
                            (powerline-process mode-line)
                            (powerline-raw "]" mode-line)
                            (powerline-raw "[%z]" mode-line)
                            ;; (powerline-raw (concat "[" (mode-line-eol-desc) "]") mode-line)
                            (when (boundp 'erc-modified-channels-object)
                              (powerline-raw erc-modified-channels-object face1 'l))
                            ;; (powerline-raw "[" mode-line 'l)
                            ;; (powerline-minor-modes mode-line)
                            ;; (powerline-raw "%n" mode-line)
                            ;; (powerline-raw "]" mode-line)
                            (when (and vc-mode buffer-file-name)
                              (let ((backend (vc-backend buffer-file-name)))
                                (when backend
                                  (concat (powerline-raw "[" mode-line 'l)
                                          (powerline-raw (format "%s / %s" backend (vc-working-revision buffer-file-name backend)))
                                          (powerline-raw "]" mode-line)))))))
                      (rhs (list (powerline-raw '(10 "%i"))
                                 (powerline-raw global-mode-string mode-line 'r)
                                 (powerline-raw "%l," mode-line 'l)
                                 (powerline-raw (format-mode-line '(10 "%c")))
                                 (powerline-raw (replace-regexp-in-string  "%" "%%" (format-mode-line '(-3 "%p"))) mode-line 'r)
                                 (when (and (boundp 'which-func-mode) which-func-mode) (powerline-raw which-func-format nil 'l))
                                 )))
                 (concat (powerline-render lhs)
                         (powerline-fill mode-line (powerline-width rhs))
                         (powerline-render rhs))))))))
     (use-package evil-mode-line)

   #+END_SRC

** evil default override 


   #+BEGIN_SRC emacs-lisp
  ;;deprecated;;(evilnc-default-hotkeys)

  ;;deprecated;;(global-set-key (kbd "C-x r t") 'inline-string-rectangle)
  (evil-set-toggle-key "<pause>")
  (define-key evil-normal-state-map "U" 'undo-tree-redo)
  (define-key evil-normal-state-map [escape] 'keyboard-quit)
  (define-key evil-visual-state-map [escape] 'keyboard-quit)
  (define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)
  ;; (define-key minibuffer-local-isearch-map [escape] 'keyboard-quit)
  ;;(define-key minibuffer-local-isearch-map [?\S- ] 'toggle-korean-input-method)




  ;;deprecated;;(global-set-key [M-return] 'smex)
  (define-key evil-normal-state-map (kbd "C-c +") #'evil-numbers/inc-at-pt)
  (define-key evil-normal-state-map (kbd "C-c -") #'evil-numbers/dec-at-pt)
  (define-key evil-normal-state-map "zx" 'smex)


  (define-key evil-normal-state-map "\C-a" 'evil-beginning-of-line)
  (define-key evil-insert-state-map "\C-a" 'beginning-of-line)
  (define-key evil-visual-state-map "\C-a" 'evil-beginning-of-line)


  (define-key evil-normal-state-map "\C-e" 'evil-end-of-line)
  (define-key evil-insert-state-map "\C-e" 'end-of-line)
  (define-key evil-visual-state-map "\C-e" 'evil-end-of-line)
  (define-key evil-normal-state-map "\C-f" 'evil-forward-char)
  (define-key evil-insert-state-map "\C-f" 'evil-forward-char)
  (define-key evil-insert-state-map "\C-f" 'evil-forward-char)
  (define-key evil-normal-state-map "\C-b" 'evil-backward-char)
  (define-key evil-insert-state-map "\C-b" 'evil-backward-char)
  (define-key evil-visual-state-map "\C-b" 'evil-backward-char)
  (define-key evil-normal-state-map "\C-d" 'evil-delete-char)
  (define-key evil-insert-state-map "\C-d" 'evil-delete-char)
  (define-key evil-visual-state-map "\C-d" 'evil-delete-char)
  (define-key evil-normal-state-map "\C-n" 'evil-next-line)
  (define-key evil-insert-state-map "\C-n" 'evil-next-line)
  (define-key evil-visual-state-map "\C-n" 'evil-next-line)
  (define-key evil-normal-state-map "\C-p" 'evil-previous-line)
  (define-key evil-insert-state-map "\C-p" 'evil-previous-line)
  (define-key evil-visual-state-map "\C-p" 'evil-previous-line)
  ;; (define-key evil-normal-state-map "\C-w" 'phi-rectangle-kill-region)
  ;; (define-key evil-insert-state-map "\C-w" 'phi-rectangle-kill-region)
  ;; (define-key evil-visual-state-map "\C-w" 'phi-rectangle-kill-region)
  (define-key evil-normal-state-map "\C-w" 'kill-region-dwim)
  (define-key evil-insert-state-map "\C-w" 'kill-region-dwim)
  (define-key evil-visual-state-map "\C-w" 'kill-region-dwim)
  (define-key evil-normal-state-map "\C-y" 'yank)
  (define-key evil-insert-state-map "\C-y" 'yank)
  (define-key evil-visual-state-map "\C-y" 'yank)
  (define-key evil-normal-state-map "\C-k" 'kill-line)
  (define-key evil-insert-state-map "\C-k" 'kill-line)
  (define-key evil-visual-state-map "\C-k" 'kill-line)
  (define-key evil-normal-state-map "Q" 'call-last-kbd-macro)
  (define-key evil-visual-state-map "Q" 'call-last-kbd-macro)

  ;;; http://leavinsprogramming.blogspot.kr/2012/05/evil-emacs-mode-for-vivim-users.html
  (defun evil-undefine ()
    (interactive)
    (let (evil-mode-map-alist)
      (call-interactively (key-binding (this-command-keys)))))
  (define-key evil-normal-state-map (kbd "TAB") 'evil-undefine)
  (define-key evil-motion-state-map "\C-]" 'find-tag-dwim)


  (define-key evil-normal-state-map "gl" 'goto-line)
  (define-key evil-normal-state-map "g[" 'beginning-of-buffer)
  (define-key evil-normal-state-map "g]" 'end-of-buffer      )
  (define-key evil-normal-state-map "g{" 'beginning-of-defun)
  (define-key evil-normal-state-map "g}" 'end-of-defun      )
  (define-key evil-normal-state-map "gg" 'revert-buffer)
  (define-key evil-normal-state-map "gR" 'xref-find-references)
  (define-key evil-normal-state-map "gr" 'xref-pop-marker-stack)


  (define-key evil-visual-state-map "gl" 'goto-line)
  (define-key evil-visual-state-map "g[" 'beginning-of-buffer)
  (define-key evil-visual-state-map "g]" 'end-of-buffer      )
  (define-key evil-visual-state-map "g{" 'beginning-of-defun)
  (define-key evil-visual-state-map "g}" 'end-of-defun      )
  (define-key evil-visual-state-map "gg" 'revert-buffer)
  (define-key evil-visual-state-map "gR" 'xref-find-references)
  (define-key evil-visual-state-map "gr" 'xref-pop-marker-stack)


  (define-key evil-normal-state-map "zf" 'vimish-fold-dwim) 
  ;; (define-key evil-visual-state-map "zf" 'vimish-fold) 
  (define-key evil-normal-state-map "zd" 'vimish-fold-delete) 
  (define-key evil-normal-state-map "zs" 'vimish-fold-next-fold) 
  (define-key evil-normal-state-map "zw" 'vimish-fold-previous-fold)

  (define-key evil-normal-state-map "zF" 'hs-toggle-hiding)


  ;; (define-key evil-motion-state-map "[[" 'backward-sexp)
  ;; (define-key evil-motion-state-map "]]" 'forward-sexp)

  (define-key evil-normal-state-map (kbd "C-c :" ) 'ac-complete-with-helm)
  (define-key evil-insert-state-map (kbd "C-c :" ) 'ac-complete-with-helm)

  (define-key evil-motion-state-map [down-mouse-1] 'mouse-drag-region)

   #+END_SRC

** kp map
   #+BEGIN_SRC emacs-lisp
  ;; kp-map 
  (define-key evil-normal-state-map [kp-0] 'helm-smex)
  (define-key evil-normal-state-map [kp-1] 'select-window-1)
  (define-key evil-normal-state-map [kp-2] 'select-window-2)
  (define-key evil-normal-state-map [kp-3] 'select-window-3)
  (define-key evil-normal-state-map [kp-4] 'evil-prev-buffer)
  (define-key evil-normal-state-map [kp-5] 'helm-mini)
  (define-key evil-normal-state-map [kp-6] 'evil-next-buffer)
  (define-key evil-normal-state-map [kp-8] 'split-window-below)
  (define-key evil-normal-state-map [kp-add] 'evil-paste-after)
  (define-key evil-normal-state-map [kp-enter] 'kmacro-end-and-call-macro)
  (define-key evil-normal-state-map [kp-decimal] 'winexe)
  (define-key evil-normal-state-map [kp-divide] 'twin)
  (define-key evil-normal-state-map [kp-subtract] 'recenter-top-bottom)
  (define-key evil-normal-state-map [kp-7] 'copy-to-register-1)
  (define-key evil-normal-state-map [kp-9] 'paste-from-register-1)

  (define-key evil-visual-state-map [kp-0] 'helm-smex)
  (define-key evil-visual-state-map [kp-1] 'select-window-1)
  (define-key evil-visual-state-map [kp-2] 'select-window-2)
  (define-key evil-visual-state-map [kp-3] 'select-window-3)
  (define-key evil-visual-state-map [kp-4] 'evil-prev-buffer)
  (define-key evil-visual-state-map [kp-5] 'helm-mini)
  (define-key evil-visual-state-map [kp-6] 'evil-next-buffer)
  (define-key evil-visual-state-map [kp-add] 'evil-yank)
  (define-key evil-visual-state-map [kp-enter] 'evil-paste-after)
  (define-key evil-visual-state-map [kp-decimal] 'winexe)
  (define-key evil-visual-state-map [kp-divide] 'twin)
  (define-key evil-visual-state-map [kp-8] 'split-window-below)
  (define-key evil-visual-state-map [kp-subtract] 'recenter-top-bottom)
  (define-key evil-visual-state-map [kp-7] 'copy-to-register-1)
  (define-key evil-visual-state-map [kp-9] 'paste-from-register-1)


   #+END_SRC

   #+RESULTS:
   : paste-from-register-1

** evil surround
   #+BEGIN_SRC emacs-lisp
  (use-package evil-surround
    :config
    (evil-define-key 'visual evil-surround-mode-map "s" 'evil-surround-region)
    (global-evil-surround-mode 1))

  (use-package evil-embrace
    :config
    (add-hook 'org-mode-hook 'embrace-org-mode-hook)
    (evil-embrace-enable-evil-surround-integration))

   #+END_SRC
** use other window
   #+BEGIN_SRC emacs-lisp
  (use-package owdriver
    :config
    (owdriver-define-command scroll-up               t)
    (owdriver-define-command scroll-down             t)
    (owdriver-define-command move-beginning-of-line  t)
    (owdriver-define-command move-end-of-line        t)
    (owdriver-define-command beginning-of-buffer     t)
    (owdriver-define-command end-of-buffer           t)
    (owdriver-define-command isearch-forward         t (isearch-forward))
    (owdriver-define-command isearch-backward        t (isearch-backward))
    (owdriver-define-command set-mark-command        t)

    (evil-leader/set-key 

      "`o" #'owdriver-next-window
      "`k" #'owdriver-do-scroll-up
      "`j" #'owdriver-do-scroll-down
      "`s" #'owdriver-do-isearch-forward
      "`r" #'owdriver-do-isearch-backward
      "`<" #'owdriver-do-beginning-of-buffer
      "`>" #'owdriver-do-end-of-buffer))

   #+END_SRC

   #+RESULTS:
   : t

** search override                                               :DEPRECATED:

   #+BEGIN_SRC emacs-lisp
;;;* vim keys -  http://www.tuxfiles.org/linuxhelp/vimcheat.html  

;; http://stackoverflow.com/questions/11052678/emacs-combine-iseach-forward-and-recenter-top-bottom
;; http://stackoverflow.com/questions/11052678/emacs-combine-iseach-forward-and-recenter-top-bottom

;; / 한글 
;; (defvar evil-search-norm-state nil)
;; (make-variable-buffer-local 'evil-search-norm-state)

;; (defadvice
;;     evil-search-forward
;;     (before evil-search-insert-state activate)
;;     (if (evil-normal-state-p) (progn (setq evil-search-norm-state t) (evil-insert-state))))

;; (defadvice
;;     evil-search-forward
;;     (after evil-search-normal-state activate)
;;     (if evil-search-norm-state  (evil-normal-state))
;;     (setf evil-search-norm-state nil))
;; (ad-activate 'evil-search-forward)


;;deprecated;;(defun evil-search-incrementally (forward regexp-p)
;;deprecated;;  "Search incrementally for user-entered text."
;;deprecated;;  (let ((evil-search-prompt (evil-search-prompt forward))
;;deprecated;;        (isearch-search-fun-function 'evil-isearch-function)
;;deprecated;;        (point (point))
;;deprecated;;        isearch-success search-nonincremental-instead)
;;deprecated;;    (setq isearch-forward forward)
;;deprecated;;    (evil-save-echo-area
;;deprecated;;      ;; set the input method locally rather than globally to ensure that
;;deprecated;;      ;; isearch clears the input method when it's finished
;;deprecated;;      (evil-insert-state)
;;deprecated;;      (if forward
;;deprecated;;          (isearch-forward regexp-p)
;;deprecated;;        (isearch-backward regexp-p))
;;deprecated;;      (evil-normal-state)
;;deprecated;;      (if (not isearch-success)
;;deprecated;;          (goto-char point)
;;deprecated;;        ;; always position point at the beginning of the match
;;deprecated;;        (when (and forward isearch-other-end)
;;deprecated;;          (goto-char isearch-other-end))
;;deprecated;;        (when (and (eq point (point))
;;deprecated;;                   (not (string= isearch-string "")))
;;deprecated;;          (if forward
;;deprecated;;              (isearch-repeat-forward)
;;deprecated;;            (isearch-repeat-backward))
;;deprecated;;          (isearch-exit)
;;deprecated;;          (when (and forward isearch-other-end)
;;deprecated;;            (goto-char isearch-other-end)))
;;deprecated;;        (evil-flash-search-pattern
;;deprecated;;         (evil-search-message isearch-string forward))))))

;;deprecated;;(evil-define-motion evil-search-forward ()
;;deprecated;;  (format "Search forward for user-entered text.
;;deprecated;;Searches for regular expression if `evil-regexp-search' is t.%s"
;;deprecated;;          (if (and (fboundp 'isearch-forward)
;;deprecated;;                   (documentation 'isearch-forward))
;;deprecated;;              (format "\n\nBelow is the documentation string \
;;deprecated;;for `isearch-forward',\nwhich lists available keys:\n\n%s"
;;deprecated;;                      (documentation 'isearch-forward)) ""))
;;deprecated;;  :jump t
;;deprecated;;  :type exclusive
;;deprecated;;  :repeat evil-repeat-search
;;deprecated;;    (progn                 ;MADE CHANGES HERE
;;deprecated;;      (evil-insert-state)
;;deprecated;;      (evil-search-incrementally t evil-regexp-search)
;;deprecated;;      (evil-normal-state)
;;deprecated;;    ))
;;deprecated;;
;;deprecated;;(evil-define-motion evil-search-backward ()
;;deprecated;;  (format "Search forward for user-entered text.
;;deprecated;;Searches for regular expression if `evil-regexp-search' is t.%s"
;;deprecated;;          (if (and (fboundp 'isearch-forward)
;;deprecated;;                   (documentation 'isearch-forward))
;;deprecated;;              (format "\n\nBelow is the documentation string \
;;deprecated;;for `isearch-forward',\nwhich lists available keys:\n\n%s"
;;deprecated;;                      (documentation 'isearch-forward)) ""))
;;deprecated;;  :jump t
;;deprecated;;  :type exclusive
;;deprecated;;  :repeat evil-repeat-search
;;deprecated;;    (progn                 ;MADE CHANGES HERE
;;deprecated;;      (evil-insert-state)
;;deprecated;;      (evil-search-incrementally nil evil-regexp-search)
;;deprecated;;      (evil-normal-state)
;;deprecated;;    ))

   #+END_SRC

** auto complete

   #+BEGIN_SRC emacs-lisp
;;; Auto-complete
(use-package auto-complete
  :config
  (evil-add-command-properties 'ac-complete :repeat 'evil-ac-repeat)
  (evil-add-command-properties 'ac-expand :repeat 'evil-ac-repeat)
  (evil-add-command-properties 'ac-next :repeat 'ignore)
  (evil-add-command-properties 'ac-previous :repeat 'ignore)

  (defvar evil-ac-prefix-len nil
    "The length of the prefix of the current item to be completed.")

  (defun evil-ac-repeat (flag)
    "Record the changes for auto-completion."
    (cond
     ((eq flag 'pre)
      (setq evil-ac-prefix-len (length ac-prefix))
      (evil-repeat-start-record-changes))
     ((eq flag 'post)
      ;; Add change to remove the prefix
      (evil-repeat-record-change (- evil-ac-prefix-len)
                                 ""
                                 evil-ac-prefix-len)
      ;; Add change to insert the full completed text
      (evil-repeat-record-change
       (- evil-ac-prefix-len)
       (buffer-substring-no-properties (- evil-repeat-pos
                                          evil-ac-prefix-len)
                                       (point))
       0)
      ;; Finish repeation
      (evil-repeat-finish-record-changes)))))

   #+END_SRC

** evil extra operator
   #+BEGIN_SRC emacs-lisp
     ;; https://github.com/redguardtoo/evil-matchit/blob/master/README.org
     (use-package evil-matchit
       :config
       (global-evil-matchit-mode 1 )
       (plist-put evilmi-plugins 'xah-html-mode '((evilmi-html-get-tag evilmi-html-jump)))
       (plist-put evilmi-plugins 'web-mode '((evilmi-html-get-tag evilmi-html-jump))))


     (use-package evil-args
       :config
       ;; bind evil-args text objects
       (define-key evil-inner-text-objects-map "a" 'evil-inner-arg)
       (define-key evil-outer-text-objects-map "a" 'evil-outer-arg)

       ;; bind evil-forward/backward-args
       (define-key evil-normal-state-map "L" 'evil-forward-arg)
       (define-key evil-normal-state-map "H" 'evil-backward-arg)
       (define-key evil-motion-state-map "L" 'evil-forward-arg)
       (define-key evil-motion-state-map "H" 'evil-backward-arg)

       ;; bind evil-jump-out-args
       (define-key evil-normal-state-map "K" 'evil-jump-out-args))

     (define-key evil-normal-state-map (kbd "<S-return>")
       (lambda ()
         (interactive)
         (call-interactively 'spacemacs/evil-insert-line-below)
         (evil-next-line)))

     (use-package evil-extra-operator
       :config
       (global-evil-extra-operator-mode 1))


     (use-package evil-visualstar
       :config
       (global-evil-visualstar-mode t))


   #+END_SRC

** mode specific 
*** ibuffer                                                      :deprecated:
    #+BEGIN_SRC emacs-lisp :tangle no
 ;; https://github.com/emacsmirror/evil/blob/master/evil-integration.el
 ;; Ibuffer
 (define-key ibuffer-mode-map (kbd  "<SPC>") nil)
 (progn
   (evil-make-overriding-map ibuffer-mode-map 'normal t)
   (evil-define-key 'normal ibuffer-mode-map
     "j" 'evil-next-line
     "k" 'evil-previous-line
     "RET" 'ibuffer-visit-buffer))
    #+END_SRC
*** w related mode 

    #+BEGIN_SRC emacs-lisp
  (progn
    (add-hook 'wdired-mode-hook #'evil-change-to-initial-state)
    (defadvice wdired-change-to-dired-mode (after evil activate)
      (evil-change-to-initial-state nil t)))



  ;; https://github.com/glynnforrest/emacs.d/blob/master/setup-occur-grep-ack.el

  (defun get-buffers-matching-mode (mode)
    "Returns a list of buffers where their major-mode is equal to MODE"
    (let ((buffer-mode-matches '()))
      (dolist (buf (buffer-list))
        (with-current-buffer buf
          (if (eq mode major-mode)
              (add-to-list 'buffer-mode-matches buf))))
      buffer-mode-matches))

  (defun multi-occur-in-this-mode ()
    "Show all lines matching REGEXP in buffers with this major mode."
    (interactive)
    (multi-occur
     (get-buffers-matching-mode major-mode)
     (car (occur-read-primary-args))))

  (defun occur-goto-occurrence-recenter ()
    "Go to the occurrence on the current line and recenter."
    (interactive)
    (occur-mode-goto-occurrence)
    (recenter))

  ;; Preview occurrences in occur without leaving the buffer
  (defun occur-display-occurrence-recenter ()
    "Display the occurrence on the current line in another window and recenter."
    (interactive)
    (occur-goto-occurrence-recenter)
    (other-window 1))


  ;; Grep mode
  (defun grep-goto-occurrence-recenter ()
    "Go to the occurrence on the current line and recenter."
    (interactive)
    (compile-goto-error)
    (recenter))

  (defun grep-display-occurrence-recenter ()
    "Display the grep result of the current line in another window and recenter."
    (interactive)
    (grep-goto-occurrence-recenter)
    (other-window 1))


  (use-package wgrep
    :config

    (w32-unix-eval
     ((evil-declare-key 'motion occur-mode-map (kbd "<return>")   'occur-goto-occurrence-recenter)
      (evil-declare-key 'motion grep-mode-map (kbd "<return>") 'grep-goto-occurrence-recenter)
      (evil-declare-key 'motion occur-mode-map (kbd "<S-return>") 'occur-display-occurrence-recenter)
      (evil-declare-key 'motion grep-mode-map (kbd "<S-return>") 'grep-display-occurrence-recenter)
      (evil-declare-key 'motion ack-and-a-half-mode-map (kbd "<return>") 'grep-goto-occurrence-recenter)
      (evil-declare-key 'motion ack-and-a-half-mode-map (kbd "<S-return>") 'grep-display-occurrence-recenter))
     ((evil-declare-key 'motion occur-mode-map (kbd "RET")   'occur-goto-occurrence-recenter)
      (evil-declare-key 'motion grep-mode-map (kbd "RET") 'grep-goto-occurrence-recenter)
      (evil-declare-key 'motion occur-mode-map (kbd "<S-RET>") 'occur-display-occurrence-recenter)
      (evil-declare-key 'motion grep-mode-map (kbd "<S-RET>") 'grep-display-occurrence-recenter)
      (evil-declare-key 'motion ack-and-a-half-mode-map (kbd "RET") 'grep-goto-occurrence-recenter)
      (evil-declare-key 'motion ack-and-a-half-mode-map (kbd "<S-RET>") 'grep-display-occurrence-recenter)))

    (evil-declare-key 'motion occur-mode-map "e" 'occur-edit-mode)
    (evil-declare-key 'motion occur-edit-mode-map "e" 'occur-cease-edit)
    (evil-declare-key 'motion grep-mode-map "e" 'wgrep-change-to-wgrep-mode)
    (evil-declare-key 'motion grep-mode-map "w" 'wgrep-save-all-buffers)
    ;;notuse;;(evil-declare-key 'motion ack-and-a-half-mode-map ",e" 'wgrep-change-to-wgrep-mode)
    ;;notuse;;(evil-declare-key 'motion ack-and-a-half-mode-map ",w" 'wgrep-save-all-buffers)
    (evil-declare-key 'motion wgrep-mode-map "e" 'wgrep-finish-edit)
    (evil-declare-key 'motion wgrep-mode-map "x" 'wgrep-abort-changes))


    #+END_SRC

*** sexp

**** paredit
     #+BEGIN_SRC emacs-lisp :tanble no
   ;;; https://github.com/laynor/emacs-conf/blob/master/site-lisp/evil-sexp/evil-sexp.el

   (defun beginning-and-end-of-sexp ()
     (destructuring-bind (b . e)
         (save-excursion
           (forward-char)
           (bounds-of-thing-at-point 'sexp))
       (cons b e)))

   (evil-define-motion evil-forward-sexp (count)
     :type inclusive
     (dotimes (i (or count 1))
       (let ((lookahead-1 (char-syntax (char-after (point))))
             (lookahead-2 (char-syntax (char-after (1+ (point)))))
             (new-point (point)))
         (condition-case nil
             (progn (save-excursion
                      (message "lookahead1 = %S, lookahead-2 = %S"
                               (string lookahead-1) (string lookahead-2))
                      (cond ((or (memq lookahead-2 '(?\ ?>))
                                 (member lookahead-1 '(?\ ?>)))
                             (forward-char)
                             (skip-syntax-forward "->")
                             (setq new-point (point)))
                            (t (unless (memq lookahead-1 '(?\" ?\())
                                 (forward-char))
                               (sp-forward-sexp)
                               (backward-char)
                               (setq new-point (point)))))
                    (goto-char new-point))
           (error (error "End of sexp"))))))

   (evil-define-motion evil-backward-sexp (count)
     :type inclusive
     (dotimes (i (or count 1))
       (let ((lookahead (char-syntax (char-after (point))))
             (new-point (point)))
         (condition-case nil
             (progn (save-excursion
                      (when (memq lookahead '(?\) ?\"))
                        (forward-char))
                      (sp-backward-sexp)
                      (setq new-point (point)))
                    (goto-char new-point))
           (error (error "Beginning of sexp"))))))

   (evil-define-motion evil-enter-sexp (count)
     :type inclusive
     (dotimes (i (or count 1))
       (let ((lookahead-1 (char-syntax (char-after (point))))
             (lookahead-2 (char-syntax (char-after (1+ (point)))))
             (lookbehind-1 (char-syntax (char-before (point))))
             (lookbehind-2 (char-syntax (char-before (1- (point))))))
         (cond ((and (= lookahead-1 ?\()
                     (/= lookbehind-1 ?\\)
                     (= (char-after (1+ (point))) ?\n))
                (forward-char)
                (skip-syntax-forward "-"))
               ((and (= lookahead-1 ?\()
                     (/= lookbehind-1 ?\\)
                     (/= lookahead-2 ?\)))
                ;; do not move the cursor if it's on the opening paren of ()
                (forward-char)
                (skip-syntax-forward "-"))
               ((and (= lookahead-1 ?\))
                     (or (/= lookbehind-1 ?\( )
                         (= lookbehind-2 ?\\)))
                ;; do not move the cursor if it's on the closing paren of ()
                (skip-syntax-backward "-")
                (backward-char))
               (t (error "Already at the deepest level"))))))



   ;; Does not work correctly when there are spaces after parens
   ;; does not work correctly when inside a string, check paredit.
   ;; check when there are spaces before parens
   ;; When the cursor is on an open paren, go up one level on an open paren
   (use-package paredit ;  (smartparens)
     :config
     (evil-define-motion evil-exit-sexp (count)
       :type inclusive
       (dotimes (i (or count 1))
         (let (op-pos cl-pos)
           (condition-case nil
               (progn (save-excursion
                        (sp-backward-up-sexp)
                        (setq op-pos (point))
                        (sp-forward-sexp)
                        (setq cl-pos (point)))
                      (let ((lookahead (char-syntax (char-after (point)))))
                        (case lookahead
                          (?\( (goto-char op-pos))
                          (?\) (goto-char cl-pos))
                          (otherwise (goto-char (if (> (abs (- (point) cl-pos))
                                                       (abs (- (point) op-pos)))
                                                    op-pos
                                                  cl-pos))))))
             (error (error "Already at top-level."))))) )

     ;; (provide 'evil-sexp)


     (define-key evil-motion-state-map (kbd "H-j") 'evil-enter-sexp)
     (define-key evil-motion-state-map (kbd "H-k") 'evil-exit-sexp)
     (define-key evil-motion-state-map (kbd "H-h") 'evil-backward-sexp)
     (define-key evil-motion-state-map (kbd "H-l") 'evil-forward-sexp)
     (define-key evil-motion-state-map (kbd "<C-H-up>")     'buf-move-up)
     (define-key evil-motion-state-map (kbd "<C-H-down>")   'buf-move-down)
     (define-key evil-motion-state-map (kbd "<C-H-left>")   'buf-move-left)
     (define-key evil-motion-state-map (kbd "<C-H-right>")  'buf-move-right)
     (define-key evil-motion-state-map "zl" 'evil-forward-sexp)
     (define-key evil-motion-state-map "zh" 'evil-backward-sexp)
     (define-key evil-motion-state-map "zj" 'evil-enter-sexp)
     (define-key evil-motion-state-map "zk" 'evil-exit-sexp))


   ;;; http://blog.binchen.org/?p=782
   (eval-after-load "evil" '(setq expand-region-contract-fast-key "z"))
   (evil-define-key 'normal paredit-mode-map "\C-k" 'paredit-kill)
   (evil-define-key 'visual paredit-mode-map "\C-k" 'paredit-kill)
   (evil-define-key 'insert paredit-mode-map "\C-k" 'paredit-kill)

     #+END_SRC
**** evil-cleverparens
     #+BEGIN_SRC emacs-lisp
     (add-hook 'elisp-mode  #'evil-cleverparens-mode)
     (add-hook 'scheme-mode #'evil-cleverparens-mode)
     #+END_SRC

     #+RESULTS:
     | evil-cleverparens-mode |

*** org 
**** org-show-current-heading-tidily
     #+BEGIN_SRC emacs-lisp
   (defun org-show-current-heading-tidily ()
     (interactive)  ;Inteactive
     "Show next entry, keeping other entries closed."
     (if (save-excursion (end-of-line) (outline-invisible-p))
         (progn (org-show-entry) (show-children))
       (outline-back-to-heading)
       (unless (and (bolp) (org-on-heading-p))
         (org-up-heading-safe)
         (hide-subtree)
         (error "Boundary reached"))
       (org-overview)
       (org-reveal t)
       (org-show-entry)
       (show-children)))



   (evil-define-key 'normal evil-org-mode-map
     "=" 'org-show-current-heading-tidily
     ;;deprecatedby-evil-org;;"<" 'org-shiftleft
     ;;deprecatedby-evil-org;;">" 'org-shiftright
     )

   (evil-leader/set-key-for-mode 'org-mode
     "ha" 'helm-org-agenda-files-headings
     "hH" 'helm-org-headings
     "A"  #'(lambda () (interactive) (switch-to-buffer "*Org Agenda*"))
     "hh" 'helm-org-in-buffer-headings

     "u"    'outline-up-heading
     "q"    'org-todo
     "<down>"    'outline-next-visible-heading
     "<up>"    'outline-previous-visible-heading
     "<right>"    'org-forward-heading-same-level
     "<left>"    'org-backward-heading-same-level

     "r"         'org-mark-ring-goto
     "&"         'org-mark-ring-goto


     "or" 'org-capture
     "oa" 'org-agenda
     "os" 'org-store-link
     "ol" 'org-insert-alllink
     "oo" 'org-open-at-point-global
     "oR" 'org-refile
     "oc" 'org-cliplink
     "od" 'org-deadline
     "oh" 'org-schedule
     "ot" 'org-set-tags
     "oT" 'org-time-stamp
     "ov" 'org-attach-screenshot
     "ob" 'org-iswitchb
     "ow" 'org-archive-subtree-default
     "op" 'org-link-copy-image
     "of" 'org-link-copy-file
     "oe" 'org-set-effort
     "oi" 'org-clock-in
     "oI" 'org-clock-out
     "w" 'org-archive-subtree-default
     "<f5>" 'org-redisplay-inline-images
     )


   (use-package org
     :config
     (evil-define-key 'normal evil-org-mode-map
       (kbd "<kp-multiply>") 'org-insert-star)

     (evil-define-key 'insert evil-org-mode-map
       (kbd "<M-return>") 'org-meta-return))

     #+END_SRC

     #+RESULTS:
     : t

**** evil-org 
     deprecated by evil-org
***** next deprecated 
    #+BEGIN_SRC emacs-lisp :tangle no
   

    (evil-leader/set-key-for-mode 'org-mode
      "ha" 'helm-org-agenda-files-headings
      "hH" 'helm-org-headings
      "A"  #'(lambda () (interactive) (switch-to-buffer "*Org Agenda*"))
      "hh" 'helm-org-in-buffer-headings

      "u"    'outline-up-heading
      "q"    'org-todo
      "<down>"    'outline-next-visible-heading
      "<up>"    'outline-previous-visible-heading
      "<right>"    'org-forward-heading-same-level
      "<left>"    'org-backward-heading-same-level

      "r"         'org-mark-ring-goto
      "&"         'org-mark-ring-goto


      "or" 'org-capture
      "oa" 'org-agenda
      "os" 'org-store-link
      "ol" 'org-insert-alllink
      "oo" 'org-open-at-point-global
      "oR" 'org-refile
      "oc" 'org-cliplink
      "od" 'org-deadline
      "oh" 'org-schedule
      "ot" 'org-set-tags
      "oT" 'org-time-stamp
      "ov" 'org-attach-screenshot
      "ob" 'org-iswitchb
      "ow" 'org-archive-subtree-default
      "op" 'org-link-copy-image
      "of" 'org-link-copy-file
      "oe" 'org-set-effort
      "oi" 'org-clock-in
      "oI" 'org-clock-out
      "w" 'org-archive-subtree-default
      )


    (use-package org
      :config
      (evil-define-key 'normal evil-org-mode-map
        (kbd "RET") 'org-open-at-point
        "za" 'org-cycle
        "zA" 'org-shifttab
        "zm" 'hide-body
        "zr" 'show-all
        "zo" 'show-subtree
        "zO" 'show-all
        "zc" 'hide-subtree
        "zC" 'hide-all
        (kbd "<S-next>") 'evil-forward-paragraph
        (kbd "<S-prev>") 'evil-backward-paragraph

        "gn"    'outline-next-visible-heading
        "gp"    'outline-previous-visible-heading
        "gf"    'org-forward-heading-same-level
        "gb"    'org-backward-heading-same-level
        "gu"    'outline-up-heading
        "gt"    'org-goto
    
       ;;deprecatedby-evil-org;;"gj"    'outline-next-visible-heading
       ;;deprecatedby-evil-org;;"gk"    'outline-previous-visible-heading
       ;;deprecatedby-evil-org;;"gl"    'org-forward-heading-same-level
       ;;deprecatedby-evil-org;;"gh"    'org-backward-heading-same-level
    
        (kbd "<kp-multiply>") 'org-insert-star
        (kbd "M-j") 'org-shiftleft
        (kbd "M-k") 'org-shiftright
        (kbd "M-H") 'org-metaleft
        (kbd "M-J") 'org-metadown
        (kbd "M-K") 'org-metaup
        (kbd "M-L") 'org-metaright
        )

      (evil-define-key 'visual evil-org-mode-map
        "gn"    'outline-next-visible-heading
        "gp"    'outline-previous-visible-heading
        "gf"    'org-forward-heading-same-level
        "gb"    'org-backward-heading-same-level
        "gu"    'outline-up-heading
        "gt"    'org-goto
        (kbd "<S-next>") 'evil-forward-paragraph
        (kbd "<S-prev>") 'evil-backward-paragraph

        ;;deprecatedby-evil-org;;"gj"    'outline-next-visible-heading
        ;;deprecatedby-evil-org;;"gk"    'outline-previous-visible-heading
        ;;deprecatedby-evil-org;;"gl"    'org-forward-heading-same-level
        ;;deprecatedby-evil-org;;"gh"    'org-backward-heading-same-level
    
        )


      (evil-define-key 'normal orgstruct-mode-map
        (kbd "RET") 'org-open-at-point
        "za" 'org-cycle
        "zA" 'org-shifttab
        "zm" 'hide-body
        "zr" 'show-all
        "zo" 'show-subtree
        "zO" 'show-all
        "zc" 'hide-subtree
        "zC" 'hide-all
        (kbd "M-j") 'org-shiftleft
        (kbd "M-k") 'org-shiftright
        (kbd "M-H") 'org-metaleft
        (kbd "M-J") 'org-metadown
        (kbd "M-K") 'org-metaup
        (kbd "M-L") 'org-metaright)

      (evil-define-key 'insert evil-org-mode-map
        (kbd "M-j") 'org-shiftleft
        (kbd "M-k") 'org-shiftright
        (kbd "M-H") 'org-metaleft
        (kbd "M-J") 'org-metadown
        (kbd "M-K") 'org-metaup
        (kbd "M-L") 'org-metaright
        (kbd "<M-return>") 'org-meta-return
        (kbd "<S-next>") 'evil-forward-paragraph
        (kbd "<S-prev>") 'evil-backward-paragraph)

      (evil-define-key 'insert orgstruct-mode-map
        (kbd "M-j") 'org-shiftleft
        (kbd "M-k") 'org-shiftright
        (kbd "M-H") 'org-metaleft
        (kbd "M-J") 'org-metadown
        (kbd "M-K") 'org-metaup
        (kbd "M-L") 'org-metaright)

      )


    #+END_SRC
***** use this
      #+BEGIN_SRC emacs-lisp

        (evil-define-key 'normal evil-org-mode-map
          "gn"    'outline-next-heading
          "gN"    'outline-next-visible-heading
          "gP"    'outline-previous-visible-heading
          "gl"    'goto-line
          ;;"gf"    'org-forward-heading-same-level
          ;;"gb"    'org-backward-heading-same-level
          ;;"gu"    'outline-up-heading
          ;;"gt"    'org-goto

          )

        (evil-define-key 'visual evil-org-mode-map
          "gn"    'outline-next-heading
          "gN"    'outline-next-visible-heading
          "gP"    'outline-previous-visible-heading
          "gl"    'goto-line
          ;;"gf"    'org-forward-heading-same-level
          ;;"gb"    'org-backward-heading-same-level
          ;;"gu"    'outline-up-heading
          ;;"gt"    'org-goto
  
          )
      #+END_SRC

      #+RESULTS:
      : t

*** mu4e
**** deprecated
     #+BEGIN_SRC emacs-lisp :tangle no
       (use-package evil-mu4e
         :config
         (mapcar 
          (lambda (x)
            (add-to-list 'evil-mu4e-mode-map-bindings `(normal mu4e-main-mode-map ,(car x) ,(cadr x ))))
          '(
            ("B"               mu4e-headers-search-bookmark-edit)
            ("s"               mu4e-headers-search)))
         (mapcar 
          (lambda (x)
            (add-to-list 'evil-mu4e-mode-map-bindings `(normal mu4e-view-mode-map ,(car x) ,(cadr x ))))
          '(
            ("*"             bmkp-mu4e-view)
            ("<home>"             open-mu4e-view)   ;open in outlook
            ("<kp-multiply>" bmkp-mu4e-view)
            ("@"             copy-mu4e-view)
            ("B"               mu4e-headers-search-bookmark-edit)
            ("F"             mu4e-find-file)
            ("f"             mu4e-field-view)
            ("o" mu4e-view-open-attachment)
            ("O" mu4e-view-open-attachment-emacs)
            ("s"               mu4e-headers-search)
            ("S" mu4e-view-save-attachment)
            ("U" mu4e-mark-unmark-all)
            ("x"             mu4e-mark-execute-all )
 ))
         (mapcar 
          (lambda (x)
            (add-to-list 'evil-mu4e-mode-map-bindings `(normal mu4e-headers-mode-map ,(car x) ,(cadr x ))))
          '(
            ("*"             bmkp-mu4e-header)
            ("<home>"             open-mu4e-view)   ;open in outlook
            ("<insert>"        mu4e-headers-mark-for-something)   ;open in outlook
            ("<kp-multiply>" bmkp-mu4e-header)
            ("@"             copy-mu4e-header)
            ("B"               mu4e-headers-search-bookmark-edit)
            ("F"             mu4e-find-file)
            ("f"             mu4e-field-header)
            ("s"               mu4e-headers-search)
            ("U" mu4e-mark-unmark-all)
            ("u" mu4e-headers-mark-for-unmark)
            ("x"             mu4e-mark-execute-all )
 ))
         (evil-mu4e-init)
         (evil-define-key 'normal mu4e-headers-mode-map
           "?" mu4e-headers-mode-map)
         (evil-define-key 'normal mu4e-view-mode-map
           "?" mu4e-view-mode-map))

     #+END_SRC

**** brand new
     #+BEGIN_SRC emacs-lisp 
       (use-package evil-mu4e
         :config
         (append-to-list
          'evil-mu4e-mode-map-bindings
          (mapcar 
           (lambda (x)
             `(normal mu4e-main-mode-map ,(car x) ,(cadr x )))
           '(
             ("B"               mu4e-headers-search-bookmark-edit)
             ("s"               mu4e-headers-search))))
         (append-to-list
          'evil-mu4e-mode-map-bindings
          (mapcar
           (lambda (x)
             `(normal mu4e-view-mode-map ,(car x) ,(cadr x )))
           `(
             ("*"             bmkp-mu4e-view)
             (,(kbd "<home>")             open-mu4e-view)   ;open in outlook
             (,(kbd "<insert>")           mu4e-headers-mark-for-something)   ;open in outlook
             (,(kbd "<kp-multiply>") bmkp-mu4e-view)
             ("@"             copy-mu4e-view)
             ("B"               mu4e-headers-search-bookmark-edit)
             ("F"             mu4e-find-file)
             ("f"             mu4e-field-view)
             ("o" mu4e-view-open-attachment)
             ("O" mu4e-view-open-attachment-emacs)
             ("m"  	mu4e-view-mark-for-tag)
             ("#"  	mu4e-mark-resolve-deferred-marks)
             ("$"  	mu4e-show-log)
             (">"  	end-of-buffer)
             ("C"  	mu4e-compose-new)
             ("E"  	mu4e-compose-edit)
             ("F"  	mu4e-find-file)
             ("H"  	mu4e-display-manual)
             ("R"  	mu4e-compose-reply)
             ("U"  	mu4e-mark-unmark-all)
             ("f"  	mu4e-field-header)
             ("s"  	mu4e-query-fragments-search)
             ("x"  	mu4e-mark-execute-all)
             ("y"  	mu4e-select-other-view))))
         (append-to-list
          'evil-mu4e-mode-map-bindings
          (mapcar
           (lambda (x)
             `(normal mu4e-headers-mode-map ,(car x) ,(cadr x )))
           `(
             (,(kbd "<home>")             open-mu4e-view)   ;open in outlook
             (,(kbd "<insert>")        mu4e-headers-mark-for-something)   ;open in outlook
             (,(kbd "<kp-multiply>") bmkp-mu4e-header)
             ("@"             copy-mu4e-header)
             ("B"               mu4e-headers-search-bookmark-edit)
             ("x"             mu4e-mark-execute-all)
             ("F"             mu4e-find-file)
             ("f"             mu4e-field-header)
             ("#"  	mu4e-mark-resolve-deferred-marks)
             ("$"  	mu4e-show-log)
             (">"  	end-of-buffer)
             ("C"  	mu4e-compose-new)
             ("E"  	mu4e-compose-edit)
             ("F"  	mu4e-find-file)
             ("H"  	mu4e-display-manual)
             ("R"  	mu4e-compose-reply)
             ("U"  	mu4e-mark-unmark-all)
             ("f"  	mu4e-field-header)
             ("s"  	mu4e-query-fragments-search)
             ("x"  	mu4e-mark-execute-all)
             ("y"  	mu4e-select-other-view)
             ("%"  	mu4e-headers-mark-pattern)
             ("&"  	mu4e-headers-mark-custom)
             ("+"  	mu4e-headers-mark-for-flag)
             ("-"  	mu4e-headers-mark-for-unflag)
             ("/"  	mu4e-headers-search-narrow)
             ("="  	mu4e-headers-mark-for-untrash)
             ("?"  	mu4e-headers-mark-for-unread)
             ("A"  	mu4e-headers-mark-for-action)
             ("B"  	mu4e-headers-search-bookmark-edit)
             ("D"  	mu4e-headers-mark-for-delete)
             ("O"  	mu4e-headers-change-sorting)
             ("P"  	mu4e-headers-toggle-threading)
             ("Q"  	mu4e-headers-toggle-full-search)
             ("S"  	mu4e-headers-search-edit)
             ("T"  	mu4e-headers-mark-thread)
             ("V"  	mu4e-headers-toggle-skip-duplicates)
             ("W"  	mu4e-headers-toggle-include-related)
             ("["  	mu4e-headers-prev-unread)
             ("\\"  	mu4e-headers-query-prev)
             ("]"  	mu4e-headers-next-unread)
             ("a"  	mu4e-headers-action)
             ("b"  	mu4e-headers-search-bookmark)
             ("d"  	mu4e-headers-mark-for-trash)
             ("m"  	mu4e-headers-mark-for-tag)
             ("J"  	mu4e~headers-jump-to-maildir)
             ("M"  	mu4e-headers-mark-for-move)
             ("n"  	mu4e-headers-next)
             ("p"  	mu4e-headers-prev)
             ("q"  	mu4e~headers-quit-buffer)
             ("r"  	mu4e-headers-mark-for-refile)
             ("t"  	mu4e-headers-mark-subthread)
             ("u"  	mu4e-headers-mark-for-unmark)
             ( ,(kbd "<backspace>")	mu4e-headers-mark-for-trash)
             ( ,(kbd "<delete>")	    mu4e-headers-mark-for-delete)
             ( ,(kbd "<deletechar>")	mu4e-headers-mark-for-delete))))
         (evil-mu4e-init)
         (evil-define-key 'normal mu4e-headers-mode-map
           (kbd "<f12>") mu4e-headers-mode-map)
         (evil-define-key 'normal mu4e-view-mode-map
           (kbd "<f12>") mu4e-view-mode-map))

     #+END_SRC


*** dired                 
    

**** helm-dired-history 
     #+BEGIN_SRC emacs-lisp 
       (evil-define-key 'normal dired-mode-map ",h" #'helm-dired-history-view)
     #+END_SRC

     #+RESULTS:

**** dired mapping                                              :deprecated:
#+BEGIN_SRC emacs-lisp
       ;;  (use-package dired
       ;;    :config
       ;;;;; Dired
       ;;    (define-key dired-mode-map (kbd "SPC") nil)
       ;;    (define-key dired-mode-map (kbd "/") nil)
       ;;    (define-key dired-mode-map (kbd "n") nil)
       ;;    (define-key dired-mode-map (kbd "N") nil)
       ;;    
       ;;    ;; use the standard Dired bindings as a base
       ;;    (evil-make-overriding-map dired-mode-map 'normal t)
       ;;    (evil-add-hjkl-bindings dired-mode-map 'normal
       ;;      "J" 'dired-goto-file     ; "j"
       ;;      "K" 'dired-do-kill-lines ; "k"
       ;;      ;; "r" 'dired-do-redisplay  ; "l"
       ;;      "r" 'revert-buffer
       ;;      ;; "g" 'revert-buffer
       ;;      (kbd  "RET") 'diredp-find-file-reuse-dir-buffer
       ;;      ";" (lookup-key dired-mode-map ":")) ; ":d", ":v", ":s", ":e"
       ;;    (evil-define-key 'normal dired-mode-map "R" 'dired-do-rename)
       ;;    ;;evil-extra-operator;;(evil-define-key 'normal dired-mode-map "gg" 'revert-buffer)
       ;;    ;;evil-extra-operator;;(evil-declare-key 'normal dired-mode-map "g" 'revert-buffer)
       ;;    (define-key dired-mode-map ":;" 'dired-sort-menu-toggle-dirs-first))
#+END_SRC

*** key combo

    #+BEGIN_SRC emacs-lisp
(use-package key-combo
  :config
  ;;   (global-key-combo-mode t)
  ;;   (key-combo-define evil-insert-state-map (kbd "=") '(" = " " == " "=" " === "))
  ;;   (key-combo-define evil-insert-state-map (kbd "+") '(" + " "+" " += " "++"))
  ;;   (key-combo-define evil-insert-state-map (kbd "-") '("-" " - " " -= " "--"))
  ;;   (key-combo-define evil-insert-state-map (kbd "*") '(" * " "*" " *= "))
  ;;   (key-combo-define evil-normal-state-map (kbd "/") 'key-combo-execute-orignal)
  ;;   (key-combo-define evil-insert-state-map (kbd "/") '("/" " / " " /= " "/* `!!' */" "//"))
  ;;   (key-combo-define evil-insert-state-map (kbd "%") '("%" " % " " %= "))
  ;;   (key-combo-define evil-insert-state-map (kbd "!") '("!" " != "))
  ;;   (key-combo-define evil-insert-state-map (kbd "&") '(" && " "&"))
  ;;   (key-combo-define evil-insert-state-map (kbd "|") '(" || " "|"))
  ;;   (key-combo-define evil-insert-state-map (kbd "?") '(" ? " "?"))
  ;;   (key-combo-define evil-insert-state-map (kbd ",") '(", " "," ",\n"))
  ;;   (key-combo-define evil-insert-state-map (kbd "{") '("{\n`!!'\n}" "{" "{`!!'}" "{}"))
  ;;   (key-combo-define evil-insert-state-map (kbd "(") '("(`!!')" "(" "()"))
  ;;   (key-combo-define evil-insert-state-map (kbd "[") '("[`!!']" "[" "[]"))
  ;;   (key-combo-define evil-insert-state-map (kbd "<")  '(" < " " <= " " < " " << " "<<" "<`!!'>"))
  ;;   (key-combo-define evil-insert-state-map (kbd ">")  '(" > " " >= " " > " " >> " ">>"))
  ;;   (key-combo-define evil-insert-state-map (kbd "\"") '("\"`!!'\""  "\""  "\"\"\"`!!'\"\"\""))
  ;;   (key-combo-define evil-insert-state-map (kbd ";") '(";\n" ";"))
  ;;   (add-hook 'web-mode-hook (lambda()
  ;;     (key-combo-define evil-insert-state-map (kbd "<")  '("<" "<`!!'>"))
  ;;     (key-combo-define evil-insert-state-map (kbd "/")  '("/" "</`!!'>"))
  ;;     (key-combo-define evil-insert-state-map (kbd ">")  '(">"))
  ;;     (key-combo-define evil-insert-state-map (kbd "=")  '("="))
  ;;     (key-combo-define evil-insert-state-map (kbd "*")  '("*"))
  ;;     (key-combo-define evil-insert-state-map (kbd "!")  '("!" "<!-- `!!' -->"))
  ;;   ))

  (add-hook
   'c++-mode-hook
   '(lambda ()
      (key-combo-mode t)
      (key-combo-define evil-insert-state-map (kbd "-")  '("-" "_"))))
  )

    #+END_SRC
*** key guide

    #+BEGIN_SRC emacs-lisp
;;; guide-key 
;; @see https://bitbucket.org/lyro/evil/issue/511/let-certain-minor-modes-key-bindings


;; [[file:t:/gitdir/dot-emacs/etc/hyone-key-combo.el::(defun%20evil-key-combo-define%20(state%20keymap%20key%20commands)][combo for evil]]

;; (use-package guide-key
;;   :config
;;   (guide-key-mode)
;;   (defun guide-key-hook-function-for-org-mode ()
;;     (guide-key/add-local-guide-key-sequence "C-c")
;;     (guide-key/add-local-guide-key-sequence "C-c C-x")
;;     (guide-key/add-local-highlight-command-regexp "org-"))
;;   (add-hook 'org-mode-hook 'guide-key-hook-function-for-org-mode))

(use-package which-key
  :config
  (which-key-mode)
  ( which-key-setup-side-window-right)
  (setq which-key-popup-type 'side-window)
  (setq which-key-side-window-max-width 0.5)
  )

    #+END_SRC

*** magit
    #+BEGIN_SRC emacs-lisp

;; (use-package magit
;;   :commands magit-status magit-diff magit-log magit-blame-mode
;;   :init
;;   (evil-leader/set-key
;;     "g t" 'magit-status
;;     "g b" 'magit-blame-mode
;;     "g l" 'magit-log
;;     "g d" 'magit-diff)
;;   :config
;;   (progn
;;     (evil-make-overriding-map magit-mode-map 'emacs)
;;     (define-key magit-mode-map "\C-w" 'evil-window-map)
;;     (evil-define-key 'emacs magit-mode-map "j" 'magit-goto-next-section)
;;     (evil-define-key 'emacs magit-mode-map "k" 'magit-goto-previous-section)
;;     (evil-define-key 'emacs magit-mode-map "K" 'magit-discard-item))) 


(use-package git-timemachine
  :config
  (evil-make-overriding-map git-timemachine-mode-map 'normal)
  ;; force update evil keymaps after git-timemachine-mode loaded
  (add-hook 'git-timemachine-mode-hook #'evil-normalize-keymaps))



(use-package evil-magit 
  :commands
  (magit-status))

    #+END_SRC

*** mathinput
    #+BEGIN_SRC emacs-lisp :tangle on
      (use-package xah-math-input-mode
        :config
        (evil-declare-key 'normal xah-math-input-keymap [f9] 'xah-math-input-change-to-symbol)
        (evil-declare-key 'insert xah-math-input-keymap [f9] 'xah-math-input-change-to-symbol)
        (evil-declare-key 'visual xah-math-input-keymap [f9] 'xah-math-input-change-to-symbol))
    #+END_SRC
    
*** deprecated
    #+BEGIN_SRC emacs-lisp
;;deprecated;;(defun gf/narrow-grep-buffer ()
;;deprecated;;  "Narrow the grep buffer stripping out the really long grep command."
;;deprecated;;  (interactive)
;;deprecated;;  (goto-line 5)
;;deprecated;;  (narrow-to-region (point) (point-max))
;;deprecated;;  (goto-line 1))
;;deprecated;;
;;deprecated;;(define-key evil-normal-state-map (kbd "C-c g")
;;deprecated;;  (lambda()
;;deprecated;;    (interactive)
;;deprecated;;    (call-interactively 'projectile-ack)
;;deprecated;;    (other-window 1)
;;deprecated;;    (gf/narrow-grep-buffer)
;;deprecated;;    ))
    #+END_SRC



** bind map
   #+BEGIN_SRC emacs-lisp
(use-package evil-lisp-state
  :init
  (let ((leader ","))
    (bind-map evil-lisp-state-map
      :evil-keys (leader)
      :major-modes (emacs-lisp-mode)
      :evil-states (normal lisp))
    (bind-map evil-lisp-state-major-mode-map
       :evil-keys (leader)
       :evil-states (normal lisp)
       :major-modes (emacs-lisp-mode))) )
   #+END_SRC
** evil start

   #+BEGIN_SRC emacs-lisp
 (evil-mode 1)
   #+END_SRC

** evil-innter-text
   #+BEGIN_SRC emacs-lisp
   (define-key evil-inner-text-objects-map "k" 'evil-textobj-column-word)
   (define-key evil-inner-text-objects-map "K" 'evil-textobj-column-word)
   #+END_SRC
** unimpaired
   #+BEGIN_SRC emacs-lisp
   (define-key evil-normal-state-map (kbd "[ B") 'iflipb-previous-buffer)
   (define-key evil-normal-state-map (kbd "] B") 'iflipb-next-buffer)


   (define-key evil-visual-state-map (kbd "[ c") 'copy-heading-striped)
   (define-key evil-normal-state-map (kbd "[ c") 'copy-kill-ring-top-heading-striped) 


   #+END_SRC

   #+RESULTS:
   : iflipb-next-buffer

* bind map                                                       :DEPRECATED:
#+BEGIN_SRC emacs-lisp :tangle no

  ;; (use-package bind-map
  ;;   :config
  ;;   (bind-map my-org-map
  ;;             :evil-keys (",")
  ;;             :major-modes (org-mode))
  ;;   (bind-map-set-keys my-org-map
  ;;                      "t" 'ido-choose-from-recentf)) 


  (use-package bind-map
    :config
    (bind-map-set-keys helm-ag-map
      (kbd "<f2>") 'helm-ag-edit
      (kbd "<f3>") 'helm-ag--run-save-buffer)
    (bind-map-set-keys helm-grep-map
      (kbd "<f3>") 'helm-grep-run-save-buffer))

#+END_SRC

#+RESULTS:
: t



* evil visual selection - evil 과 org mode 간에 상충 발생

  #+BEGIN_SRC emacs-lisp :tangle no
    (define-key evil-normal-state-map (kbd "S-<left>")
      (lambda ()
        (interactive)
        (evil-visual-char)
        (backward-char)))
    (define-key evil-normal-state-map (kbd "S-<right>") 
      (lambda ()
        (interactive)
        (evil-visual-char)
        (forward-char)))
    (define-key evil-normal-state-map (kbd "S-<up>")
      (lambda ()
        (interactive)
        (evil-visual-char)
        (previous-line)))
    (define-key evil-normal-state-map (kbd "S-<down>") 
      (lambda ()
        (interactive)
        (evil-visual-char)
        (next-line)))

  #+END_SRC

  #+RESULTS:
  | lambda | nil | (interactive) | (evil-visual-char) | (next-line) |

* lion mode 
[[https://github.com/edkolev/evil-lion][GitHub - edkolev/evil-lion: Evil align operator]]
#+BEGIN_SRC emacs-lisp
(use-package evil-lion
  :ensure t
  :config
  (evil-lion-mode))
#+END_SRC

#+RESULTS:
: t
