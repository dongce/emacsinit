# -*- coding: utf-8; -*-


* top level 
** header
   #+BEGIN_SRC emacs-lisp
; -*- coding: utf-8; -*-
   #+END_SRC
** smerge
   #+BEGIN_SRC emacs-lisp

 (require 'smerge-mode)
   #+END_SRC 
** leader
   #+BEGIN_SRC emacs-lisp

     ;; http://d.hatena.ne.jp/tarao/20130304/evil_config



     (defun evil-replace-word-selection()
       (interactive)
       (if (use-region-p)
           (let (
                 (selection (buffer-substring-no-properties (region-beginning) (region-end))))
             (if (= (length selection) 0)
                 (message "empty string")
               (evil-ex (concat "'<,'>s/" selection "/"))
               ))
         (evil-ex (concat "%s/" (thing-at-point 'word) "/"))))

     (evil-ex-define-cmd "[sc]ratch" #'tmpscratch)

     (spacemacs/set-leader-keys 
       ;;left;; "j"   
       ;;left;; "J"
       "<tab>" #'back-to-indentation
       "<backspace>" #'twin
       "%" 'evil-virep-replace-regexp
       ;;"f" 'find-file
       "ak" 'kproc
       "yi" 'yankpad-insert
       "ye" 'yankpad-edit
       "ym" 'yankpad-map
       "yc" 'yankpad-set-category
       "bi" 'ido-switch-buffer-other-frame
       "ba" 'ivy-push-view
       "bA" 'ivy-pop-view
       "bb" 'ivy-switch-buffer-other-window
       "bB" 'ivy-switch-buffer
       "b[" 'evil-prev-buffer
       "bk" 'kill-this-buffer
       "b]" 'evil-next-buffer
       "bn" 'narrow-to-region
       "bN" 'narrow-to-defun
       "bw" 'widen
       "bs" 'save-buffer
       "bS" 'save-some-buffers
       ;; "bm" 'smartwin-switch-buffer
       "bm" 'boomark-set
       "bj" 'boomark-jump
       "bM"      'bookmark-bmenu-list
       "bl"      'xah-open-last-closed
       "bf"      'prelude-copy-file-name-to-clipboard
       "bh"      'mark-whole-buffer
       "br"      'revert-buffer
       "bc"      'xah-close-current-buffer
       ;;"j" 'save-buffer
       ;; "i" 'ibuffer
       ;; "j" 'tmpscratch
       "<home>" 'ibuffer
       "<end>" 'tmpscratch

       "<prior>" 'beginning-of-defun
       "<next>" 'end-of-defun

       "," 'smex
       "." 'embrace-commander
       "/" 'evil-replace-word-selection

       ;; search
       ;;"os"  search-map ;;'save-buffer
       ;;"ost" 'sr-speedbar-toggle              ;
       "osL" 'loccur
       "oso" 'occur
       "osn" 'smartscan-symbol-go-forward
       "osp" 'smartscan-symbol-go-backward
       "osc" 'xah-lookup-cppreference
       "os." 'gtags-find-tag
       "os," 'gtags-pop-stack
       "os_" 'isearch-forward-symbol
       "os-" 'isearch-forward-at-point
       ;;"oss" 'isearch-forward
       "osm" 'grep-word
       "ost" 'xah-find-text
       "osT" 'xah-find-text-regex

       ;; smerge
       "S" smerge-basic-map

       ;;"u" #'wgrep
       "u" 'ido-choose-from-recentf ;;'string-rectangle ;;'recentf-open-most-recent-file
       "U" 'helm-choose-from-recentf ;;'string-rectangle ;;'recentf-open-most-recent-file
       ";" 'evilnc-comment-or-uncomment-lines
       ;; "l" 'evilnc-comment-or-uncomment-to-the-line
       ;; "l" paredit-mode-map

       ;;TODO;;("("         paredit-open-round
       ;;TODO;;(")"         paredit-close-round
       ;;TODO;;("M-)"       paredit-close-round-and-newline
       ;;TODO;;("["         paredit-open-square
       ;;TODO;;("]"         paredit-close-square
       ;;TODO;;("\""        paredit-doublequote
       ;;TODO;;("M-\""      paredit-meta-doublequote
       ;;TODO;;("\\"        paredit-backslash
       ;;TODO;;(";"         paredit-semicolon
      ;;spacepacs-deprecated;;"l;"       #'paredit-comment-dwim
      ;;spacepacs-deprecated;;;;TODO;;("C-j"       paredit-newline
      ;;spacepacs-deprecated;;;;TODO;;;; "Deleting & Killing"
      ;;spacepacs-deprecated;;"lk"       #'paredit-kill
      ;;spacepacs-deprecated;;;;TODO;;("M-d"       paredit-forward-kill-word
      ;;spacepacs-deprecated;;;;TODO;;;; "Movement & Navigation"
      ;;spacepacs-deprecated;;;;TODO;;("C-M-f"     paredit-forward
      ;;spacepacs-deprecated;;;;TODO;;("C-M-b"     paredit-backward
      ;;spacepacs-deprecated;;"lu"     #'paredit-backward-up
      ;;spacepacs-deprecated;;"ln"     #'paredit-forward-up     
      ;;spacepacs-deprecated;;"ld"     #'paredit-forward-down
      ;;spacepacs-deprecated;;"lp"     #'paredit-backward-down  
       ;;TODO;;"Depth-Changing Commands"
       ;;TODO;;(("M-<up>" "ESC <up>")
       ;;TODO;;(("M-<down>" "ESC <down>")
       ;;TODO;;("M-r"       paredit-raise-sexp
       ;;TODO;;("M-?"       paredit-convolute-sexp
       ;;TODO;;;; "Barfage & Slurpage"
       ;;TODO;;(("C-)" "C-<right>") paredit-forward-slurp-sexp
       ;;TODO;;(("C-}" "C-<left>") paredit-forward-barf-sexp
       ;;TODO;;(("C-(" "C-M-<left>" "ESC C-<left>") paredit-backward-slurp-sexp
       ;;TODO;;(("C-{" "C-M-<right>" "ESC C-<right>") paredit-backward-barf-sexp
       ;;TODO;;;; "Miscellaneous Commands"
       ;;TODO;;("M-S"       paredit-split-sexp
       ;;TODO;;("M-J"       paredit-join-sexps
       ;;TODO;;("C-c C-M-l" paredit-recenter-on-sexp)
       ;;TODO;;("M-q"       paredit-reindent-defun)
       "cw" #'wcopy ;;deprecated;;'evilnc-copy-and-comment-lines
       "cx" #'crux-open-with
       "cO" #'crux-smart-open-line-above
       "co" #'crux-smart-open-line
       "cs" #'crux-cleanup-buffer-or-region
       "cr" #'crux-recentf-ido-find-file
       "cv" #'crux-view-url
       "ce" #'crux-eval-and-replace
       "ct" #'crux-transpose-windows
       "cD" #'crux-delete-file-and-buffer
       "cl" #'crux-duplicate-current-line-or-region
       "cL" #'crux-duplicate-and-comment-current-line-or-region
       "cR" #'crux-rename-file-and-buffer
       "cn" #'crux-visit-term-buffer
       "c1" #'crux-kill-other-buffers
       "ci" #'crux-indent-defun
       "cI" #'crux-indent-rigidly-and-copy-to-clipboard
       "c." #'crux-find-user-init-file
       "cs" #'crux-find-shell-init-file
       "cj" #'crux-top-join-lines
       "ck" #'crux-kill-whole-line
       "cK" #'crux-kill-line-backwards
       "ca" #'crux-ispell-word-then-abbrev




       "O" 'win-switch-next-window
       ;; "O" (lambda (multi) (interactive "P") (if multi  (call-interactively 'multi-occur-in-this-mode) (call-interactively 'occur))  (other-window 1)) 
       "]" 'exit-recursive-edit
       "v" 'evil-scroll-down
       "V" 'evil-scroll-up
       ;;ctrl-r problem on terminal "r" better-registers-r-map ;;better-registers-map
       ;; "gg" 'keyboard-quit
       ;; "g," 'grep-o-matic-visited-files
       ;; "g." 'grep-o-matic-repository
       ;; "g/" 'grep-o-matic-current-directory

       ;; "g[" 'beginning-of-buffer
       ;; "g]" 'end-of-buffer
       ;; "gl" 'goto-line
       "G" 'keyboard-quit
       ;; "gl" 'goto-line
       "ee" 'eval-last-sexp
       "E"  mu4e-main-mode-map
       "Eu" 'mu4e-update-mail-and-index
       ;; "t" 'ido-choose-from-recentf ;;'string-rectangle ;;'recentf-open-most-recent-file
       ;; "T" 'helm-choose-from-recentf ;;'string-rectangle ;;'recentf-open-most-recent-file
       ;;"n" 'purpose-load-window-layout ;;deprecated by spacemacs 
       ;;"r" 'ido-choose-from-recentf ;;'string-rectangle ;;'recentf-open-most-recent-file
       ;; "R" ctl-x-r-map ;;'ido-choose-from-recentf
       ;;"R" 'helm-choose-from-recentf ;;'string-rectangle ;;'recentf-open-most-recent-file


       ;; window
       "W" 'read-only-mode
       "ww" 'read-only-mode
       "wk" 'win-switch-up
       "wj" 'win-switch-down
       "wh" 'win-switch-left
       "wl" 'win-switch-right
       "w1" 'delete-other-windows
       "w2" 'split-window-below
       "w3" 'split-window-right
       "w0" 'delete-window
       "wo" 'win-switch-dispatch
       "wd" 'delete-blank-lines
       "ws" 'resize-window
       "wj"      'winner-undo
       "wk"      'winner-redo

       "as" 'twin
       "aw" 'winexe
       "+" #'evil-numbers/inc-at-pt
       "-" #'evil-numbers/dec-at-pt
       "M" #'pop-to-mark-command ;;'evil-scroll-down
       "m" #'er/expand-region ;;#'extend-selection
       "S-m" #'mark-line ;;#'extend-selection
       ;; "m" #'backward-sexp
       ;; "." #'forward-sexp
       "<" #'loccur
       "0" #'delete-window
       "1" #'delete-other-windows
       "2" #'split-window-below
       "3" #'split-window-right
       "(" #'kmacro-start-macro
       ")" #'kmacro-end-macro
       ;;"x" ctl-x-map ;;projectile-mode-map
       "xx"  #'kmacro-end-and-call-macro
       "xi"  #'string-inflection-all-cycle
       "d" 'dired
       "D" #'toggle-current-window-dedication
       "kb" 'kill-buffer
       ;; projectile -----------------------------------------------------------------
       "op"  (cdar (cddr  (cadr  projectile-mode-map)))
       "opw"  'purpose-load-window-layout
       "opW"  'purpose-save-window-layout
       "opE"  'project-explorer-open
       "opC"  'project-explorer-close
       "op/"  'projectile-grep
       ;;deprecated;; "pb" 'projectile-switch-to-buffer
       ;;deprecated;; "pC" 'projectile-invalidate-cache
       ;;deprecated;; "pd" 'projectile-dired
       ;;deprecated;; "pf" 'helm-projectile
       ;;deprecated;; "pF" 'projectile-find-file
       ;;deprecated;; "pk" 'projectile-kill-buffers
       ;;deprecated;; "pg" 'projectile-grep
       ;;deprecated;; "po" 'projectile-multi-occur
       ;;deprecated;; "pr" 'projectile-replace 
       ;; "<SPC>" (lambda () (interactive) (evil-change-state 'insert) (set-mark (point)))
       "<SPC>" #'smex

       ;; helm
       ;; "h" #'smex ;; "h" help-map
       ;; "h" help-map
       "ohz" 'zeal-at-point
       "ohh"      'helm-mini
       "oha"      'helm-apropos
       "ohB"      'helm-buffers-list
       "ohb"      'helm-descbindings
       "ohy"      'helm-show-kill-ring
       "ohx"      'helm-M-x
       "oho"     'helm-occur
       "ohs"     'helm-swoop
       "ohy"     'helm-yas-complete
       "ohY"     'helm-yas-create-snippet-on-region
       ;; "hcb"     'my/helm-do-grep-book-notes
       "ohr" 'helm-all-mark-rings
       "ohm" 'helm-smex
       "ohM" 'helm-smex-major-mode-commands

       ;; org
       "om" 'orgmail
       "oS" 'tmpscratch
       "oI" 'ibuffer
       "ox" 'winexe
       "or" 'org-capture
       "oa" 'org-agenda
       "ol" 'org-store-link
       "oc" 'org-cliplink
       )









     ;;;* _ EVIL ORG setting 
     ;;;** 참고 - https://github.com/cofi/dotfiles/blob/master/emacs.d/config/cofi-evil.el#L149





   #+END_SRC

   #+RESULTS:

** evil mode line 
   #+BEGIN_SRC emacs-lisp :tangle no
     (if (eq window-system nil)
         (use-package powerline-evil
           :config
           (defpowerline powerline-lcl current-input-method-title)

           (setq-default 
            mode-line-format
            '("%e"
              (:eval
               (let* ((active (powerline-selected-window-active))
                      (mode-line (if active 'mode-line 'mode-line-inactive))
                      (face1 (if active 'powerline-active1 'powerline-inactive1))
                      (face2 (if active 'powerline-active2 'powerline-inactive2))
                      (separator-left (intern (format "powerline-%s-%s"
                                                      powerline-default-separator
                                                      (car powerline-default-separator-dir))))
                      (separator-right (intern (format "powerline-%s-%s"
                                                       powerline-default-separator
                                                       (cdr powerline-default-separator-dir))))
                      (lhs (list 
                            (powerline-lcl mode-line)
                            ;; (powerline-raw "≡ " mode-line) 
                            (powerline-raw "『" mode-line) 
                            (powerline-raw  (window-numbering-get-number-string))
                            (powerline-raw "』" mode-line) 

                            (let ((evil-face (powerline-evil-face)))
                              (if evil-mode
                                  (powerline-raw (powerline-evil-tag) evil-face)))
                            (when (buffer-modified-p) (powerline-raw "[+]" mode-line))
                            (when buffer-read-only (powerline-raw "[RO]" mode-line))
                            (powerline-buffer-id `(mode-line-buffer-id ,mode-line) 'l)
                            (powerline-raw "[" mode-line 'l)
                            (powerline-major-mode mode-line)
                            (powerline-process mode-line)
                            (powerline-raw "]" mode-line)
                            (powerline-raw "[%z]" mode-line)
                            ;; (powerline-raw (concat "[" (mode-line-eol-desc) "]") mode-line)
                            (when (boundp 'erc-modified-channels-object)
                              (powerline-raw erc-modified-channels-object face1 'l))
                            ;; (powerline-raw "[" mode-line 'l)
                            ;; (powerline-minor-modes mode-line)
                            ;; (powerline-raw "%n" mode-line)
                            ;; (powerline-raw "]" mode-line)
                            (when (and vc-mode buffer-file-name)
                              (let ((backend (vc-backend buffer-file-name)))
                                (when backend
                                  (concat (powerline-raw "[" mode-line 'l)
                                          (powerline-raw (format "%s / %s" backend (vc-working-revision buffer-file-name backend)))
                                          (powerline-raw "]" mode-line)))))))
                      (rhs (list (powerline-raw '(10 "%i"))
                                 (powerline-raw global-mode-string mode-line 'r)
                                 (powerline-raw "%l," mode-line 'l)
                                 (powerline-raw (format-mode-line '(10 "%c")))
                                 (powerline-raw (replace-regexp-in-string  "%" "%%" (format-mode-line '(-3 "%p"))) mode-line 'r)
                                 (when (and (boundp 'which-func-mode) which-func-mode) (powerline-raw which-func-format nil 'l))
                                 )))
                 (concat (powerline-render lhs)
                         (powerline-fill mode-line (powerline-width rhs))
                         (powerline-render rhs))))))))
     (use-package evil-mode-line)

   #+END_SRC

** evil default override 


   #+BEGIN_SRC emacs-lisp
  ;;deprecated;;(evilnc-default-hotkeys)

  ;;deprecated;;(global-set-key (kbd "C-x r t") 'inline-string-rectangle)
  (evil-set-toggle-key "<pause>")
  (define-key evil-normal-state-map "U" 'undo-tree-redo)
  (define-key evil-normal-state-map [escape] 'keyboard-quit)
  (define-key evil-visual-state-map [escape] 'keyboard-quit)
  (define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)
  ;; (define-key minibuffer-local-isearch-map [escape] 'keyboard-quit)
  ;;(define-key minibuffer-local-isearch-map [?\S- ] 'toggle-korean-input-method)




  ;;deprecated;;(global-set-key [M-return] 'smex)
  (define-key evil-normal-state-map (kbd "C-c +") #'evil-numbers/inc-at-pt)
  (define-key evil-normal-state-map (kbd "C-c -") #'evil-numbers/dec-at-pt)
  (define-key evil-normal-state-map "zx" 'smex)


  (define-key evil-normal-state-map "\C-a" 'evil-beginning-of-line)
  (define-key evil-insert-state-map "\C-a" 'beginning-of-line)
  (define-key evil-visual-state-map "\C-a" 'evil-beginning-of-line)


  (define-key evil-normal-state-map "\C-e" 'evil-end-of-line)
  (define-key evil-insert-state-map "\C-e" 'end-of-line)
  (define-key evil-visual-state-map "\C-e" 'evil-end-of-line)
  (define-key evil-normal-state-map "\C-f" 'evil-forward-char)
  (define-key evil-insert-state-map "\C-f" 'evil-forward-char)
  (define-key evil-insert-state-map "\C-f" 'evil-forward-char)
  (define-key evil-normal-state-map "\C-b" 'evil-backward-char)
  (define-key evil-insert-state-map "\C-b" 'evil-backward-char)
  (define-key evil-visual-state-map "\C-b" 'evil-backward-char)
  (define-key evil-normal-state-map "\C-d" 'evil-delete-char)
  (define-key evil-insert-state-map "\C-d" 'evil-delete-char)
  (define-key evil-visual-state-map "\C-d" 'evil-delete-char)
  (define-key evil-normal-state-map "\C-n" 'evil-next-line)
  (define-key evil-insert-state-map "\C-n" 'evil-next-line)
  (define-key evil-visual-state-map "\C-n" 'evil-next-line)
  (define-key evil-normal-state-map "\C-p" 'evil-previous-line)
  (define-key evil-insert-state-map "\C-p" 'evil-previous-line)
  (define-key evil-visual-state-map "\C-p" 'evil-previous-line)
  ;; (define-key evil-normal-state-map "\C-w" 'phi-rectangle-kill-region)
  ;; (define-key evil-insert-state-map "\C-w" 'phi-rectangle-kill-region)
  ;; (define-key evil-visual-state-map "\C-w" 'phi-rectangle-kill-region)
  (define-key evil-normal-state-map "\C-w" 'kill-region-dwim)
  (define-key evil-insert-state-map "\C-w" 'kill-region-dwim)
  (define-key evil-visual-state-map "\C-w" 'kill-region-dwim)
  (define-key evil-normal-state-map "\C-y" 'yank)
  (define-key evil-insert-state-map "\C-y" 'yank)
  (define-key evil-visual-state-map "\C-y" 'yank)
  (define-key evil-normal-state-map "\C-k" 'kill-line)
  (define-key evil-insert-state-map "\C-k" 'kill-line)
  (define-key evil-visual-state-map "\C-k" 'kill-line)
  (define-key evil-normal-state-map "Q" 'call-last-kbd-macro)
  (define-key evil-visual-state-map "Q" 'call-last-kbd-macro)

  ;;; http://leavinsprogramming.blogspot.kr/2012/05/evil-emacs-mode-for-vivim-users.html
  (defun evil-undefine ()
    (interactive)
    (let (evil-mode-map-alist)
      (call-interactively (key-binding (this-command-keys)))))
  (define-key evil-normal-state-map (kbd "TAB") 'evil-undefine)
  (define-key evil-motion-state-map "\C-]" 'find-tag-dwim)


  (define-key evil-normal-state-map "gl" 'goto-line)
  (define-key evil-normal-state-map "g[" 'beginning-of-buffer)
  (define-key evil-normal-state-map "g]" 'end-of-buffer      )
  (define-key evil-normal-state-map "g{" 'beginning-of-defun)
  (define-key evil-normal-state-map "g}" 'end-of-defun      )
  (define-key evil-normal-state-map "gg" 'revert-buffer)



  (define-key evil-visual-state-map "gl" 'goto-line)
  (define-key evil-visual-state-map "g[" 'beginning-of-buffer)
  (define-key evil-visual-state-map "g]" 'end-of-buffer      )
  (define-key evil-visual-state-map "g{" 'beginning-of-defun)
  (define-key evil-visual-state-map "g}" 'end-of-defun      )
  (define-key evil-visual-state-map "gg" 'revert-buffer)


  (define-key evil-normal-state-map "zf" 'vimish-fold-dwim) 
  ;; (define-key evil-visual-state-map "zf" 'vimish-fold) 
  (define-key evil-normal-state-map "zd" 'vimish-fold-delete) 
  (define-key evil-normal-state-map "zs" 'vimish-fold-next-fold) 
  (define-key evil-normal-state-map "zw" 'vimish-fold-previous-fold)

  (define-key evil-normal-state-map "zF" 'hs-toggle-hiding)


  ;; (define-key evil-motion-state-map "[[" 'backward-sexp)
  ;; (define-key evil-motion-state-map "]]" 'forward-sexp)

  (define-key evil-normal-state-map (kbd "C-c :" ) 'ac-complete-with-helm)
  (define-key evil-insert-state-map (kbd "C-c :" ) 'ac-complete-with-helm)

  (define-key evil-motion-state-map [down-mouse-1] 'mouse-drag-region)

   #+END_SRC

** kp map
   #+BEGIN_SRC emacs-lisp
  ;; kp-map 
  (define-key evil-normal-state-map [kp-0] 'helm-smex)
  (define-key evil-normal-state-map [kp-1] 'select-window-1)
  (define-key evil-normal-state-map [kp-2] 'select-window-2)
  (define-key evil-normal-state-map [kp-3] 'select-window-3)
  (define-key evil-normal-state-map [kp-4] 'evil-prev-buffer)
  (define-key evil-normal-state-map [kp-5] 'helm-mini)
  (define-key evil-normal-state-map [kp-6] 'evil-next-buffer)
  (define-key evil-normal-state-map [kp-8] 'split-window-below)
  (define-key evil-normal-state-map [kp-add] 'evil-yank)
  (define-key evil-normal-state-map [kp-enter] 'evil-paste-after)
  (define-key evil-normal-state-map [kp-decimal] 'winexe)
  (define-key evil-normal-state-map [kp-divide] 'twin)
  (define-key evil-normal-state-map [kp-subtract] 'recenter-top-bottom)
  (define-key evil-normal-state-map [kp-7] 'copy-to-register-1)
  (define-key evil-normal-state-map [kp-9] 'paste-from-register-1)

  (define-key evil-visual-state-map [kp-0] 'helm-smex)
  (define-key evil-visual-state-map [kp-1] 'select-window-1)
  (define-key evil-visual-state-map [kp-2] 'select-window-2)
  (define-key evil-visual-state-map [kp-3] 'select-window-3)
  (define-key evil-visual-state-map [kp-4] 'evil-prev-buffer)
  (define-key evil-visual-state-map [kp-5] 'helm-mini)
  (define-key evil-visual-state-map [kp-6] 'evil-next-buffer)
  (define-key evil-visual-state-map [kp-add] 'evil-yank)
  (define-key evil-visual-state-map [kp-enter] 'evil-paste-after)
  (define-key evil-visual-state-map [kp-decimal] 'winexe)
  (define-key evil-visual-state-map [kp-divide] 'twin)
  (define-key evil-visual-state-map [kp-8] 'split-window-below)
  (define-key evil-visual-state-map [kp-subtract] 'recenter-top-bottom)
  (define-key evil-visual-state-map [kp-7] 'copy-to-register-1)
  (define-key evil-visual-state-map [kp-9] 'paste-from-register-1)


   #+END_SRC

** evil surround
   #+BEGIN_SRC emacs-lisp
  (use-package evil-surround
    :config
    (evil-define-key 'visual evil-surround-mode-map "s" 'evil-surround-region)
    (global-evil-surround-mode 1))

  (use-package evil-embrace
    :config
    (add-hook 'org-mode-hook 'embrace-org-mode-hook)
    (evil-embrace-enable-evil-surround-integration))

   #+END_SRC
** use other window
   #+BEGIN_SRC emacs-lisp
  (use-package owdriver
    :config
    (owdriver-define-command scroll-up               t)
    (owdriver-define-command scroll-down             t)
    (owdriver-define-command move-beginning-of-line  t)
    (owdriver-define-command move-end-of-line        t)
    (owdriver-define-command beginning-of-buffer     t)
    (owdriver-define-command end-of-buffer           t)
    (owdriver-define-command isearch-forward         t (isearch-forward))
    (owdriver-define-command isearch-backward        t (isearch-backward))
    (owdriver-define-command set-mark-command        t)

    (evil-leader/set-key 

      "`o" #'owdriver-next-window
      "`k" #'owdriver-do-scroll-up
      "`j" #'owdriver-do-scroll-down
      "`s" #'owdriver-do-isearch-forward
      "`r" #'owdriver-do-isearch-backward
      "`<" #'owdriver-do-beginning-of-buffer
      "`>" #'owdriver-do-end-of-buffer))

   #+END_SRC

** search override                                               :DEPRECATED:

   #+BEGIN_SRC emacs-lisp
;;;* vim keys -  http://www.tuxfiles.org/linuxhelp/vimcheat.html  

;; http://stackoverflow.com/questions/11052678/emacs-combine-iseach-forward-and-recenter-top-bottom
;; http://stackoverflow.com/questions/11052678/emacs-combine-iseach-forward-and-recenter-top-bottom

;; / 한글 
;; (defvar evil-search-norm-state nil)
;; (make-variable-buffer-local 'evil-search-norm-state)

;; (defadvice
;;     evil-search-forward
;;     (before evil-search-insert-state activate)
;;     (if (evil-normal-state-p) (progn (setq evil-search-norm-state t) (evil-insert-state))))

;; (defadvice
;;     evil-search-forward
;;     (after evil-search-normal-state activate)
;;     (if evil-search-norm-state  (evil-normal-state))
;;     (setf evil-search-norm-state nil))
;; (ad-activate 'evil-search-forward)


;;deprecated;;(defun evil-search-incrementally (forward regexp-p)
;;deprecated;;  "Search incrementally for user-entered text."
;;deprecated;;  (let ((evil-search-prompt (evil-search-prompt forward))
;;deprecated;;        (isearch-search-fun-function 'evil-isearch-function)
;;deprecated;;        (point (point))
;;deprecated;;        isearch-success search-nonincremental-instead)
;;deprecated;;    (setq isearch-forward forward)
;;deprecated;;    (evil-save-echo-area
;;deprecated;;      ;; set the input method locally rather than globally to ensure that
;;deprecated;;      ;; isearch clears the input method when it's finished
;;deprecated;;      (evil-insert-state)
;;deprecated;;      (if forward
;;deprecated;;          (isearch-forward regexp-p)
;;deprecated;;        (isearch-backward regexp-p))
;;deprecated;;      (evil-normal-state)
;;deprecated;;      (if (not isearch-success)
;;deprecated;;          (goto-char point)
;;deprecated;;        ;; always position point at the beginning of the match
;;deprecated;;        (when (and forward isearch-other-end)
;;deprecated;;          (goto-char isearch-other-end))
;;deprecated;;        (when (and (eq point (point))
;;deprecated;;                   (not (string= isearch-string "")))
;;deprecated;;          (if forward
;;deprecated;;              (isearch-repeat-forward)
;;deprecated;;            (isearch-repeat-backward))
;;deprecated;;          (isearch-exit)
;;deprecated;;          (when (and forward isearch-other-end)
;;deprecated;;            (goto-char isearch-other-end)))
;;deprecated;;        (evil-flash-search-pattern
;;deprecated;;         (evil-search-message isearch-string forward))))))

;;deprecated;;(evil-define-motion evil-search-forward ()
;;deprecated;;  (format "Search forward for user-entered text.
;;deprecated;;Searches for regular expression if `evil-regexp-search' is t.%s"
;;deprecated;;          (if (and (fboundp 'isearch-forward)
;;deprecated;;                   (documentation 'isearch-forward))
;;deprecated;;              (format "\n\nBelow is the documentation string \
;;deprecated;;for `isearch-forward',\nwhich lists available keys:\n\n%s"
;;deprecated;;                      (documentation 'isearch-forward)) ""))
;;deprecated;;  :jump t
;;deprecated;;  :type exclusive
;;deprecated;;  :repeat evil-repeat-search
;;deprecated;;    (progn                 ;MADE CHANGES HERE
;;deprecated;;      (evil-insert-state)
;;deprecated;;      (evil-search-incrementally t evil-regexp-search)
;;deprecated;;      (evil-normal-state)
;;deprecated;;    ))
;;deprecated;;
;;deprecated;;(evil-define-motion evil-search-backward ()
;;deprecated;;  (format "Search forward for user-entered text.
;;deprecated;;Searches for regular expression if `evil-regexp-search' is t.%s"
;;deprecated;;          (if (and (fboundp 'isearch-forward)
;;deprecated;;                   (documentation 'isearch-forward))
;;deprecated;;              (format "\n\nBelow is the documentation string \
;;deprecated;;for `isearch-forward',\nwhich lists available keys:\n\n%s"
;;deprecated;;                      (documentation 'isearch-forward)) ""))
;;deprecated;;  :jump t
;;deprecated;;  :type exclusive
;;deprecated;;  :repeat evil-repeat-search
;;deprecated;;    (progn                 ;MADE CHANGES HERE
;;deprecated;;      (evil-insert-state)
;;deprecated;;      (evil-search-incrementally nil evil-regexp-search)
;;deprecated;;      (evil-normal-state)
;;deprecated;;    ))

   #+END_SRC

** auto complete

   #+BEGIN_SRC emacs-lisp
;;; Auto-complete
(use-package auto-complete
  :config
  (evil-add-command-properties 'ac-complete :repeat 'evil-ac-repeat)
  (evil-add-command-properties 'ac-expand :repeat 'evil-ac-repeat)
  (evil-add-command-properties 'ac-next :repeat 'ignore)
  (evil-add-command-properties 'ac-previous :repeat 'ignore)

  (defvar evil-ac-prefix-len nil
    "The length of the prefix of the current item to be completed.")

  (defun evil-ac-repeat (flag)
    "Record the changes for auto-completion."
    (cond
     ((eq flag 'pre)
      (setq evil-ac-prefix-len (length ac-prefix))
      (evil-repeat-start-record-changes))
     ((eq flag 'post)
      ;; Add change to remove the prefix
      (evil-repeat-record-change (- evil-ac-prefix-len)
                                 ""
                                 evil-ac-prefix-len)
      ;; Add change to insert the full completed text
      (evil-repeat-record-change
       (- evil-ac-prefix-len)
       (buffer-substring-no-properties (- evil-repeat-pos
                                          evil-ac-prefix-len)
                                       (point))
       0)
      ;; Finish repeation
      (evil-repeat-finish-record-changes)))))

   #+END_SRC

** evil extra operator
   #+BEGIN_SRC emacs-lisp
;; https://github.com/redguardtoo/evil-matchit/blob/master/README.org
(use-package evil-matchit
  :config
  (global-evil-matchit-mode 1 )
  (plist-put evilmi-plugins 'xah-html-mode '((evilmi-html-get-tag evilmi-html-jump)))
  (plist-put evilmi-plugins 'web-mode '((evilmi-html-get-tag evilmi-html-jump))))


(use-package evil-args
  :config
  ;; bind evil-args text objects
  (define-key evil-inner-text-objects-map "a" 'evil-inner-arg)
  (define-key evil-outer-text-objects-map "a" 'evil-outer-arg)

  ;; bind evil-forward/backward-args
  (define-key evil-normal-state-map "L" 'evil-forward-arg)
  (define-key evil-normal-state-map "H" 'evil-backward-arg)
  (define-key evil-motion-state-map "L" 'evil-forward-arg)
  (define-key evil-motion-state-map "H" 'evil-backward-arg)

  ;; bind evil-jump-out-args
  (define-key evil-normal-state-map "K" 'evil-jump-out-args))

(use-package evil-extra-operator
  :config
  (global-evil-extra-operator-mode 1)
  )


(use-package evil-visualstar
  :config
  (global-evil-visualstar-mode t))


   #+END_SRC

** mode specific 
*** ibuffer
    #+BEGIN_SRC emacs-lisp
 ;; https://github.com/emacsmirror/evil/blob/master/evil-integration.el
 ;; Ibuffer
 (define-key ibuffer-mode-map (kbd  "<SPC>") nil)
 (progn
   (evil-make-overriding-map ibuffer-mode-map 'normal t)
   (evil-define-key 'normal ibuffer-mode-map
     "j" 'evil-next-line
     "k" 'evil-previous-line
     "RET" 'ibuffer-visit-buffer))
    #+END_SRC
*** w related mode 

    #+BEGIN_SRC emacs-lisp
  (progn
    (add-hook 'wdired-mode-hook #'evil-change-to-initial-state)
    (defadvice wdired-change-to-dired-mode (after evil activate)
      (evil-change-to-initial-state nil t)))



  ;; https://github.com/glynnforrest/emacs.d/blob/master/setup-occur-grep-ack.el

  (defun get-buffers-matching-mode (mode)
    "Returns a list of buffers where their major-mode is equal to MODE"
    (let ((buffer-mode-matches '()))
      (dolist (buf (buffer-list))
        (with-current-buffer buf
          (if (eq mode major-mode)
              (add-to-list 'buffer-mode-matches buf))))
      buffer-mode-matches))

  (defun multi-occur-in-this-mode ()
    "Show all lines matching REGEXP in buffers with this major mode."
    (interactive)
    (multi-occur
     (get-buffers-matching-mode major-mode)
     (car (occur-read-primary-args))))

  (defun occur-goto-occurrence-recenter ()
    "Go to the occurrence on the current line and recenter."
    (interactive)
    (occur-mode-goto-occurrence)
    (recenter))

  ;; Preview occurrences in occur without leaving the buffer
  (defun occur-display-occurrence-recenter ()
    "Display the occurrence on the current line in another window and recenter."
    (interactive)
    (occur-goto-occurrence-recenter)
    (other-window 1))


  ;; Grep mode
  (defun grep-goto-occurrence-recenter ()
    "Go to the occurrence on the current line and recenter."
    (interactive)
    (compile-goto-error)
    (recenter))

  (defun grep-display-occurrence-recenter ()
    "Display the grep result of the current line in another window and recenter."
    (interactive)
    (grep-goto-occurrence-recenter)
    (other-window 1))


  (use-package wgrep
    :config

    (w32-unix-eval
     ((evil-declare-key 'motion occur-mode-map (kbd "<return>")   'occur-goto-occurrence-recenter)
      (evil-declare-key 'motion grep-mode-map (kbd "<return>") 'grep-goto-occurrence-recenter)
      (evil-declare-key 'motion occur-mode-map (kbd "<S-return>") 'occur-display-occurrence-recenter)
      (evil-declare-key 'motion grep-mode-map (kbd "<S-return>") 'grep-display-occurrence-recenter)
      (evil-declare-key 'motion ack-and-a-half-mode-map (kbd "<return>") 'grep-goto-occurrence-recenter)
      (evil-declare-key 'motion ack-and-a-half-mode-map (kbd "<S-return>") 'grep-display-occurrence-recenter))
     ((evil-declare-key 'motion occur-mode-map (kbd "RET")   'occur-goto-occurrence-recenter)
      (evil-declare-key 'motion grep-mode-map (kbd "RET") 'grep-goto-occurrence-recenter)
      (evil-declare-key 'motion occur-mode-map (kbd "<S-RET>") 'occur-display-occurrence-recenter)
      (evil-declare-key 'motion grep-mode-map (kbd "<S-RET>") 'grep-display-occurrence-recenter)
      (evil-declare-key 'motion ack-and-a-half-mode-map (kbd "RET") 'grep-goto-occurrence-recenter)
      (evil-declare-key 'motion ack-and-a-half-mode-map (kbd "<S-RET>") 'grep-display-occurrence-recenter)))

    (evil-declare-key 'motion occur-mode-map "e" 'occur-edit-mode)
    (evil-declare-key 'motion occur-edit-mode-map "e" 'occur-cease-edit)
    (evil-declare-key 'motion grep-mode-map "e" 'wgrep-change-to-wgrep-mode)
    (evil-declare-key 'motion grep-mode-map "w" 'wgrep-save-all-buffers)
    ;;notuse;;(evil-declare-key 'motion ack-and-a-half-mode-map ",e" 'wgrep-change-to-wgrep-mode)
    ;;notuse;;(evil-declare-key 'motion ack-and-a-half-mode-map ",w" 'wgrep-save-all-buffers)
    (evil-declare-key 'motion wgrep-mode-map "e" 'wgrep-finish-edit)
    (evil-declare-key 'motion wgrep-mode-map "x" 'wgrep-abort-changes))


    #+END_SRC

*** sexp

    #+BEGIN_SRC emacs-lisp
  ;;; https://github.com/laynor/emacs-conf/blob/master/site-lisp/evil-sexp/evil-sexp.el

  (defun beginning-and-end-of-sexp ()
    (destructuring-bind (b . e)
        (save-excursion
          (forward-char)
          (bounds-of-thing-at-point 'sexp))
      (cons b e)))

  (evil-define-motion evil-forward-sexp (count)
    :type inclusive
    (dotimes (i (or count 1))
      (let ((lookahead-1 (char-syntax (char-after (point))))
            (lookahead-2 (char-syntax (char-after (1+ (point)))))
            (new-point (point)))
        (condition-case nil
            (progn (save-excursion
                     (message "lookahead1 = %S, lookahead-2 = %S"
                              (string lookahead-1) (string lookahead-2))
                     (cond ((or (memq lookahead-2 '(?\ ?>))
                                (member lookahead-1 '(?\ ?>)))
                            (forward-char)
                            (skip-syntax-forward "->")
                            (setq new-point (point)))
                           (t (unless (memq lookahead-1 '(?\" ?\())
                                (forward-char))
                              (sp-forward-sexp)
                              (backward-char)
                              (setq new-point (point)))))
                   (goto-char new-point))
          (error (error "End of sexp"))))))

  (evil-define-motion evil-backward-sexp (count)
    :type inclusive
    (dotimes (i (or count 1))
      (let ((lookahead (char-syntax (char-after (point))))
            (new-point (point)))
        (condition-case nil
            (progn (save-excursion
                     (when (memq lookahead '(?\) ?\"))
                       (forward-char))
                     (sp-backward-sexp)
                     (setq new-point (point)))
                   (goto-char new-point))
          (error (error "Beginning of sexp"))))))

  (evil-define-motion evil-enter-sexp (count)
    :type inclusive
    (dotimes (i (or count 1))
      (let ((lookahead-1 (char-syntax (char-after (point))))
            (lookahead-2 (char-syntax (char-after (1+ (point)))))
            (lookbehind-1 (char-syntax (char-before (point))))
            (lookbehind-2 (char-syntax (char-before (1- (point))))))
        (cond ((and (= lookahead-1 ?\()
                    (/= lookbehind-1 ?\\)
                    (= (char-after (1+ (point))) ?\n))
               (forward-char)
               (skip-syntax-forward "-"))
              ((and (= lookahead-1 ?\()
                    (/= lookbehind-1 ?\\)
                    (/= lookahead-2 ?\)))
               ;; do not move the cursor if it's on the opening paren of ()
               (forward-char)
               (skip-syntax-forward "-"))
              ((and (= lookahead-1 ?\))
                    (or (/= lookbehind-1 ?\( )
                        (= lookbehind-2 ?\\)))
               ;; do not move the cursor if it's on the closing paren of ()
               (skip-syntax-backward "-")
               (backward-char))
              (t (error "Already at the deepest level"))))))



  ;; Does not work correctly when there are spaces after parens
  ;; does not work correctly when inside a string, check paredit.
  ;; check when there are spaces before parens
  ;; When the cursor is on an open paren, go up one level on an open paren
  (use-package paredit ;  (smartparens)
    :config
    (evil-define-motion evil-exit-sexp (count)
      :type inclusive
      (dotimes (i (or count 1))
        (let (op-pos cl-pos)
          (condition-case nil
              (progn (save-excursion
                       (sp-backward-up-sexp)
                       (setq op-pos (point))
                       (sp-forward-sexp)
                       (setq cl-pos (point)))
                     (let ((lookahead (char-syntax (char-after (point)))))
                       (case lookahead
                         (?\( (goto-char op-pos))
                         (?\) (goto-char cl-pos))
                         (otherwise (goto-char (if (> (abs (- (point) cl-pos))
                                                      (abs (- (point) op-pos)))
                                                   op-pos
                                                 cl-pos))))))
            (error (error "Already at top-level."))))) )

    ;; (provide 'evil-sexp)


    (define-key evil-motion-state-map (kbd "H-j") 'evil-enter-sexp)
    (define-key evil-motion-state-map (kbd "H-k") 'evil-exit-sexp)
    (define-key evil-motion-state-map (kbd "H-h") 'evil-backward-sexp)
    (define-key evil-motion-state-map (kbd "H-l") 'evil-forward-sexp)
    (define-key evil-motion-state-map (kbd "<C-H-up>")     'buf-move-up)
    (define-key evil-motion-state-map (kbd "<C-H-down>")   'buf-move-down)
    (define-key evil-motion-state-map (kbd "<C-H-left>")   'buf-move-left)
    (define-key evil-motion-state-map (kbd "<C-H-right>")  'buf-move-right)
    (define-key evil-motion-state-map "zl" 'evil-forward-sexp)
    (define-key evil-motion-state-map "zh" 'evil-backward-sexp)
    (define-key evil-motion-state-map "zj" 'evil-enter-sexp)
    (define-key evil-motion-state-map "zk" 'evil-exit-sexp))


  ;;; http://blog.binchen.org/?p=782
  (eval-after-load "evil" '(setq expand-region-contract-fast-key "z"))
  (evil-define-key 'normal paredit-mode-map "\C-k" 'paredit-kill)
  (evil-define-key 'visual paredit-mode-map "\C-k" 'paredit-kill)
  (evil-define-key 'insert paredit-mode-map "\C-k" 'paredit-kill)

    #+END_SRC
*** org 
    #+BEGIN_SRC emacs-lisp
  (defun org-show-current-heading-tidily ()
    (interactive)  ;Inteactive
    "Show next entry, keeping other entries closed."
    (if (save-excursion (end-of-line) (outline-invisible-p))
        (progn (org-show-entry) (show-children))
      (outline-back-to-heading)
      (unless (and (bolp) (org-on-heading-p))
        (org-up-heading-safe)
        (hide-subtree)
        (error "Boundary reached"))
      (org-overview)
      (org-reveal t)
      (org-show-entry)
      (show-children)))

  ;;; evil-org 

  (evil-define-key 'normal evil-org-mode-map
    "=" 'org-show-current-heading-tidily
    "<" 'org-shiftleft
    ">" 'org-shiftright
    )




  (evil-leader/set-key-for-mode 'org-mode
    "ha" 'helm-org-agenda-files-headings
    "hH" 'helm-org-headlines
    "A"  #'(lambda () (interactive) (switch-to-buffer "*Org Agenda*"))
    ;; "hh" 'helm-org-in-buffer-headings

    "u"    'outline-up-heading
    "q"    'org-todo
    "<down>"    'outline-next-visible-heading
    "<up>"    'outline-previous-visible-heading
    "<right>"    'org-forward-heading-same-level
    "<left>"    'org-backward-heading-same-level


    "or" 'org-capture
    "oa" 'org-agenda
    "os" 'org-store-link
    "ol" 'org-insert-alllink
    "oo" 'org-open-at-point-global
    "oR" 'org-refile
    "oc" 'org-cliplink
    "od" 'org-deadline
    "oh" 'org-schedule
    "ot" 'org-set-tags
    "oT" 'org-time-stamp
    "ov" 'org-attach-screenshot
    "ob" 'org-iswitchb
    "ow" 'org-archive-subtree-default
    "op" 'org-link-copy-image
    "of" 'org-link-copy-file
    "oe" 'org-set-effort
    "oi" 'org-clock-in
    "oI" 'org-clock-out
    "w" 'org-archive-subtree-default
    )


  (use-package org
    :config
    (evil-define-key 'normal org-mode-map
      (kbd "RET") 'org-open-at-point
      "za" 'org-cycle
      "zA" 'org-shifttab
      "zm" 'hide-body
      "zr" 'show-all
      "zo" 'show-subtree
      "zO" 'show-all
      "zc" 'hide-subtree
      "zC" 'hide-all


      "gn"    'outline-next-visible-heading
      "gp"    'outline-previous-visible-heading
      "gf"    'org-forward-heading-same-level
      "gb"    'org-backward-heading-same-level
      "gu"    'outline-up-heading
      "gt"    'org-goto
    
      "gj"    'outline-next-visible-heading
      "gk"    'outline-previous-visible-heading
      "gl"    'org-forward-heading-same-level
      "gh"    'org-backward-heading-same-level
    
      (kbd "<kp-multiply>") 'org-insert-star
      (kbd "M-j") 'org-shiftleft
      (kbd "M-k") 'org-shiftright
      (kbd "M-H") 'org-metaleft
      (kbd "M-J") 'org-metadown
      (kbd "M-K") 'org-metaup
      (kbd "M-L") 'org-metaright)

    (evil-define-key 'visual org-mode-map
      "gn"    'outline-next-visible-heading
      "gp"    'outline-previous-visible-heading
      "gf"    'org-forward-heading-same-level
      "gb"    'org-backward-heading-same-level
      "gu"    'outline-up-heading
      "gt"    'org-goto
    
      "gj"    'outline-next-visible-heading
      "gk"    'outline-previous-visible-heading
      "gl"    'org-forward-heading-same-level
      "gh"    'org-backward-heading-same-level
    
      )


    (evil-define-key 'normal orgstruct-mode-map
      (kbd "RET") 'org-open-at-point
      "za" 'org-cycle
      "zA" 'org-shifttab
      "zm" 'hide-body
      "zr" 'show-all
      "zo" 'show-subtree
      "zO" 'show-all
      "zc" 'hide-subtree
      "zC" 'hide-all
      (kbd "M-j") 'org-shiftleft
      (kbd "M-k") 'org-shiftright
      (kbd "M-H") 'org-metaleft
      (kbd "M-J") 'org-metadown
      (kbd "M-K") 'org-metaup
      (kbd "M-L") 'org-metaright)

    (evil-define-key 'insert org-mode-map
      (kbd "M-j") 'org-shiftleft
      (kbd "M-k") 'org-shiftright
      (kbd "M-H") 'org-metaleft
      (kbd "M-J") 'org-metadown
      (kbd "M-K") 'org-metaup
      (kbd "M-L") 'org-metaright)

    (evil-define-key 'insert orgstruct-mode-map
      (kbd "M-j") 'org-shiftleft
      (kbd "M-k") 'org-shiftright
      (kbd "M-H") 'org-metaleft
      (kbd "M-J") 'org-metadown
      (kbd "M-K") 'org-metaup
      (kbd "M-L") 'org-metaright)

    )



    #+END_SRC
*** mu4e
    #+BEGIN_SRC emacs-lisp
  (use-package evil-mu4e
    :config
    (mapcar 
     (lambda (x)
       (add-to-list 'evil-mu4e-mode-map-bindings `(normal mu4e-main-mode-map ,(car x) ,(cadr x ))))
     '(
       ("B"               mu4e-headers-search-bookmark-edit)
       ("s"               mu4e-headers-search)))
    (mapcar 
     (lambda (x)
       (add-to-list 'evil-mu4e-mode-map-bindings `(normal mu4e-view-mode-map ,(car x) ,(cadr x ))))
     '(("S" mu4e-view-save-attachment)
       ("o" mu4e-view-open-attachment)
       ("O" mu4e-view-open-attachment-emacs)
       ("B"               mu4e-headers-search-bookmark-edit)
       ("s"               mu4e-headers-search)
       ("x"             open-mu4e-view)
       ("@"             copy-mu4e-view)
       ("*"             bmkp-mu4e-view)
       ("<kp-multiply>" bmkp-mu4e-view)
       ("F"             find-file-mu4e)
       ("f"             mu4e-field-view)))
    (mapcar 
     (lambda (x)
       (add-to-list 'evil-mu4e-mode-map-bindings `(normal mu4e-headers-mode-map ,(car x) ,(cadr x ))))
     '(
       ("B"               mu4e-headers-search-bookmark-edit)
       ("s"               mu4e-headers-search)
       ("x"             open-mu4e-header)
       ("@"             copy-mu4e-header)
       ("*"             bmkp-mu4e-header)
       ("<kp-multiply>" bmkp-mu4e-header)
       ("F"             find-file-mu4e)
       ("f"             mu4e-field-header)))
    (evil-mu4e-init)
    (evil-define-key 'normal mu4e-headers-mode-map
      "?" mu4e-headers-mode-map)
    (evil-define-key 'normal mu4e-view-mode-map
      "?" mu4e-view-mode-map))

    #+END_SRC

*** dired                                                        :DEPRECATED:
    #+BEGIN_SRC emacs-lisp
;;  (use-package dired
;;    :config
;;;;; Dired
;;    (define-key dired-mode-map (kbd "SPC") nil)
;;    (define-key dired-mode-map (kbd "/") nil)
;;    (define-key dired-mode-map (kbd "n") nil)
;;    (define-key dired-mode-map (kbd "N") nil)
;;    
;;    ;; use the standard Dired bindings as a base
;;    (evil-make-overriding-map dired-mode-map 'normal t)
;;    (evil-add-hjkl-bindings dired-mode-map 'normal
;;      "J" 'dired-goto-file     ; "j"
;;      "K" 'dired-do-kill-lines ; "k"
;;      ;; "r" 'dired-do-redisplay  ; "l"
;;      "r" 'revert-buffer
;;      ;; "g" 'revert-buffer
;;      (kbd  "RET") 'diredp-find-file-reuse-dir-buffer
;;      ";" (lookup-key dired-mode-map ":")) ; ":d", ":v", ":s", ":e"
;;    (evil-define-key 'normal dired-mode-map "R" 'dired-do-rename)
;;    ;;evil-extra-operator;;(evil-define-key 'normal dired-mode-map "gg" 'revert-buffer)
;;    ;;evil-extra-operator;;(evil-declare-key 'normal dired-mode-map "g" 'revert-buffer)
;;    (define-key dired-mode-map ":;" 'dired-sort-menu-toggle-dirs-first))


    #+END_SRC
*** key combo

    #+BEGIN_SRC emacs-lisp
(use-package key-combo
  :config
  ;;   (global-key-combo-mode t)
  ;;   (key-combo-define evil-insert-state-map (kbd "=") '(" = " " == " "=" " === "))
  ;;   (key-combo-define evil-insert-state-map (kbd "+") '(" + " "+" " += " "++"))
  ;;   (key-combo-define evil-insert-state-map (kbd "-") '("-" " - " " -= " "--"))
  ;;   (key-combo-define evil-insert-state-map (kbd "*") '(" * " "*" " *= "))
  ;;   (key-combo-define evil-normal-state-map (kbd "/") 'key-combo-execute-orignal)
  ;;   (key-combo-define evil-insert-state-map (kbd "/") '("/" " / " " /= " "/* `!!' */" "//"))
  ;;   (key-combo-define evil-insert-state-map (kbd "%") '("%" " % " " %= "))
  ;;   (key-combo-define evil-insert-state-map (kbd "!") '("!" " != "))
  ;;   (key-combo-define evil-insert-state-map (kbd "&") '(" && " "&"))
  ;;   (key-combo-define evil-insert-state-map (kbd "|") '(" || " "|"))
  ;;   (key-combo-define evil-insert-state-map (kbd "?") '(" ? " "?"))
  ;;   (key-combo-define evil-insert-state-map (kbd ",") '(", " "," ",\n"))
  ;;   (key-combo-define evil-insert-state-map (kbd "{") '("{\n`!!'\n}" "{" "{`!!'}" "{}"))
  ;;   (key-combo-define evil-insert-state-map (kbd "(") '("(`!!')" "(" "()"))
  ;;   (key-combo-define evil-insert-state-map (kbd "[") '("[`!!']" "[" "[]"))
  ;;   (key-combo-define evil-insert-state-map (kbd "<")  '(" < " " <= " " < " " << " "<<" "<`!!'>"))
  ;;   (key-combo-define evil-insert-state-map (kbd ">")  '(" > " " >= " " > " " >> " ">>"))
  ;;   (key-combo-define evil-insert-state-map (kbd "\"") '("\"`!!'\""  "\""  "\"\"\"`!!'\"\"\""))
  ;;   (key-combo-define evil-insert-state-map (kbd ";") '(";\n" ";"))
  ;;   (add-hook 'web-mode-hook (lambda()
  ;;     (key-combo-define evil-insert-state-map (kbd "<")  '("<" "<`!!'>"))
  ;;     (key-combo-define evil-insert-state-map (kbd "/")  '("/" "</`!!'>"))
  ;;     (key-combo-define evil-insert-state-map (kbd ">")  '(">"))
  ;;     (key-combo-define evil-insert-state-map (kbd "=")  '("="))
  ;;     (key-combo-define evil-insert-state-map (kbd "*")  '("*"))
  ;;     (key-combo-define evil-insert-state-map (kbd "!")  '("!" "<!-- `!!' -->"))
  ;;   ))

  (add-hook
   'c++-mode-hook
   '(lambda ()
      (key-combo-mode t)
      (key-combo-define evil-insert-state-map (kbd "-")  '("-" "_"))))
  )

    #+END_SRC
*** key guide

    #+BEGIN_SRC emacs-lisp
;;; guide-key 
;; @see https://bitbucket.org/lyro/evil/issue/511/let-certain-minor-modes-key-bindings


;; [[file:t:/gitdir/dot-emacs/etc/hyone-key-combo.el::(defun%20evil-key-combo-define%20(state%20keymap%20key%20commands)][combo for evil]]

;; (use-package guide-key
;;   :config
;;   (guide-key-mode)
;;   (defun guide-key-hook-function-for-org-mode ()
;;     (guide-key/add-local-guide-key-sequence "C-c")
;;     (guide-key/add-local-guide-key-sequence "C-c C-x")
;;     (guide-key/add-local-highlight-command-regexp "org-"))
;;   (add-hook 'org-mode-hook 'guide-key-hook-function-for-org-mode))

(use-package which-key
  :config
  (which-key-mode)
  ( which-key-setup-side-window-right)
  (setq which-key-popup-type 'side-window)
  (setq which-key-side-window-max-width 0.5)
  )

    #+END_SRC

*** magit
    #+BEGIN_SRC emacs-lisp

;; (use-package magit
;;   :commands magit-status magit-diff magit-log magit-blame-mode
;;   :init
;;   (evil-leader/set-key
;;     "g t" 'magit-status
;;     "g b" 'magit-blame-mode
;;     "g l" 'magit-log
;;     "g d" 'magit-diff)
;;   :config
;;   (progn
;;     (evil-make-overriding-map magit-mode-map 'emacs)
;;     (define-key magit-mode-map "\C-w" 'evil-window-map)
;;     (evil-define-key 'emacs magit-mode-map "j" 'magit-goto-next-section)
;;     (evil-define-key 'emacs magit-mode-map "k" 'magit-goto-previous-section)
;;     (evil-define-key 'emacs magit-mode-map "K" 'magit-discard-item))) 


(use-package git-timemachine
  :config
  (evil-make-overriding-map git-timemachine-mode-map 'normal)
  ;; force update evil keymaps after git-timemachine-mode loaded
  (add-hook 'git-timemachine-mode-hook #'evil-normalize-keymaps))



(use-package evil-magit 
  :commands
  (magit-status))

    #+END_SRC

*** deprecated
    #+BEGIN_SRC emacs-lisp
;;deprecated;;(defun gf/narrow-grep-buffer ()
;;deprecated;;  "Narrow the grep buffer stripping out the really long grep command."
;;deprecated;;  (interactive)
;;deprecated;;  (goto-line 5)
;;deprecated;;  (narrow-to-region (point) (point-max))
;;deprecated;;  (goto-line 1))
;;deprecated;;
;;deprecated;;(define-key evil-normal-state-map (kbd "C-c g")
;;deprecated;;  (lambda()
;;deprecated;;    (interactive)
;;deprecated;;    (call-interactively 'projectile-ack)
;;deprecated;;    (other-window 1)
;;deprecated;;    (gf/narrow-grep-buffer)
;;deprecated;;    ))
    #+END_SRC




** bind map
   #+BEGIN_SRC emacs-lisp
(use-package evil-lisp-state
  :init
  (let ((leader ","))
    (bind-map evil-lisp-state-map
      :evil-keys (leader)
      :major-modes (emacs-lisp-mode)
      :evil-states (normal lisp))
    (bind-map evil-lisp-state-major-mode-map
       :evil-keys (leader)
       :evil-states (normal lisp)
       :major-modes (emacs-lisp-mode))) )
   #+END_SRC
** evil start

   #+BEGIN_SRC emacs-lisp
 (evil-mode 1)
   #+END_SRC
* bind map                                                       :DEPRECATED:
#+BEGIN_SRC emacs-lisp :tangle no

;; (use-package bind-map
;;   :config
;;   (bind-map my-org-map
;;             :evil-keys (",")
;;             :major-modes (org-mode))
;;   (bind-map-set-keys my-org-map
;;                      "t" 'ido-choose-from-recentf)) 
  
#+END_SRC
