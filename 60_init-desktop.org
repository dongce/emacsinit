# -*- coding: utf-8; -*-


* header
  #+BEGIN_SRC emacs-lisp
    ;; -*-mode: emacs-lisp; coding: utf-8; buffer-read-only: t;-*-
  #+END_SRC

* desktop
  #+BEGIN_SRC emacs-lisp

  ;; desktop 
  (setq desktop-enable t )
  (desktop-load-default)
  (desktop-read)
  (defun desktop-clear-not-modified ()
    "Empty the Desktop.
  desktop-clear 기능중에서 변경되지 않은 파일만을 닫는다."
    (interactive)
    (desktop-lazy-abort)
    (dolist (var desktop-globals-to-clear)
      (if (symbolp var)
        (eval `(setq-default ,var nil))
        (eval `(setq-default ,(car var) ,(cdr var)))))
    (let ((buffers (buffer-list))
          (preserve-regexp (concat "^\\("
                                   (mapconcat (lambda (regexp)
                                                (concat "\\(" regexp "\\)"))
                                              desktop-clear-preserve-buffers
                                              "\\|")
                                   "\\)$")))
      (while buffers
        (let ((bufname (buffer-name (car buffers))))
           (or
             (null bufname)
             (string-match preserve-regexp bufname)
             ;; Don't kill buffers made for internal purposes.
             (and (not (equal bufname "")) (eq (aref bufname 0) ?\s))
             (if (not (buffer-modified-p (car buffers))) (kill-buffer (car buffers)))))
        (setq buffers (cdr buffers))))
    (delete-other-windows))

  (define-key Buffer-menu-mode-map "c" 'desktop-clear-not-modified)
  #+END_SRC
* perf
  #+BEGIN_SRC emacs-lisp
  (remove-hook 'find-file-hooks 'vc-find-file-hook)
  #+END_SRC
* encoding
#+BEGIN_SRC emacs-lisp
  (w32-unix-eval
   (;;(message "win32")
    (prefer-coding-system 'cp949)
    ;; 한글 인코딩을 설정한다. 
    ;;(setq-default default-buffer-file-coding-system 'utf-8 )
    ;;(prefer-coding-system 'cp949)
    ;;(set-default-coding-systems 'cp949)
    (setq-default file-name-coding-system 'cp949)
    (setq-default default-buffer-file-coding-system 'cp949 ))
   ((prefer-coding-system 'utf-8)
    ;; 한글 인코딩을 설정한다. 
    ;;(setq-default default-buffer-file-coding-system 'utf-8 )
    ;;(prefer-coding-system 'cp949)
    (set-default-coding-systems 'utf-8)
    (setq-default file-name-coding-system 'utf-8)
    (setq-default default-buffer-file-coding-system 'utf-8 )))




  ;;; utf-8 설정 
  ;; ;; http://stackoverflow.com/questions/2901541/which-coding-system-should-i-use-in-emacs
  ;; (setq utf-translate-cjk-mode nil) ; disable CJK coding/encoding (Chinese/Japanese/Korean characters)
  ;;   (set-language-environment 'utf-8)
  ;;   (setq locale-coding-system 'utf-8)
  ;;   (set-default-coding-systems 'utf-8)
  ;;   (set-terminal-coding-system 'utf-8)
  ;;   (unless (eq system-type 'windows-nt)
  ;;    (set-selection-coding-system 'utf-8))
  ;;   (prefer-coding-system 'utf-8)

  ;; 외부프로그램 호출할 때 사용하는 encoding 을 결정합니다. 
  ;; 테스트 하는 경우 universal-coding-system-argument 함수를 참고 
  ;; ENCODING 설정방법 
  ;; (modify-coding-system-alist 'process ".*" 'cp949)
  (when-os 'windows-nt
           (modify-coding-system-alist 'process "git\.exe" '(utf-8 . cp949))
           (modify-coding-system-alist 'process "ls\.exe" 'utf-8 )
           (if (and dired-use-ls-dired ls-lisp-use-insert-directory-program)
               (setq-default file-name-coding-system 'utf-8)
             (setq-default file-name-coding-system 'cp949))
           (modify-coding-system-alist 'process "curl\.exe" 'utf-8 ))
  ;;(require 'unicad ) ;;CP949 를 우선 하는 방법을 찾을 것 


  ;;http://superuser.com/questions/325182/how-do-i-set-emacs-character-coding-for-files-in-a-directory
  ;;I'm using Aquamacs, a distro of GNU Emacs 23.3.50.1.
  ;;
  ;;I'm looking at some source files written with some comments in Greek, and they are encoded in CP1253.
  ;;
  ;;And, I can either revert with the proper encoding or I can add a file local variable:
  ;;
  ;;/* -*- mode: c-mode; tab-width: 4; coding: cp1253-unix; -*- */
  ;;
  ;;So I can get them to open properly, and I could certainly tack on file variables to each file.
  ;;
  ;;But I'd like to set the coding for the whole directory. Rather than editing .dir-locals.el by hand, I thought I'd simply:
  ;;
  ;;M-x copy-file-locals-to-dir-locals
  ;;
  ;;From the file that opened correctly. And that generates:
  ;;
  ;;;;; Directory Local Variables
  ;;;;; See Info node `(emacs) Directory Variables' for more information.
  ;;
  ;;((c-mode
  ;;  (tab-width . 4)
  ;;  (coding . cp1253-unix)))
  ;;
  ;;No dice. Yet it clearly recognizes the new tab-width, so it's reading the file.
  ;;
  ;;Any ideas why? And is there any log as emacs is processing the a-list?
  ;;emacs
  ;;share|improve this question
  ;;  
  ;;asked Aug 19 '11 at 9:36
  ;;Ben
  ;;  
  ;;feedback
  ;;migrated from serverfault.com Aug 19 '11 at 11:25
  ;;
  ;;1 Answer
  ;;active oldest votes
  ;;up vote 0 down vote
  ;;  
  ;;
  ;;Unfortunately, it appears that the coding header, by design, does not propagate from Emacs dir-locals; I struggled with your setup, and replicated the issue as well.
  ;;
  ;;Later I came across this source that seems to verify what you found: http://www.emacsmirror.org/package/dir-locals.html
  ;;
  ;;I'm not sure if there is a log for processing the a-list, but in case you aren't familiar with this variable, you can verify your encoding after visiting a file with:
  ;;
  ;;C-h v buffer-file-coding-system RET
  ;;
  ;;or
  ;;
  ;;M-x describe-variable RET buffer-file-coding-system RET
  ;;
  ;;Personally, I think your best bet would be what you already have working - file local variables.
  ;;
  ;;Alternatives I can think of (first is untested) would be to take a look at some of the elisp functions:
  ;;
  ;;(coding-system-priority-list)
  ;;(set-coding-system-priority &rest coding-systems)
  ;;
  ;;OR second: (assuming your directory structure is /something/blah/greekcode/file.c)
  ;;
  ;;(add-to-list 'auto-coding-alist 
  ;;     '("/greekcode/[^/]+.c\\'" . cp1253-unix))
  ;;
  ;;This takes precedence even over file local variables. Modify the regexp as you need, and experiment by evaluating:
  ;;
  ;;(find-auto-coding "/home/brian/greekcode/garbage.c" 1) <= C-x C-e
  ;;
  ;;returns:
  ;;
  ;;(cp1253-unix . auto-coding-alist)
  ;;
  ;;Hopefully this helps! Would love to hear what other emacs users propose as solutions.

  ;;http://www.emacswiki.org/emacs/AutoCodingAlist
  ;; \\ 다음에 ' 이 있음을 주의하라 
  ;;`\`'
  ;;     matches the empty string, but only at the beginning of the string
  ;;     or buffer (or its accessible portion) being matched against.
  ;;
  ;;`\''
  ;;     matches the empty string, but only at the end of the string or
  ;;     buffer (or its accessible portion) being matched against.
  ;;
  ;;deprecatedbynext;;(setq file-coding-system-alist (append '(("\\.js$" . utf-8)) file-coding-system-alist ) ) ;; 자바 스크립트의 인코딩을 UTF-8 로 합니다. 
  (add-to-list 'file-coding-system-alist '("itsalltext" . utf-8))
  (add-to-list 'file-coding-system-alist '("\\.rb\\'" . utf-8))
  (add-to-list 'file-coding-system-alist '("\\.py\\'" . utf-8))
  (add-to-list 'file-coding-system-alist '("\\.org\\'" . utf-8))
  (add-to-list 'file-coding-system-alist '("\\.csv\\'" . utf-8))
  (add-to-list 'file-coding-system-alist '("\\.json\\'" . utf-8))
  (add-to-list 'file-coding-system-alist '("\\.tex\\'" . utf-8))
  (add-to-list 'file-coding-system-alist '("\\.sql$" . utf-8))
  (add-to-list 'file-coding-system-alist '("\\.latex\\'" . utf-8))
  (add-to-list 'file-coding-system-alist '("COMMIT_EDITMSG" . utf-8))
  ;;deprecated;; (add-to-list 'auto-coding-alist '("\\.latex\\'" . utf-8))


  ;;;_ http://www.emacswiki.org/emacs/ChangingEncodings


  ;;ChangingEncodings
  ;;When Emacs reads a file, it determines the encoding, reads the file, decodes it into an internal representation, and stores the coding-system used in a variable to be used when saving the file. When saving, the buffer is encoded using the stored coding-system and written to the file again.
  ;;
  ;;You can change the encoding to use for the file when saving using ‘C-x C-m f’. You can also force this immediately by using ‘C-x C-m c <encoding> RET C-x C-w RET’.
  ;;
  ;;You can force Emacs to read a file in a specific encoding with ‘C-x RET c C-x C-f’. If you opened a file and EMACS determined the encoding incorrectly, you can use ‘M-x revert-buffer-with-coding-system’, to reload the file with a named encoding.
  ;;
  ;;For characters covered by ISO 8859, you can interconvert most encodings in Emacs 21.3, courtesy of the code in ucs-tables.el.  fx
  ;;
  ;;Maybe some more explanation is needed, here. In an Emacs running in a Latin-1 locale, create a buffer containing the letter ‘’. Save. The modeline indicates Latin-1 via the ‘1’. Now save using ‘C-x C-m c latin-2 RET C-x C-w RET’. The modeline indicates Latin-2 via the ‘2’. Kill the buffer, reopen it. It displays correctly, but the modeline indicates Latin-1 again. When and why did Emacs do the change from Latin-2 back to Latin-1? Does Locale take precedence over ‘C-x C-m c’?
  ;;
  ;;If, in a Latin-1 environment, you visit a non-ASCII file that doesn’t contain bytes in the range #x80 to #x9f, it is decoded as Latin-1 unless its encoding is specified explicitly somehow. The character `’ has the same code point in Latin-1 and Latin-2, which is why it `displays correctly’. See M-x list-charset-chars and C-u C-x =.
  ;;Contents
  ;;Partial Recoding
  ;;Forcing windows-1252 coding
  ;;Partial Recoding
  ;;Sometimes you need to recode parts of a buffer. Here is an example: You are using Gnus to read mail, and somebody sends you a Word document. You use the AntiWord trick to automatically insert the output of antiword into your buffer. Normally, a Gnus “Article” buffer has the coding system undecided. The antiword output might be inserted using the wrong coding system. On my system, I might end up with something like this:
  ;;
  ;;    Mit freundschaftlichen Grssen und den besten Wnschen fr 2004,
  ;;    Aikido Dojo ZrichBut what I want is this:
  ;;
  ;;    Mit freundschaftlichen Grssen und den besten Wnschen fr 2004,
  ;;    Aikido Dojo ZrichIt seems that the process output was decoded as Latin-1 instead of UTF-8. I want to recode it! To that effect, use M-x recode-region. The command recode-region is part of MULE as of Emacs 22.1; here is a surrogate for older Emacsen:
  ;;
  ;;    (defun recode-region (start end &optional coding-system)
  ;;      "Replace the region with a recoded text."
  ;;      (interactive "r\n\zCoding System (utf-8): ")
  ;;      (setq coding-system (or coding-system 'utf-8))
  ;;      (let ((buffer-read-only nil)
  ;;      (text (buffer-substring start end)))
  ;;        (delete-region start end)
  ;;        (insert (decode-coding-string (string-make-unibyte text) coding-system))))Now I can mark the attachment in the buffer and use M-x recode-region to recode it as UTF-8. The important part is that I need to convert the old text into “unibyte” representation. Without it, I will get the bytes used for the emacs-mule coding-system encoded as UTF-8.
  ;;
  ;;Forcing windows-1252 coding
  ;;Symptom: some files that used to be opened with the right coding under Emacs 21 are now opened with raw coding under Emacs 23. This is especially true with some files that had french accents that are now shown with codes such as \340 for “acute a”.
  ;;
  ;;Root cause: unknown.
  ;;
  ;;proposed “Solutions” seen for this problem: this does not work in my case: (prefer-coding-system ‘windows-1252)
  ;;
  ;;Since Emacs is not able to guess the coding for these types of files, here are 3 ways to address the problem.
  ;;
  ;;1) On a file by file basis: reopen the file by forcing the coding with this utility function:
  ;;    (defun has-revisit-file-with-coding-windows-1252 ()
  ;;    "Re-opens currently visited file with the windows-1252 coding. (By: hassansrc at gmail dot com)
  ;;    Example: 
  ;;    the currently opened file has french accents showing as codes such as:
  ;;        french: t\342ches et activit\340s   (\340 is shown as a unique char) 
  ;;    then execute this function: has-revisit-file-with-coding-windows-1252
  ;;      consequence: the file is reopened with the windows-1252 coding with no other action on the part of the user. 
  ;;                   Hopefully, the accents are now shown properly.
  ;;                   Otherwise, find another coding...
  ;;    
  ;;    "
  ;;        (interactive)
  ;;        (let ((coding-system-for-read 'windows-1252)
  ;;        (coding-system-for-write 'windows-1252)
  ;;        (coding-system-require-warning t)
  ;;        (current-prefix-arg nil))
  ;;          (message "has: Reopened file with coding set to windows-1252")
  ;;          (find-alternate-file buffer-file-name)
  ;;          )
  ;;    )Other ways to deal with accents that appear as codes (ex:\340 for acute e) when visiting files: 
  ;;
  ;;2)Intrusive way: put this at the beginning of the specific file that shows the problem :
  ;;    ;;; Emacs 23 is unable to open this file properly:  -*- coding: windows-1252 -*-3) General solution: apply this recipe to all *.txt files (put it in your .emacs file):
  ;;    (modify-coding-system-alist 'file "\\.txt\\'" 'windows-1252)These 3 solutions worked well under Emacs23 on Windows 7.
  ;;
  ;;HassanSrc



  ;;deprecated;;(defun recode-region (start end &optional coding-system)
  ;;deprecated;;  "Replace the region with a recoded text."
  ;;deprecated;;  (interactive "r\n\zCoding System (utf-8): ")
  ;;deprecated;;  (setq coding-system (or coding-system 'utf-8))
  ;;deprecated;;  (let ((buffer-read-only nil)
  ;;deprecated;;      (text (buffer-substring start end)))
  ;;deprecated;;    (delete-region start end)
  ;;deprecated;;    (insert (decode-coding-string (string-make-unibyte text) coding-system))))




  ;; (defun set-default-coding-systems (coding-system)
  ;;   "Set default value of various coding systems to CODING-SYSTEM.
  ;; This sets the following coding systems:
  ;;   o coding system of a newly created buffer
  ;;   o default coding system for terminal output
  ;;   o default coding system for keyboard input
  ;;   o default coding system for subprocess I/O
  ;;   o default coding system for converting file names."
  ;;   (check-coding-system coding-system)
  ;;   ;;(setq-default buffer-file-coding-system coding-system)
  ;;   ;; (set-default-buffer-file-coding-system coding-system)
  ;;   ;; (if default-enable-multibyte-characters
  ;;   ;;     (setq default-file-name-coding-system coding-system))
  ;;   ;; If coding-system is nil, honor that on MS-DOS as well, so
  ;;   ;; that they could reset the terminal coding system.
  ;;   ;; (unless (and (eq window-system 'pc) coding-system)
  ;;   ;;   (setq default-terminal-coding-system coding-system))
  ;;   (set-terminal-coding-system coding-system)
  ;;   ;;(setq default-keyboard-coding-system coding-system)
  ;;   (set-keyboard-coding-system coding-system)
  ;;   (setq default-process-coding-system (cons coding-system coding-system))
  ;;   ;; Refer to coding-system-for-read and coding-system-for-write
  ;;   ;; so that C-x RET c works.
  ;;   (add-hook 'comint-exec-hook
  ;;      `(lambda ()
  ;;         (let ((proc (get-buffer-process (current-buffer))))
  ;;     (set-process-input-coding-system
  ;;      proc (or coding-system-for-read ',coding-system))
  ;;     (set-process-output-coding-system
  ;;      proc (or coding-system-for-write ',coding-system))))
  ;;      'append)
  ;;   (setq file-name-coding-system coding-system))

  ;; (set-default-coding-systems 'utf-8)
#+END_SRC

#+RESULTS:
: ((\.csv\' . utf-8) (COMMIT_EDITMSG . utf-8) (\.latex\' . utf-8) (\.sql$ . utf-8) (\.tex\' . utf-8) (\.json\' . utf-8) (\.org\' . utf-8) (\.py\' . utf-8) (\.rb\' . utf-8) (itsalltext . utf-8) (\.dz\' no-conversion . no-conversion) (\.txz\' no-conversion . no-conversion) (\.xz\' no-conversion . no-conversion) (\.lzma\' no-conversion . no-conversion) (\.lz\' no-conversion . no-conversion) (\.g?z\' no-conversion . no-conversion) (\.\(?:tgz\|svgz\|sifz\)\' no-conversion . no-conversion) (\.tbz2?\' no-conversion . no-conversion) (\.bz2\' no-conversion . no-conversion) (\.Z\' no-conversion . no-conversion) (\.elc\' . utf-8-emacs) (\.el\' . prefer-utf-8) (\.utf\(-8\)?\' . utf-8) (\.xml\' . xml-find-file-coding-system) (\(\`\|/\)loaddefs.el\' raw-text . raw-text-unix) (\.tar\' no-conversion . no-conversion) (\.po[tx]?\'\|\.po\. . po-find-file-coding-system) (\.\(tex\|ltx\|dtx\|drv\)\' . latexenc-find-file-coding-system) ( undecided))
* alarm
       #+BEGIN_SRC emacs-lisp

         (let* ((ct (decode-time (current-time)))
                (ctm (+  (cadr ct) (* 60 (caddr ct)))))
           (if (not (> ctm (+ (* 10  60 ) 0  ))) (myalarm "10:00" "휴식하시요....."))
           (if (not (> ctm (+ (* 15  60 ) 0  ))) (myalarm "15:00" "휴식하시요....."))
           (if (not (> ctm (+ (* 18  60 ) 10 ))) (myalarm "18:10" "퇴근하시요....."))
           (if (not (> ctm (+ (* 19  60 ) 20 ))) (myalarm "19:20" "퇴근하시요....."))
           (if (not (> ctm (+ (* 20  60 ) 20 ))) (myalarm "21:20" "퇴근하시요....."))

           )
       #+END_SRC

       #+RESULTS:
       : [nil 22692 18288 0 nil alarm-clock-message ("퇴근하시요.....") nil 0]
* 오늘의 메시지 
  #+BEGIN_SRC emacs-lisp

    (setf
     katakana
     '(
       (ア a 아)
       (イ i 이)
       (ウ u 우)
       (エ e 에)
       (オ o 오)
       (-ャ ya 야)
       (-ュ yu 유)
       (-ョ yo 요)
       (カ ka 카)
       (キ ki 키)
       (ク ku 쿠)
       (ケ ke 케)
       (コ ko 코)
       (キャ kya 캬)
       (キュ kyu 큐)
       (キョ kyo 쿄)
       (ガ ga 가)
       (ギ gi 기)
       (グ gu 구)
       (ゲ ge 게)
       (ゴ go 고)
       (ギャ gya 갸)
       (ギュ gyu 규)
       (ギョ gyo 교)
       (サ sa 사)
       (シ shi 시)
       (ス su 스)
       (セ se 세)
       (ソ so 소)
       (シャ sha 샤)
       (シュ shu 슈)
       (ショ sho 쇼)
       (ザ za 자)
       (ジ ji 지)
       (ズ zu 즈)
       (ゼ ze 제)
       (ゾ zo 조)
       (ジャ ja 자)
       (ジュ ju 주)
       (ジョ jo 조)
       (タ ta 타)
       (チ chi 치)
       (ツ tsu 쓰)
       (テ te 테)
       (ト to 토)
       (チャ cha 차)
       (チュ chu 추)
       (チョ cho 초)
       (ダ da 다)
       (ヂ ji 지)
       (ヅ zu 즈)
       (デ de 데)
       (ド do 도)
       (ヂャ ja 자)
       (ヂュ ju 주)
       (ヂョ jo 조)
       (ナ na 나)
       (ニ ni 니)
       (ヌ nu 누)
       (ネ ne 네)
       (ノ no 노)
       (ニャ nya 냐)
       (ニュ nyu 뉴)
       (ニョ nyo 뇨)
       (ハ ha 하)
       (ヒ hi 히)
       (フ fu 후)
       (ヘ he 헤)
       (ホ ho 호)
       (ヒャ hya 햐)
       (ヒュ hyu 휴)
       (ヒョ hyo 효)
       (バ ba 바)
       (ビ bi 비)
       (ブ bu 부)
       (ベ be 베)
       (ボ bo 보)
       (ビャ bya 뱌)
       (ビュ byu 뷰)
       (ビョ byo 뵤)
       (パ pa 파)
       (ピ pi 피)
       (プ pu 푸)
       (ペ pe 페)
       (ポ po 포)
       (ピャ pya 퍄)
       (ピュ pyu 퓨)
       (ピョ pyo 표)
       (マ ma 마)
       (ミ mi 미)
       (ム mu 무)
       (メ me 메)
       (モ mo 모)
       (ミャ mya 먀)
       (ミュ myu 뮤)
       (ミョ myo 묘)
       (ヤ ya 야)
       (ユ yu 유)
       (ヨ yo 요)
       (ラ ra 라)
       (リ ri 리)
       (ル ru 루)
       (レ re 레)
       (ロ ro 로)
       (リャ rya 랴)
       (リュ ryu 류)
       (リョ ryo 료)
       (ワ wa 와)
       (ヰ wi 이)
       (ヱ we 에)
       (ヲ wo 오)
       (ン n/nn -ㄴ)
       ;;아래의 가타카나는 근현대에 들어 추가된 것으로, 주로 외국어 발음을 표기하는 데 사용한다.
       (イェ ye 예)
       (ウィ wi 위)
       (ウェ we 웨)
       (ヴァ/ヷ va 바)
       (ヴィ/ヸ vi 비)
       (ヴ vu 부)
       (ヴェ/ヹ ve 베)
       (ヴォ/ヺ vo 보)
       (シェ she 셰)
       (チェ che 체)
       (ジェ ヂェ je 제)
       (ティ ti 티)
       (トゥ tu 투)
       (テャ tya 탸)
       (テュ tyu 튜)
       (テョ tyo 툐)
       (ディ di 디)
       (ドゥ du 두)
       (デャ dya 댜)
       (デュ dyu 듀)
       (デョ dyo 됴)
       (ツァ tsa 싸)
       (ツィ tsi 씨)
       (ツェ tse 쎄)
       (ツォ tso 쏘)
       (ツャ tsya 쌰)
       (ツュ tsyu 쓔)
       (ツョ tsyo 쑈)
       (ファ fa 화)
       (フィ fi 휘)
       (フェ fe 훼)
       (フォ fo 호)
       (フャ fya)
       (フュ fyu)
       (フョ fyo)
       ))

    (spacemacs-buffer/warning
     "오늘의 카타카나 %s"
     (s-join ";" (-map #'symbol-name (nth  (% (length  katakana) (time-to-day-in-year (current-time))) katakana)) ))

  #+END_SRC

  #+RESULTS:
  | Cannot find any of the specified fonts (Source Code Pro)! Font settings may not be correct. | More than one init function found for package helm-make. Previous owner was helm, replacing it with layer ivy. | Auto-evilication could not remap these functions in map `elfeed-search-mode-map': |
