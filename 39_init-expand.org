;; -*- coding: utf-8; -*-


* yas

#+BEGIN_SRC emacs-lisp
(add-to-list 'yas-snippet-dirs (concat emacsw32-home "YASnippet"))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle no


(use-package yasnippet
  :config 


  ;; http://capitaomorte.github.io/yasnippet/snippet-development.html

;;; http://capitaomorte.github.io/yasnippet/snippet-expansion.html
  (defun shk-yas/helm-prompt (prompt choices &optional display-fn)
    "Use helm to select a snippet. Put this into `yas/prompt-functions.'"
    (interactive)
    (setq display-fn (or display-fn 'identity))
    (if (require 'helm-config)
        (let (tmpsource cands result rmap)
          (setq cands (mapcar (lambda (x) (funcall display-fn x)) choices))
          (setq rmap (mapcar (lambda (x) (cons (funcall display-fn x) x)) choices))
          (setq tmpsource
                (list
                 (cons 'name prompt)
                 (cons 'candidates cands)
                 '(action . (("Expand" . (lambda (selection) selection))))
                 ))
          (setq result (helm-other-buffer '(tmpsource) "*helm-select-yasnippet"))
          (if (null result)
              (signal 'quit "user quit!")
            (cdr (assoc result rmap))))
      nil))



  ;; Completing point by some yasnippet key
  (defun yas-ido-expand ()
    "Lets you select (and expand) a yasnippet key"
    (interactive)
    (let ((original-point (point)))
      (while (and
              (not (= (point) (point-min) ))
              (not
               (string-match "[[:space:]\n]" (char-to-string (char-before)))))
        (backward-word 1))
      (let* ((init-word (point))
             (word (buffer-substring init-word original-point))
             (list (yas-active-keys)))
        (goto-char original-point)
        (let ((key (remove-if-not
                    (lambda (s) (string-match (concat "^" word) s)) list)))
          (if (= (length key) 1)
              (setq key (pop key))
            (setq key (ido-completing-read "key: " list nil nil word)))
          (delete-char (- init-word original-point))
          (insert key)
          (yas-expand)))))

  (add-to-list 'yas-prompt-functions #'shk-yas/helm-prompt)
  (add-to-list 'yas-snippet-dirs (concat emacsw32-home "YASnippet")))

#+END_SRC

* company                                             :deprecated:spacemacs:

#+BEGIN_SRC emacs-lisp :tangle no

(require  'company)
(setq company-backends (delete 'company-semantic company-backends))
(add-hook 'after-init-hook 'global-company-mode)
(define-key c-mode-map  [(backtab)] 'company-complete)
(define-key c++-mode-map  [(backtab)] 'company-complete)

#+END_SRC

* company cancel key 
#+BEGIN_SRC emacs-lisp
    ;;; Prevent suggestions from being triggered automatically. In particular,
    ;;; this makes it so that:
    ;;; - TAB will always complete the current selection.
    ;;; - RET will only complete the current selection if the user has explicitly
    ;;;   interacted with Company.
    ;;; - SPC will never complete the current selection.
    ;;;
    ;;; Based on:
    ;;; - https://github.com/company-mode/company-mode/issues/530#issuecomment-226566961
    ;;; - http://emacs.stackexchange.com/a/13290/12534
    ;;; - http://stackoverflow.com/a/22863701/3538165
    ;;;
    ;;; See also:
    ;;; - http://emacs.stackexchange.com/a/24800/12534
    ;;; - http://emacs.stackexchange.com/q/27459/12534

    ;; <return> is for windowed Emacs; RET is for terminal Emacs
    (dolist (key '("<return>" "RET"))
      ;; Here we are using an advanced feature of define-key that lets
      ;; us pass an "extended menu item" instead of an interactive
      ;; function. Doing this allows RET to regain its usual
      ;; functionality when the user has not explicitly interacted with
      ;; Company.
      (define-key company-active-map (kbd key)
        `(menu-item nil company-complete
                    :filter ,(lambda (cmd)
                               (when (company-explicit-action-p)
                                 cmd)))))
    (define-key company-active-map (kbd "TAB") #'company-complete-selection)
    (define-key company-active-map (kbd "SPC") nil)

    ;; Company appears to override the above keymap based on company-auto-complete-chars.
    ;; Turning it off ensures we have full control.
    (setq company-auto-complete-chars nil)


  (define-key  company-active-map [escape] 'company-abort)
#+END_SRC

#+RESULTS:
: company-abort
