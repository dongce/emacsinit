;; -*- coding: utf-8; -*-


* yas
#+BEGIN_SRC emacs-lisp


(use-package yasnippet
  :config 


  ;; http://capitaomorte.github.io/yasnippet/snippet-development.html

;;; http://capitaomorte.github.io/yasnippet/snippet-expansion.html
  (defun shk-yas/helm-prompt (prompt choices &optional display-fn)
    "Use helm to select a snippet. Put this into `yas/prompt-functions.'"
    (interactive)
    (setq display-fn (or display-fn 'identity))
    (if (require 'helm-config)
        (let (tmpsource cands result rmap)
          (setq cands (mapcar (lambda (x) (funcall display-fn x)) choices))
          (setq rmap (mapcar (lambda (x) (cons (funcall display-fn x) x)) choices))
          (setq tmpsource
                (list
                 (cons 'name prompt)
                 (cons 'candidates cands)
                 '(action . (("Expand" . (lambda (selection) selection))))
                 ))
          (setq result (helm-other-buffer '(tmpsource) "*helm-select-yasnippet"))
          (if (null result)
              (signal 'quit "user quit!")
            (cdr (assoc result rmap))))
      nil))



  ;; Completing point by some yasnippet key
  (defun yas-ido-expand ()
    "Lets you select (and expand) a yasnippet key"
    (interactive)
    (let ((original-point (point)))
      (while (and
              (not (= (point) (point-min) ))
              (not
               (string-match "[[:space:]\n]" (char-to-string (char-before)))))
        (backward-word 1))
      (let* ((init-word (point))
             (word (buffer-substring init-word original-point))
             (list (yas-active-keys)))
        (goto-char original-point)
        (let ((key (remove-if-not
                    (lambda (s) (string-match (concat "^" word) s)) list)))
          (if (= (length key) 1)
              (setq key (pop key))
            (setq key (ido-completing-read "key: " list nil nil word)))
          (delete-char (- init-word original-point))
          (insert key)
          (yas-expand)))))

  (add-to-list 'yas-prompt-functions #'shk-yas/helm-prompt)
  (add-to-list 'yas-snippet-dirs (concat emacsw32-home "YASnippet")))

#+END_SRC


* company
#+BEGIN_SRC emacs-lisp

(require  'company)
(setq company-backends (delete 'company-semantic company-backends))
(add-hook 'after-init-hook 'global-company-mode)
(define-key c-mode-map  [(backtab)] 'company-complete)
(define-key c++-mode-map  [(backtab)] 'company-complete)

#+END_SRC
